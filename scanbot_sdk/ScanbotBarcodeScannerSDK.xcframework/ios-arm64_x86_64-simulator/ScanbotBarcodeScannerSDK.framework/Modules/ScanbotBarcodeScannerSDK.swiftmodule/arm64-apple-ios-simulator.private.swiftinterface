// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ScanbotBarcodeScannerSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AudioToolbox
import CoreGraphics.CGGeometry
import Combine
import CommonCrypto
import CoreGraphics
import CoreHaptics
import CoreMotion
import DeveloperToolsSupport
import Foundation
import ImageIO
import OSLog
import PDFKit
@_exported import ScanbotBarcodeScannerSDK
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@objc public enum SBSDKFeature : Swift.Int, Swift.CaseIterable {
  case payformDetection = 0
  case edgeDetection = 1
  case edgeDetectionUI = 2
  case imageProcessing = 3
  case OCR = 4
  case dataIntelligence = 5
  case PDFCreation = 6
  case cloudUpload = 7
  case creditCardRecognition = 8
  case barcodeDetection = 9
  case w2Detection = 10
  case checkRecognition = 11
  case invoiceDetection = 12
  case MRZRecognition = 13
  case medicalCertRecognition = 14
  case multipleObjectsDetection = 15
  case textOrientationDetection = 16
  case EHICRecognition = 17
  case IDCardRecognition = 18
  case NFCScanning = 19
  case textLineRecognition = 20
  case licensePlateScanning = 21
  case driverLicenseRecognition = 22
  @_documentation(visibility: internal) case none = 31
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ScanbotBarcodeScannerSDK.SBSDKFeature]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [ScanbotBarcodeScannerSDK.SBSDKFeature] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKUI2Color : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @_documentation(visibility: internal) public static func == (lhs: ScanbotBarcodeScannerSDK.SBSDKUI2Color, rhs: ScanbotBarcodeScannerSDK.SBSDKUI2Color) -> Swift.Bool
  @objc public var uiColor: UIKit.UIColor {
    @objc get
  }
  @objc convenience public init(colorString: Swift.String)
  @objc convenience public init(uiColor: UIKit.UIColor)
  @objc convenience public init(colorString: Swift.String, isArgb: Swift.Bool)
  @objc public func toHexString() -> Swift.String
  @objc public func toJson() -> Swift.String
  @_documentation(visibility: internal) convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @_documentation(visibility: internal) @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2ActionBarConfiguration) @objcMembers public class SBSDKUI2ActionBarConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var flashButton: ScanbotBarcodeScannerSDK.SBSDKUI2RoundButton
  @objc public var zoomButton: ScanbotBarcodeScannerSDK.SBSDKUI2RoundButton
  @objc public var flipCameraButton: ScanbotBarcodeScannerSDK.SBSDKUI2RoundButton
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2ActionBarConfiguration?
  @objc public init(flashButton: ScanbotBarcodeScannerSDK.SBSDKUI2RoundButton = SBSDKUI2RoundButton(visible: true,
                                                                       backgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                      isArgb: false),
                                                                       foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                      isArgb: false),
                                                                       activeBackgroundColor: SBSDKUI2Color(colorString: "?sbColorWarning",
                                                                                                            isArgb: false),
                                                                       activeForegroundColor: SBSDKUI2Color(colorString: "#1C1B1F",
                                                                                                            isArgb: false)), zoomButton: ScanbotBarcodeScannerSDK.SBSDKUI2RoundButton = SBSDKUI2RoundButton(visible: true,
                                                                      backgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                     isArgb: false),
                                                                      foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                     isArgb: false),
                                                                      activeBackgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                           isArgb: false),
                                                                      activeForegroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                           isArgb: false)), flipCameraButton: ScanbotBarcodeScannerSDK.SBSDKUI2RoundButton = SBSDKUI2RoundButton(visible: true,
                                                                            backgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                           isArgb: false),
                                                                            foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                           isArgb: false),
                                                                            activeBackgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                                 isArgb: false),
                                                                            activeForegroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                 isArgb: false)))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public enum SBSDKImageFileFormat : Swift.Int {
  case PNG
  case JPEG
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2UserGuidanceConfiguration) @objcMembers public class SBSDKUI2UserGuidanceConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var background: ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2UserGuidanceConfiguration?
  @objc public init(visible: Swift.Bool = true, title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                    isArgb: false)), background: ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle = SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000", isArgb: false),
                                            fillColor: SBSDKUI2Color(colorString: "?sbColorSurfaceLow",
                                                                     isArgb: false)))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2IconUserGuidanceConfiguration) @objcMembers public class SBSDKUI2IconUserGuidanceConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var icon: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var background: ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2IconUserGuidanceConfiguration?
  @objc public init(visible: Swift.Bool = true, icon: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle = SBSDKUI2IconStyle(color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                 isArgb: false)), title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                    isArgb: false)), background: ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle = SBSDKUI2BackgroundStyle(fillColor: SBSDKUI2Color(colorString: "?sbColorSurfaceLow",
                                                                     isArgb: false)))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SBSDKCameraExposureSettings : ObjectiveC.NSObject {
  @objc final public let exposureDuration: Swift.Double
  @objc final public let exposureTargetOffset: Swift.Float
  @objc final public let ISOValue: Swift.Float
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum SBSDKScannerStatus : Swift.Int {
  case idle
  case scanning
  case detected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias SBSDKProgessUpdateHandler = (ScanbotBarcodeScannerSDK.SBSDKProgress) -> ()
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKProgress : Foundation.Progress, @unchecked Swift.Sendable {
  @objc public static let SBSDKProgressKindTextRecognition: Swift.String
  @objc public static let SBSDKProgressKindCreatePages: Swift.String
  @objc public static let SBSDKProgressKindProcessImage: Swift.String
  @objc public var updateHandler: ScanbotBarcodeScannerSDK.SBSDKProgessUpdateHandler?
  @_documentation(visibility: internal) @objc override dynamic public var isCancelled: Swift.Bool {
    @objc get
  }
  @objc convenience public init(totalUnitCount: Swift.Int64)
  @_documentation(visibility: internal) @objc override dynamic public init(parent parentProgressOrNil: Foundation.Progress?, userInfo userInfoOrNil: [Foundation.ProgressUserInfoKey : Any]? = nil)
  @_documentation(visibility: internal) @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_documentation(visibility: internal) @objc override dynamic public func cancel()
  @_documentation(visibility: internal) @objc override dynamic public var localizedDescription: Swift.String! {
    @objc get
    @objc set
  }
  @_documentation(visibility: internal) @objc override dynamic public var localizedAdditionalDescription: Swift.String! {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKGenericDocumentField : ObjectiveC.NSObject, Swift.Codable {
  @objc(SBSDKGenericDocumentFieldValidationStatus) public enum ValidationStatus : Swift.Int, Swift.Codable {
    case invalid
    case valid
    case undefined = -1
    @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
    @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var type: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldType
  @objc public var value: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentOcrResult?
  @objc public var image: UIKit.UIImage?
  @objc public var validationStatus: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField.ValidationStatus
  @objc @_documentation(visibility: internal) public init(type: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldType, value: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentOcrResult?, image: UIKit.UIImage?, validationStatus: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField.ValidationStatus)
  @_documentation(visibility: internal) required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) @objc override dynamic public init()
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKShutterButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor @preconcurrency public var isTakingPhoto: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var scannerStatus: ScanbotBarcodeScannerSDK.SBSDKScannerStatus {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var buttonSearchingColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var buttonDetectedColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var buttonSearchingBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var buttonDetectedBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var indicatorColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @objc @_documentation(visibility: internal) deinit
}
@objc public enum SBSDKBarcodeOverlayFormat : Swift.Int {
  case none = 0
  case code = 1
  case codeAndType = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKAspectRatio : ObjectiveC.NSObject {
  @objc public var width: Swift.Double {
    get
  }
  @objc public var height: Swift.Double {
    get
  }
  @objc public var ratio: Swift.Double {
    @objc get
  }
  @objc(initWithWidth:andHeight:) public init(width: Swift.Double, height: Swift.Double)
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc deinit
}
extension ScanbotBarcodeScannerSDK.SBSDKBaseScannerViewController : ScanbotBarcodeScannerSDK.SBSDKFinderViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func finderView(_ view: ScanbotBarcodeScannerSDK.SBSDKFinderView, didChangeRect: CoreFoundation.CGRect)
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BarcodeUseCase) @objcMembers public class SBSDKUI2BarcodeUseCase : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Encodable {
  @objc public var _type: Swift.String {
    @objc get
  }
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeUseCase?
  @objc override dynamic public init()
  @objc public func toJson() -> Swift.String
  @objc public static func singleScanningMode() -> ScanbotBarcodeScannerSDK.SBSDKUI2SingleScanningMode
  @objc public static func multipleScanningMode() -> ScanbotBarcodeScannerSDK.SBSDKUI2MultipleScanningMode
  @objc public static func findAndPickScanningMode() -> ScanbotBarcodeScannerSDK.SBSDKUI2FindAndPickScanningMode
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objc public protocol SBSDKUIBarcodesBatchScannerMapping {
  @objc(loadMappedDataForBarcode:completion:) func loadMappedData(for barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult, completion: ((ScanbotBarcodeScannerSDK.SBSDKUIBarcodeMappedData?) -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKUIDialogButtonStyle : ObjectiveC.NSObject {
  @objc public var font: UIKit.UIFont
  @objc public var textColor: UIKit.UIColor
  @objc public var highlightedTextColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var highlightedBackgroundColor: UIKit.UIColor
  @objc(defaultStyle) public static var `default`: ScanbotBarcodeScannerSDK.SBSDKUIDialogButtonStyle {
    @objc get
  }
  @objc(cancelStyle) public static var cancel: ScanbotBarcodeScannerSDK.SBSDKUIDialogButtonStyle {
    @objc get
  }
  @objc(destructiveStyle) public static var destructive: ScanbotBarcodeScannerSDK.SBSDKUIDialogButtonStyle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol SBSDKCameraSessionDelegate {
  @objc func cameraSession(_ session: ScanbotBarcodeScannerSDK.SBSDKCameraSession, didOutput frame: ScanbotBarcodeScannerSDK.SBSDKBaseScannerFrame)
}
@objc public protocol SBSDKCameraSessionObserving {
  @objc optional func cameraSession(_ session: ScanbotBarcodeScannerSDK.SBSDKCameraSession, didChangeDevice device: ScanbotBarcodeScannerSDK.SBSDKCameraDevice)
  @objc optional func cameraSession(_ session: ScanbotBarcodeScannerSDK.SBSDKCameraSession, didToggleTorchlight enabled: Swift.Bool)
  @objc optional func cameraSession(_ session: ScanbotBarcodeScannerSDK.SBSDKCameraSession, didChangeZoom zoomValue: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SBSDKCameraSession : ObjectiveC.NSObject {
  @objc public var device: ScanbotBarcodeScannerSDK.SBSDKCameraDevice {
    @objc get
    @objc set
  }
  @objc public var previewLayer: AVFoundation.AVCaptureVideoPreviewLayer
  @objc public var captureSession: AVFoundation.AVCaptureSession?
  @objc public var videoResolution: CoreFoundation.CGSize {
    @objc get
  }
  @objc public var videoOrientation: AVFoundation.AVCaptureVideoOrientation {
    @objc get
    @objc set
  }
  @objc public var videoFrameResolution: ScanbotBarcodeScannerSDK.SBSDKVideoFrameResolution {
    @objc get
    @objc set
  }
  @objc weak public var videoDelegate: (any ScanbotBarcodeScannerSDK.SBSDKCameraSessionDelegate)? {
    @objc get
    @objc set
  }
  @objc public var isCapturingStillImage: Swift.Bool {
    get
  }
  @objc public var isTorchLightAvailable: Swift.Bool {
    @objc get
  }
  @objc public var isTorchLightEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var updateTorchlightBlock: (() -> ())?
  @objc public var updateZoomBlock: ((CoreFoundation.CGFloat) -> ())?
  @objc public var minZoom: CoreFoundation.CGFloat {
    get
  }
  @objc public var maxZoom: CoreFoundation.CGFloat {
    get
  }
  @objc public var maxOpticalZoom: CoreFoundation.CGFloat {
    get
  }
  @objc public var zoomValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var isMirrored: Swift.Bool {
    @objc get
  }
  @objc public var isZooming: Swift.Bool {
    @objc get
  }
  @objc public var isZoomAvailable: Swift.Bool {
    @objc get
  }
  @objc public var isFocusLockEnabled: Swift.Bool {
    get
  }
  @objc public var photoQualityPrioritization: ScanbotBarcodeScannerSDK.SBSDKCapturePhotoQualityPrioritization {
    @objc get
    @objc set
  }
  @objc public var videoContentMode: ScanbotBarcodeScannerSDK.SBSDKVideoContentMode {
    @objc get
    @objc set
  }
  @objc public var exposureSettings: ScanbotBarcodeScannerSDK.SBSDKCameraExposureSettings? {
    @objc get
  }
  @objc public var isFrontCameraUsed: Swift.Bool {
    @objc get
  }
  @objc public var isDetectionPaused: Swift.Bool {
    @objc get
  }
  @objc public var isCameraAdjusting: Swift.Bool {
    @objc get
  }
  @objc public var isSessionRunning: Swift.Bool {
    @objc get
  }
  @objc convenience public init?(feature: ScanbotBarcodeScannerSDK.SBSDKFeature)
  @objc public init?(feature: ScanbotBarcodeScannerSDK.SBSDKFeature, device: ScanbotBarcodeScannerSDK.SBSDKCameraDevice)
  @objc(startSession:) public func start(completion: ((Swift.Bool) -> ())?)
  @objc(stopSession) public func stop()
  @objc public func pauseDetection()
  @objc public func resumeDetection()
  @objc public func freezeSession()
  @objc public func unfreezeSession()
  @objc(setZoomValue:animated:) public func setZoom(_ value: CoreFoundation.CGFloat, animated: Swift.Bool)
  @objc(resetZoomAnimated:) public func resetZoom(animated: Swift.Bool)
  @objc(beginFocusLockAtLensPosition:) public func beginFocusLock(at lensPosition: CoreFoundation.CGFloat) -> Swift.Bool
  @objc public func endFocusLock()
  @objc(captureStillImageWithCompletionHandler:) public func captureStillImage(completion: @escaping (Foundation.Data?, (any Swift.Error)?) -> ())
  @objc public func setPreviewLayerVisible(_ visible: Swift.Bool, animated: Swift.Bool)
  @objc public func addSessionObserver(_ observer: any ScanbotBarcodeScannerSDK.SBSDKCameraSessionObserving)
  @objc public func removeSessionObserver(_ observer: any ScanbotBarcodeScannerSDK.SBSDKCameraSessionObserving)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
extension ScanbotBarcodeScannerSDK.SBSDKCameraSession : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BarcodeTextLocalization) @objcMembers public class SBSDKUI2BarcodeTextLocalization : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var cameraPermissionEnableCameraTitle: Swift.String
  @objc public var cameraPermissionEnableCameraExplanation: Swift.String
  @objc public var cameraPermissionEnableCameraButton: Swift.String
  @objc public var cameraPermissionCloseButton: Swift.String
  @objc public var topBarCancelButton: Swift.String
  @objc public var topBarTitle: Swift.String
  @objc public var userGuidance: Swift.String
  @objc public var barcodeInfoMappingLoadingMessage: Swift.String
  @objc public var barcodeInfoMappingErrorStateTitle: Swift.String
  @objc public var barcodeInfoMappingErrorStateSubtitle: Swift.String
  @objc public var barcodeInfoMappingErrorStateRetryButton: Swift.String
  @objc public var barcodeInfoMappingErrorStateCancelButton: Swift.String
  @objc public var manualCountEditDialogTitle: Swift.String
  @objc public var manualCountEditDialogInfo: Swift.String
  @objc public var manualCountEditDialogUpdateButton: Swift.String
  @objc public var manualCountEditDialogCancelButton: Swift.String
  @objc public var sheetResetButton: Swift.String
  @objc public var sheetClearAllButton: Swift.String
  @objc public var sheetSubmitButton: Swift.String
  @objc public var sheetStartScanningButton: Swift.String
  @objc public var sheetPlaceholderTitle: Swift.String
  @objc public var sheetPlaceholderSubtitle: Swift.String
  @objc public var singleModeConfirmationCancelButton: Swift.String
  @objc public var multipleModeSheetTitle: Swift.String
  @objc public var findAndPickSheetTitle: Swift.String
  @objc public var findAndPickSheetBarcodeItemSubtitle: Swift.String
  @objc public var findAndPickPartialAlertTitle: Swift.String
  @objc public var findAndPickPartialAlertSubtitle: Swift.String
  @objc public var findAndPickPartialAlertCancelButton: Swift.String
  @objc public var findAndPickPartialAlertSubmitButton: Swift.String
  @objc public var findAndPickCompleteAlertTitle: Swift.String
  @objc public var findAndPickCompleteAlertSubtitle: Swift.String
  @objc public var findAndPickCompleteAlertCancelButton: Swift.String
  @objc public var findAndPickCompleteAlertSubmitButton: Swift.String
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeTextLocalization?
  @objc public init(cameraPermissionEnableCameraTitle: Swift.String = "Camera permission denied!", cameraPermissionEnableCameraExplanation: Swift.String = "Please allow the usage of the camera to start the scanning process.", cameraPermissionEnableCameraButton: Swift.String = "Grant permission", cameraPermissionCloseButton: Swift.String = "Close", topBarCancelButton: Swift.String = "Cancel", topBarTitle: Swift.String = "Scan Item", userGuidance: Swift.String = "Move the finder over a barcode", barcodeInfoMappingLoadingMessage: Swift.String = "Loading details...", barcodeInfoMappingErrorStateTitle: Swift.String = "Connection Error!", barcodeInfoMappingErrorStateSubtitle: Swift.String = "There was an issue and the data requested was not fetched. You could try again or discard this result to start a new scan.", barcodeInfoMappingErrorStateRetryButton: Swift.String = "Retry", barcodeInfoMappingErrorStateCancelButton: Swift.String = "Cancel", manualCountEditDialogTitle: Swift.String = "Update count", manualCountEditDialogInfo: Swift.String = "Adjust the number of items you scanned.", manualCountEditDialogUpdateButton: Swift.String = "Update", manualCountEditDialogCancelButton: Swift.String = "Cancel", sheetResetButton: Swift.String = "Reset", sheetClearAllButton: Swift.String = "Clear all", sheetSubmitButton: Swift.String = "Submit", sheetStartScanningButton: Swift.String = "Start scanning", sheetPlaceholderTitle: Swift.String = "No barcodes here!", sheetPlaceholderSubtitle: Swift.String = "The barcode list is currently empty. Close this sheet and scan your items to add them.", singleModeConfirmationCancelButton: Swift.String = "Close", multipleModeSheetTitle: Swift.String = "%d items", findAndPickSheetTitle: Swift.String = "%d/%d scanned", findAndPickSheetBarcodeItemSubtitle: Swift.String = "%d/%d added", findAndPickPartialAlertTitle: Swift.String = "Incomplete scan!", findAndPickPartialAlertSubtitle: Swift.String = "Some codes are yet to be scanned. Proceed with submission anyway?", findAndPickPartialAlertCancelButton: Swift.String = "Cancel", findAndPickPartialAlertSubmitButton: Swift.String = "Yes, Submit", findAndPickCompleteAlertTitle: Swift.String = "All codes found!", findAndPickCompleteAlertSubtitle: Swift.String = "You have successfully scanned all codes. Proceed with submission?", findAndPickCompleteAlertCancelButton: Swift.String = "Dismiss", findAndPickCompleteAlertSubmitButton: Swift.String = "Submit")
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeMappedData {
  @objc public static let barcodeImageKey: Swift.String
}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType {
  @objc public static func supportedBarcodeTypes(for documentFormats: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType]) -> [ScanbotBarcodeScannerSDK.SBSDKBarcodeType]
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKUIBarcodeImageStorage : ObjectiveC.NSObject {
  @objc(defaultStorage) public static var `default`: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeImageStorage {
    @objc get
  }
  @objc(setDefaultStorage:) public static func setDefault(_ storage: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeImageStorage)
  @objc public var writingJpegImageCompressionQuality: Swift.Int {
    get
  }
  @objc public var writingImageFileFormat: ScanbotBarcodeScannerSDK.SBSDKImageFileFormat {
    get
  }
  @objc public var allImageURLs: [Foundation.URL] {
    @objc get
  }
  @available(*, unavailable, message: "use default")
  @objc override dynamic public init()
  @objc convenience public init(imageFileFormat format: ScanbotBarcodeScannerSDK.SBSDKImageFileFormat)
  @objc convenience public init(jpegFileFormatAndCompressionQuality jpegImageCompressionQuality: Swift.Int)
  @objc public init(imageFileFormat format: ScanbotBarcodeScannerSDK.SBSDKImageFileFormat, location: ScanbotBarcodeScannerSDK.SBSDKStorageLocation?)
  @objc public init(jpegFileFormatAndCompressionQuality jpegImageCompressionQuality: Swift.Int, location: ScanbotBarcodeScannerSDK.SBSDKStorageLocation?)
  @objc public func removeAll()
  @objc deinit
}
@objc public enum SBSDKOrientationLock : Swift.Int {
  case none = 0
  case portrait = 1
  case landscape = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class SBSDKPolygonEdge : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var p1: CoreFoundation.CGPoint {
    get
  }
  @objc public var p2: CoreFoundation.CGPoint {
    get
  }
  @objc public var center: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc public var length: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public var boundingBox: CoreFoundation.CGRect {
    @objc get
  }
  @objc public var orientation: ScanbotBarcodeScannerSDK.SBSDKPolygonEdgeOrientation {
    @objc get
  }
  @objc(initWithPoint:andPoint:) public init(with p1: CoreFoundation.CGPoint, and p2: CoreFoundation.CGPoint)
  @_documentation(visibility: internal) @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @_documentation(visibility: internal) @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers public class SBSDKGenericDocumentWrapper : ObjectiveC.NSObject {
  @objc public var requiredDocumentType: Swift.String? {
    @objc get
  }
  @objc final public let document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument
  @objc(initWithGenericDocument:) public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodeScannerConfiguration : ScanbotBarcodeScannerSDK.SBSDKUIConfiguration {
  @objc public var uiConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerUIConfiguration
  @objc public var textConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerTextConfiguration
  @objc public var behaviorConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerBehaviorConfiguration
  @objc public var trackingOverlayConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeTrackingOverlayConfiguration
  @objc override public class var defaultConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerConfiguration {
    @objc get
  }
  @objc public init(uiConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerUIConfiguration, textConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerTextConfiguration, behaviorConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerBehaviorConfiguration, cameraConfiguration: ScanbotBarcodeScannerSDK.SBSDKUICameraConfiguration, trackingOverlayConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeTrackingOverlayConfiguration)
  @_documentation(visibility: internal) @objc convenience dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeTrackedViewPolygonStyle : ObjectiveC.NSObject {
  @objc public var polygonDrawingEnabled: Swift.Bool
  @objc public var polygonColor: UIKit.UIColor
  @objc public var polygonSelectedColor: UIKit.UIColor
  @objc public var polygonBackgroundColor: UIKit.UIColor
  @objc public var polygonBackgroundSelectedColor: UIKit.UIColor
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc public var cornerRadius: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SBSDKBarcodeEngineMode : Swift.Int {
  case legacy = 0
  case nextGen = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat {
  @objc public static var allFormats: [ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat] {
    @objc get
  }
  @objc public static var commonFormats: [ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat] {
    @objc get
  }
  @objc public static var oneDFormats: [ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat] {
    @objc get
  }
  @objc public static var twoDFormats: [ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat] {
    @objc get
  }
  @objc final public func toSDKType() -> ScanbotBarcodeScannerSDK.SBSDKBarcodeType
}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeType {
  @objc dynamic public func fromSDKType() -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKPDFPagesExtractor : ObjectiveC.NSObject {
  @objc(imagesFromPDF:) public func images(from pdfURL: Foundation.URL) -> [UIKit.UIImage]
  @objc(imagesFromPDF:scaling:) public func images(from pdfURL: Foundation.URL, scaling: CoreFoundation.CGFloat) -> [UIKit.UIImage]
  @objc(imageURLsFromPDF:outputDirectory:) public func imageURLs(from pdfURL: Foundation.URL, outputDirectory: Foundation.URL) -> [Foundation.URL]
  @objc(imageURLsFromPDF:compression:outputDirectory:) public func imageURLs(from pdfURL: Foundation.URL, compression: CoreFoundation.CGFloat, outputDirectory: Foundation.URL) -> [Foundation.URL]
  @objc(imageURLsFromPDF:scaling:compression:encrypter:outputDirectory:) public func imageURLs(from pdfURL: Foundation.URL, scaling: CoreFoundation.CGFloat, compression: CoreFoundation.CGFloat, encrypter: (any ScanbotBarcodeScannerSDK.SBSDKStorageCrypting)?, outputDirectory: Foundation.URL) -> [Foundation.URL]
  @discardableResult
  @objc(imageURLsFromPDF:scaling:compression:encrypter:outputDirectory:completion:) public func imageURLs(from pdfURL: Foundation.URL, scaling: CoreFoundation.CGFloat, compression: CoreFoundation.CGFloat, encrypter: (any ScanbotBarcodeScannerSDK.SBSDKStorageCrypting)?, outputDirectory: Foundation.URL, completion: @escaping ([Foundation.URL]) -> Swift.Void) -> ScanbotBarcodeScannerSDK.SBSDKProgress?
  @objc public func imageURLsAsync(from pdfURL: Foundation.URL, scaling: CoreFoundation.CGFloat, compression: CoreFoundation.CGFloat, encrypter: (any ScanbotBarcodeScannerSDK.SBSDKStorageCrypting)?, outputDirectory: Foundation.URL) async -> [Foundation.URL]
  @objc override dynamic public init()
  @objc deinit
}
@objc extension ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerConfiguration {
  @objc convenience dynamic public init?(json: Swift.String, partial: Swift.Bool = true)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SBSDKDeviceInformation : ObjectiveC.NSObject {
  @objc public static let deviceName: Swift.String
  @objc public static let fullDeviceName: Swift.String
  @objc public static let isSimulatorDevice: Swift.Bool
  @objc public static let maximumRecommendedImageSize: CoreFoundation.CGSize
  @objc public static func totalDiskSpaceInBytes() -> Swift.Int64
  @objc public static func freeDiskSpaceInBytes() -> Swift.Int64
  @objc public static func usedDiskSpaceInBytes() -> Swift.Int64
  @objc public static func totalDiskSpace() -> Swift.String
  @objc public static func freeDiskSpace() -> Swift.String
  @objc public static func usedDiskSpace() -> Swift.String
  @objc deinit
}
@objc(SBSDKUI2BarcodeItem) @objcMembers public class SBSDKUI2BarcodeItem : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let type: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat?
  @objc final public let count: Swift.Int
  @objc final public let text: Swift.String
  @objc final public let textWithExtension: Swift.String
  @objc final public let rawBytes: Foundation.Data
  @objc final public let parsedDocument: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItem?
  @objc public init(type: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat?, count: Swift.Int, text: Swift.String, textWithExtension: Swift.String, rawBytes: Foundation.Data, parsedDocument: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public enum SBSDKBarcodeScanAndCountCaptureMode : Swift.Int {
  case videoFrame = 0
  case capturedImage = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKTestData : ObjectiveC.NSObject {
  @ScanbotBarcodeScannerSDK.SBSDKThreadSafe @objc @_projectedValueProperty($cameraMockData) dynamic public var cameraMockData: ScanbotBarcodeScannerSDK.SBSDKSimulatedCameraMockData? {
    @objc get
    @objc set
  }
  public var $cameraMockData: ScanbotBarcodeScannerSDK.SBSDKThreadSafe<ScanbotBarcodeScannerSDK.SBSDKSimulatedCameraMockData?> {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class SBSDKBaseScannerFrame : ObjectiveC.NSObject {
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  @objc public var imageData: Foundation.Data? {
    @objc get
  }
  @objc public init(sampleBuffer: CoreMedia.CMSampleBuffer)
  @objc public init(sampleBuffer: CoreMedia.CMSampleBuffer, orientation: AVFoundation.AVCaptureVideoOrientation)
  @objc public init(image: UIKit.UIImage, ignoreOrientation: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentParser : ObjectiveC.NSObject {
  @objc public func parseDocument(inputString: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKGenericDocument?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKBaseScannerViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public var generalConfiguration: ScanbotBarcodeScannerSDK.SBSDKBaseScannerGeneralConfiguration {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var zoomConfiguration: ScanbotBarcodeScannerSDK.SBSDKBaseScannerZoomConfiguration {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var energyConfiguration: ScanbotBarcodeScannerSDK.SBSDKBaseScannerEnergyConfiguration {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var viewFinderConfiguration: ScanbotBarcodeScannerSDK.SBSDKBaseScannerViewFinderConfiguration {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var cameraDevice: ScanbotBarcodeScannerSDK.SBSDKCameraDevice {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isCameraUsageAuthorized: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isVisible: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isRecognitionEnabled: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var isSessionInterrupted: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isCapturingStillImage: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isFlashLightAvailable: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isFlashLightEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isEnergySavingActive: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var cameraZoomFactor: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var cameraZoomFactorAbsolute: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isFocusLockEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isCameraFrozen: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var timeIntervalSinceLastSuccessfulRecognition: Foundation.TimeInterval {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var flashLightDidChangeHandler: (() -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var applicationStateDidChangeHandler: ((ScanbotBarcodeScannerSDK.SBSDKApplicationState) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var zoomFactorDidChangeHandler: ((CoreFoundation.CGFloat) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var viewFinderRectDidChangeHandler: ((CoreFoundation.CGRect) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var viewFinderStyle: ScanbotBarcodeScannerSDK.SBSDKFinderView.Style {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var finderSafeArea: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var overlayView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @discardableResult
  @objc(beginFocusLockAtLensPosition:) @_Concurrency.MainActor @preconcurrency public func beginFocusLockAt(lensPosition: CoreFoundation.CGFloat) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public func endFocusLock()
  @objc(setCameraZoomFactor:) @_Concurrency.MainActor @preconcurrency public func setCameraZoom(factor: CoreFoundation.CGFloat)
  @objc(setCameraZoomFactor:animated:) @_Concurrency.MainActor @preconcurrency public func setCameraZoom(factor: CoreFoundation.CGFloat, animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func resetZoom()
  @objc @_Concurrency.MainActor @preconcurrency public func startEnergySaving()
  @objc @_Concurrency.MainActor @preconcurrency public func endEnergySaving()
  @objc @_Concurrency.MainActor @preconcurrency public func playBleepSound()
  @objc @_Concurrency.MainActor @preconcurrency public func currentViewFinderRect() -> CoreFoundation.CGRect
  @objc @_Concurrency.MainActor @preconcurrency public func currentSecondaryViewFinderRect() -> CoreFoundation.CGRect
  @objc(captureStillImageWithCompletionHandler:) @_Concurrency.MainActor @preconcurrency public func captureStillImageWithCompletionHandler(completion: ((UIKit.UIImage?, (any Swift.Error)?) -> ())?)
  @objc @_Concurrency.MainActor @preconcurrency public func freezeCamera()
  @objc @_Concurrency.MainActor @preconcurrency public func unfreezeCamera()
  @objc @discardableResult
  @_Concurrency.MainActor @preconcurrency public func attach(parentViewController: UIKit.UIViewController, parentView: UIKit.UIView) -> Swift.Bool
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
}
extension ScanbotBarcodeScannerSDK.SBSDKBaseScannerViewController : ScanbotBarcodeScannerSDK.SBSDKCameraSessionObserving {
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func cameraSession(_ session: ScanbotBarcodeScannerSDK.SBSDKCameraSession, didToggleTorchlight enabled: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func cameraSession(_ session: ScanbotBarcodeScannerSDK.SBSDKCameraSession, didChangeZoom zoomValue: CoreFoundation.CGFloat)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func cameraSession(_ session: ScanbotBarcodeScannerSDK.SBSDKCameraSession, didChangeDevice device: ScanbotBarcodeScannerSDK.SBSDKCameraDevice)
}
extension ScanbotBarcodeScannerSDK.SBSDKBaseScannerViewController : ScanbotBarcodeScannerSDK.SBSDKCameraSessionDelegate {
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func cameraSession(_ session: ScanbotBarcodeScannerSDK.SBSDKCameraSession, didOutput frame: ScanbotBarcodeScannerSDK.SBSDKBaseScannerFrame)
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodeScannerTextConfiguration : ScanbotBarcodeScannerSDK.SBSDKUIEnableCameraTextConfiguration {
  @objc public var finderTextHint: Swift.String
  @objc public var flashButtonTitle: Swift.String?
  @objc public var cancelButtonTitle: Swift.String?
  @objc public var confirmationDialogTitle: Swift.String?
  @objc public var confirmationDialogMessage: Swift.String?
  @objc public var confirmationDialogRetryButtonTitle: Swift.String
  @objc public var confirmationDialogConfirmButtonTitle: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SBSDKAESEncrypterMode : Swift.Int {
  case AES128
  case AES256
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2Palette) @objcMembers public class SBSDKUI2Palette : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var sbColorPrimary: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorPrimaryDisabled: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorNegative: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorPositive: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorWarning: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorSecondary: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorSecondaryDisabled: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorOnPrimary: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorOnSecondary: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorSurface: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorOutline: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorOnSurfaceVariant: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorOnSurface: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorSurfaceLow: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorSurfaceHigh: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var sbColorModalOverlay: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2Palette?
  @objc public init(sbColorPrimary: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#C8193C", isArgb: false), sbColorPrimaryDisabled: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#F5F5F5", isArgb: false), sbColorNegative: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FF3737", isArgb: false), sbColorPositive: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#4EFFB4", isArgb: false), sbColorWarning: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFCE5C", isArgb: false), sbColorSecondary: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFEDEE", isArgb: false), sbColorSecondaryDisabled: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#F5F5F5", isArgb: false), sbColorOnPrimary: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF", isArgb: false), sbColorOnSecondary: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#C8193C", isArgb: false), sbColorSurface: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF", isArgb: false), sbColorOutline: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#EFEFEF", isArgb: false), sbColorOnSurfaceVariant: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#707070", isArgb: false), sbColorOnSurface: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#000000", isArgb: false), sbColorSurfaceLow: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#00000026", isArgb: false), sbColorSurfaceHigh: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#0000007A", isArgb: false), sbColorModalOverlay: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#000000A3", isArgb: false))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2StyledText) @objcMembers public class SBSDKUI2StyledText : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var text: Swift.String
  @objc public var color: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var useShadow: Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2StyledText?
  @objc public init(visible: Swift.Bool = true, text: Swift.String = "", color: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF", isArgb: false), useShadow: Swift.Bool = false)
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2IconStyle) @objcMembers public class SBSDKUI2IconStyle : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var color: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle?
  @objc public init(visible: Swift.Bool = true, color: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF", isArgb: false))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2IconButton) @objcMembers public class SBSDKUI2IconButton : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var color: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var accessibilityDescription: Swift.String
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2IconButton?
  @objc public init(visible: Swift.Bool = true, color: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF", isArgb: false), accessibilityDescription: Swift.String = "")
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2PolygonStyle) @objcMembers public class SBSDKUI2PolygonStyle : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var strokeColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var fillColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var strokeWidth: Swift.Double
  @objc public var cornerRadius: Swift.Double
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle?
  @objc public init(strokeColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFFFF", isArgb: false), fillColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF30", isArgb: false), strokeWidth: Swift.Double = 2.0, cornerRadius: Swift.Double = 0.0)
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BackgroundStyle) @objcMembers public class SBSDKUI2BackgroundStyle : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var strokeColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var fillColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var strokeWidth: Swift.Double
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle?
  @objc public init(strokeColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFFFF", isArgb: false), fillColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF30", isArgb: false), strokeWidth: Swift.Double = 2.0)
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2ForegroundStyle) @objcMembers public class SBSDKUI2ForegroundStyle : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var iconVisible: Swift.Bool
  @objc public var color: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var useShadow: Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2ForegroundStyle?
  @objc public init(iconVisible: Swift.Bool = true, color: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF", isArgb: false), useShadow: Swift.Bool = false)
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2AspectRatio) @objcMembers public class SBSDKUI2AspectRatio : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var width: Swift.Double
  @objc public var height: Swift.Double
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2AspectRatio?
  @objc public init(width: Swift.Double = 1.0, height: Swift.Double = 1.0)
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BadgeStyle) @objcMembers public class SBSDKUI2BadgeStyle : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var background: ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle
  @objc public var foregroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BadgeStyle?
  @objc public init(visible: Swift.Bool = true, background: ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle = SBSDKUI2BackgroundStyle(), foregroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOnSurface", isArgb: false))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2RoundButton) @objcMembers public class SBSDKUI2RoundButton : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var accessibilityDescription: Swift.String
  @objc public var backgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var foregroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var activeBackgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var activeForegroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2RoundButton?
  @objc public init(visible: Swift.Bool = true, accessibilityDescription: Swift.String = "", backgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#0000007A", isArgb: false), foregroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF", isArgb: false), activeBackgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFCE5C", isArgb: false), activeForegroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#1C1B1F", isArgb: false))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BadgedButton) @objcMembers public class SBSDKUI2BadgedButton : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var badgeBackgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var badgeForegroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var visible: Swift.Bool
  @objc public var backgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var foregroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var activeBackgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var activeForegroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BadgedButton?
  @objc public init(badgeBackgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF", isArgb: false), badgeForegroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#C8193C", isArgb: false), visible: Swift.Bool = true, backgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#0000007A", isArgb: false), foregroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFF", isArgb: false), activeBackgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFCE5C", isArgb: false), activeForegroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#1C1B1F", isArgb: false))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2ButtonConfiguration) @objcMembers public class SBSDKUI2ButtonConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var text: Swift.String
  @objc public var accessibilityDescription: Swift.String
  @objc public var background: ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle
  @objc public var foreground: ScanbotBarcodeScannerSDK.SBSDKUI2ForegroundStyle
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration?
  @objc public init(visible: Swift.Bool = true, text: Swift.String = "", accessibilityDescription: Swift.String = "", background: ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle = SBSDKUI2BackgroundStyle(), foreground: ScanbotBarcodeScannerSDK.SBSDKUI2ForegroundStyle = SBSDKUI2ForegroundStyle())
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2PopupMenuItem) @objcMembers public class SBSDKUI2PopupMenuItem : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var accessibilityDescription: Swift.String
  @objc public var icon: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2PopupMenuItem?
  @objc public init(title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(), accessibilityDescription: Swift.String = "", icon: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle = SBSDKUI2IconStyle())
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BarButtonConfiguration) @objcMembers public class SBSDKUI2BarButtonConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var accessibilityDescription: Swift.String
  @objc public var background: ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle
  @objc public var icon: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarButtonConfiguration?
  @objc public init(visible: Swift.Bool = true, title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(), accessibilityDescription: Swift.String = "", background: ScanbotBarcodeScannerSDK.SBSDKUI2BackgroundStyle = SBSDKUI2BackgroundStyle(), icon: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle = SBSDKUI2IconStyle())
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc(SBSDKUI2OrientationLockMode) public enum SBSDKUI2OrientationLockMode : Swift.Int, Swift.Codable {
  case none
  case portrait
  case landscape
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBSDKUI2CameraPreviewMode) public enum SBSDKUI2CameraPreviewMode : Swift.Int, Swift.Codable {
  case fitIn
  case fillIn
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBSDKUI2SoundType) public enum SBSDKUI2SoundType : Swift.Int, Swift.Codable {
  case modernBeep
  case classicBeep
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2Sound) @objcMembers public class SBSDKUI2Sound : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var successBeepEnabled: Swift.Bool
  @objc public var soundType: ScanbotBarcodeScannerSDK.SBSDKUI2SoundType
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2Sound?
  @objc public init(successBeepEnabled: Swift.Bool = true, soundType: ScanbotBarcodeScannerSDK.SBSDKUI2SoundType = SBSDKUI2SoundType.modernBeep)
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2Vibration) @objcMembers public class SBSDKUI2Vibration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var enabled: Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2Vibration?
  @objc public init(enabled: Swift.Bool = false)
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2Timeouts) @objcMembers public class SBSDKUI2Timeouts : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var autoCancelTimeout: Swift.Int
  @objc public var initialScanDelay: Swift.Int
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2Timeouts?
  @objc public init(autoCancelTimeout: Swift.Int = 0, initialScanDelay: Swift.Int = 0)
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @objcMembers public class SBSDKIndexedImageStorage : ObjectiveC.NSObject, ScanbotBarcodeScannerSDK.SBSDKImageStoring {
  @objc public var imageURLs: [Foundation.URL] {
    @objc get
  }
  @objc public var jpegCompressionQuality: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var imageCount: Swift.Int {
    @objc get
  }
  @objc final public let fileFormat: ScanbotBarcodeScannerSDK.SBSDKImageFileFormat
  @objc public var encrypter: (any ScanbotBarcodeScannerSDK.SBSDKStorageCrypting)?
  @objc public static var temporary: ScanbotBarcodeScannerSDK.SBSDKIndexedImageStorage? {
    @objc get
  }
  @objc convenience public init?(storageLocation: ScanbotBarcodeScannerSDK.SBSDKStorageLocation? = SBSDKStorageLocation())
  @objc public init?(storageLocation: ScanbotBarcodeScannerSDK.SBSDKStorageLocation?, fileFormat: ScanbotBarcodeScannerSDK.SBSDKImageFileFormat, encrypter: (any ScanbotBarcodeScannerSDK.SBSDKStorageCrypting)?)
  @objc convenience public init?(storageLocation: ScanbotBarcodeScannerSDK.SBSDKStorageLocation?, fileFormat: ScanbotBarcodeScannerSDK.SBSDKImageFileFormat, encrypter: (any ScanbotBarcodeScannerSDK.SBSDKStorageCrypting)?, encryptedImagesURLs: [Foundation.URL])
  @objc deinit
  @discardableResult
  @objc(addImage:) public func add(_ image: UIKit.UIImage) -> Swift.Bool
  @discardableResult
  @objc public func addImage(from url: Foundation.URL) -> Swift.Bool
  @discardableResult
  @objc(insertImage:atIndex:) public func insert(_ image: UIKit.UIImage, at index: Swift.Int) -> Swift.Bool
  @discardableResult
  @objc(moveImageFromIndex:toIndex:) public func moveImage(from sourceIndex: Swift.Int, to destinationIndex: Swift.Int) -> Swift.Bool
  @objc(replaceImageAtIndex:withImage:) public func replaceImage(at index: Swift.Int, with image: UIKit.UIImage) -> Swift.Bool
  @objc(replaceImageAtIndex:withImageAtURL:) public func replaceImage(at index: Swift.Int, withImageAtURL url: Foundation.URL) -> Swift.Bool
  @objc public func image(at index: Swift.Int) -> UIKit.UIImage?
  @objc public func waitUntilWritingCompleted()
  @objc public func imageURL(at index: Swift.Int) -> Foundation.URL?
  @objc public func removeImage(at index: Swift.Int)
  @objc public func removeAll()
  @_documentation(visibility: internal) @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc public protocol SBSDKBarcodeTrackingOverlayControllerDelegate {
  @objc optional func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, didTapOnBarcode barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult)
  @objc optional func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, didChangeSelectedBarcodes selectedBarcodes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult])
  @objc optional func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, polygonStyleFor barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackedViewPolygonStyle?
  @objc optional func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, textStyleFor barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackedViewTextStyle?
  @objc optional func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, customViewFor barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> UIKit.UIView
  @objc optional func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, didCreateCustomView view: UIKit.UIView)
  @objc optional func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, updateCustomView view: UIKit.UIView, for barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult, barcodeFrame: CoreFoundation.CGRect, selected: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeTrackingOverlayController : ObjectiveC.NSObject {
  @objc public var configuration: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayConfiguration {
    @objc get
    @objc set
  }
  @objc weak public var delegate: (any ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayControllerDelegate)? {
    @objc get
    @objc set
  }
  @objc public var isHidden: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public func reset()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKUICameraViewController : ScanbotBarcodeScannerSDK.SBSDKUIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public var isCameraAccessGranted: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var containerForEnableCameraView: UIKit.UIView! {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var enableCameraTextConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIEnableCameraTextConfiguration {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var enableCameraUIConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIEnableCameraUIConfiguration {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public func cameraAccessDidChange(_ granted: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func willShowEnableCameraView()
  @objc @_Concurrency.MainActor @preconcurrency public func didHideEnableCameraView()
  @objc @_Concurrency.MainActor @preconcurrency public func applicationDidBecomeActive()
  @objc @_Concurrency.MainActor @preconcurrency public func updateFlashButton()
  @objc @_Concurrency.MainActor @preconcurrency public func updateLayout()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol SBSDKFinderViewDelegate {
  @objc optional func finderView(_ view: ScanbotBarcodeScannerSDK.SBSDKFinderView, didChangeRect rect: CoreFoundation.CGRect)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKFinderView : UIKit.UIView {
  @objc(SBSDKFinderViewStyle) public enum Style : Swift.Int, Swift.CaseIterable {
    case stroke
    case corners
    case cornersAndCross
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [ScanbotBarcodeScannerSDK.SBSDKFinderView.Style]
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [ScanbotBarcodeScannerSDK.SBSDKFinderView.Style] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor @preconcurrency public var style: ScanbotBarcodeScannerSDK.SBSDKFinderView.Style {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency weak public var finderDelegate: (any ScanbotBarcodeScannerSDK.SBSDKFinderViewDelegate)?
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc @_Concurrency.MainActor @preconcurrency public var finderSafeArea: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var displayedAspectRatio: Swift.Double {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var secondaryAspectRatio: Swift.Double {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var minimumInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var secondaryMinimumInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var preferredHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var offset: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var lineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var lineCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var lineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var ignoresSafeAreaInsets: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isAnimatingChanges: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var finderRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var secondaryFinderRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public func bezierPathConvertedToView(_ view: UIKit.UIView?) -> UIKit.UIBezierPath?
  @objc @_Concurrency.MainActor @preconcurrency public static func potentialViewFinderRectWithBounds(_ bounds: CoreFoundation.CGRect, finderSafeArea: CoreFoundation.CGRect, aspectRatio: Swift.Double, minimumInsets: UIKit.UIEdgeInsets, offset: CoreFoundation.CGPoint) -> CoreFoundation.CGRect
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func safeAreaInsetsDidChange()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ScanbotUI : ObjectiveC.NSObject {
  @objc public static var defaultImageStoreEncrypter: (any ScanbotBarcodeScannerSDK.SBSDKStorageCrypting)?
  @objc public static var defaultPDFEncrypter: (any ScanbotBarcodeScannerSDK.SBSDKStorageCrypting)?
  @objc public static var shouldShowStatusBarOnScanningScreens: Swift.Bool
  @objc public static var defaultStatusBarStyle: UIKit.UIStatusBarStyle
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BarcodeScannerConfiguration) @objcMembers public class SBSDKUI2BarcodeScannerConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc final public let version: Swift.String
  @objc final public let screen: Swift.String
  @objc public var palette: ScanbotBarcodeScannerSDK.SBSDKUI2Palette
  @objc public var localization: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeTextLocalization
  @objc public var backgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var topBar: ScanbotBarcodeScannerSDK.SBSDKUI2TopBarConfiguration
  @objc public var actionBar: ScanbotBarcodeScannerSDK.SBSDKUI2ActionBarConfiguration
  @objc public var viewFinder: ScanbotBarcodeScannerSDK.SBSDKUI2ViewFinderConfiguration
  @objc public var userGuidance: ScanbotBarcodeScannerSDK.SBSDKUI2UserGuidanceConfiguration
  @objc public var cameraPermission: ScanbotBarcodeScannerSDK.SBSDKUI2CameraPermissionScreen
  @objc public var cameraConfiguration: ScanbotBarcodeScannerSDK.SBSDKUI2CameraConfiguration
  @objc public var recognizerConfiguration: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeRecognizerConfiguration
  @objc public var useCase: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeUseCase
  @objc public var sound: ScanbotBarcodeScannerSDK.SBSDKUI2Sound
  @objc public var vibration: ScanbotBarcodeScannerSDK.SBSDKUI2Vibration
  @objc public var timeouts: ScanbotBarcodeScannerSDK.SBSDKUI2Timeouts
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerConfiguration?
  @objc public init(version: Swift.String = "1.0", screen: Swift.String = "BarcodeScanner", palette: ScanbotBarcodeScannerSDK.SBSDKUI2Palette = SBSDKUI2Palette(sbColorPrimary: SBSDKUI2Color(colorString: "#C8193C", isArgb: false),
                                    sbColorPrimaryDisabled: SBSDKUI2Color(colorString: "#F5F5F5",
                                                                          isArgb: false),
                                    sbColorNegative: SBSDKUI2Color(colorString: "#FF3737",
                                                                   isArgb: false),
                                    sbColorPositive: SBSDKUI2Color(colorString: "#4EFFB4",
                                                                   isArgb: false),
                                    sbColorWarning: SBSDKUI2Color(colorString: "#FFCE5C",
                                                                  isArgb: false),
                                    sbColorSecondary: SBSDKUI2Color(colorString: "#FFEDEE",
                                                                    isArgb: false),
                                    sbColorSecondaryDisabled: SBSDKUI2Color(colorString: "#F5F5F5",
                                                                            isArgb: false),
                                    sbColorOnPrimary: SBSDKUI2Color(colorString: "#FFFFFF",
                                                                    isArgb: false),
                                    sbColorOnSecondary: SBSDKUI2Color(colorString: "#C8193C",
                                                                      isArgb: false),
                                    sbColorSurface: SBSDKUI2Color(colorString: "#FFFFFF",
                                                                  isArgb: false),
                                    sbColorOutline: SBSDKUI2Color(colorString: "#EFEFEF",
                                                                  isArgb: false),
                                    sbColorOnSurfaceVariant: SBSDKUI2Color(colorString: "#707070",
                                                                           isArgb: false),
                                    sbColorOnSurface: SBSDKUI2Color(colorString: "#000000",
                                                                    isArgb: false),
                                    sbColorSurfaceLow: SBSDKUI2Color(colorString: "#00000026",
                                                                     isArgb: false),
                                    sbColorSurfaceHigh: SBSDKUI2Color(colorString: "#0000007A",
                                                                      isArgb: false),
                                    sbColorModalOverlay: SBSDKUI2Color(colorString: "#000000A3",
                                                                       isArgb: false)), localization: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeTextLocalization = SBSDKUI2BarcodeTextLocalization(), backgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorSurfaceLow", isArgb: false), topBar: ScanbotBarcodeScannerSDK.SBSDKUI2TopBarConfiguration = SBSDKUI2TopBarConfiguration(title: SBSDKUI2StyledText(text: "?topBarTitle",
                                                                          color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                               isArgb: false)),
                                                mode: SBSDKUI2TopBarMode.solid,
                                                statusBarMode: SBSDKUI2StatusBarMode
                                                    .light,
                                                backgroundColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                               isArgb: false),
                                                cancelButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                          text: "?topBarCancelButton",
                                                                                          background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                         isArgb: false),
                                                                                                                              fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                       isArgb: false),
                                                                                                                              strokeWidth: 0.0),
                                                                                          foreground: SBSDKUI2ForegroundStyle(iconVisible: true,
                                                                                                                              color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                   isArgb: false),
                                                                                                                              useShadow: false))), actionBar: ScanbotBarcodeScannerSDK.SBSDKUI2ActionBarConfiguration = SBSDKUI2ActionBarConfiguration(flashButton: SBSDKUI2RoundButton(visible: true,
                                                                                    backgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                                   isArgb: false),
                                                                                    foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                   isArgb: false),
                                                                                    activeBackgroundColor: SBSDKUI2Color(colorString: "?sbColorWarning",
                                                                                                                         isArgb: false),
                                                                                    activeForegroundColor: SBSDKUI2Color(colorString: "#1C1B1F",
                                                                                                                         isArgb: false)),
                                                   zoomButton: SBSDKUI2RoundButton(visible: true,
                                                                                   backgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                                  isArgb: false),
                                                                                   foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                  isArgb: false),
                                                                                   activeBackgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                                        isArgb: false),
                                                                                   activeForegroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                        isArgb: false)),
                                                   flipCameraButton: SBSDKUI2RoundButton(visible: true,
                                                                                         backgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                                        isArgb: false),
                                                                                         foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                        isArgb: false),
                                                                                         activeBackgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                                              isArgb: false),
                                                                                         activeForegroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                              isArgb: false))), viewFinder: ScanbotBarcodeScannerSDK.SBSDKUI2ViewFinderConfiguration = SBSDKUI2ViewFinderConfiguration(visible: true,
                                                                                              style: SBSDKUI2FinderCorneredStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                                                            isArgb: false),
                                                                                                                                 strokeWidth: 2.0,
                                                                                                                                 cornerRadius: 10.0),
                                                                                              overlayColor: SBSDKUI2Color(colorString: "?sbColorSurfaceLow",
                                                                                                                          isArgb: false),
                                                                                              aspectRatio: SBSDKUI2AspectRatio(width: 1.0,
                                                                                                                               height: 1.0)), userGuidance: ScanbotBarcodeScannerSDK.SBSDKUI2UserGuidanceConfiguration = SBSDKUI2UserGuidanceConfiguration(visible: true,
                                                                                                    title: SBSDKUI2StyledText(text: "?userGuidance",
                                                                                                                              color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                   isArgb: false)),
                                                                                                    background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                   isArgb: false),
                                                                                                                                        fillColor: SBSDKUI2Color(colorString: "?sbColorSurfaceLow",
                                                                                                                                                                 isArgb: false),
                                                                                                                                        strokeWidth: 0.0)), cameraPermission: ScanbotBarcodeScannerSDK.SBSDKUI2CameraPermissionScreen = SBSDKUI2CameraPermissionScreen(statusBarMode: SBSDKUI2StatusBarMode.dark,
                                                   background: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                             isArgb: false),
                                                   iconBackground: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                                 isArgb: false),
                                                   icon: SBSDKUI2IconStyle(visible: true,
                                                                           color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                isArgb: false)),
                                                   enableCameraButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                                   text: "?cameraPermissionEnableCameraButton",
                                                                                                   background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                                  isArgb: false),
                                                                                                                                       fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                                isArgb: false),
                                                                                                                                       strokeWidth: 0.0),
                                                                                                   foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                                       color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                            isArgb: false),
                                                                                                                                       useShadow: false)),
                                                   closeButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                            text: "?cameraPermissionCloseButton",
                                                                                            background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                           isArgb: false),
                                                                                                                                fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                         isArgb: false),
                                                                                                                                strokeWidth: 0.0),
                                                                                            foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                                color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                     isArgb: false),
                                                                                                                                useShadow: false)),
                                                   enableCameraTitle: SBSDKUI2StyledText(text: "?cameraPermissionEnableCameraTitle",
                                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                              isArgb: false)),
                                                   enableCameraExplanation: SBSDKUI2StyledText(text: "?cameraPermissionEnableCameraExplanation",
                                                                                               color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                                    isArgb: false))), cameraConfiguration: ScanbotBarcodeScannerSDK.SBSDKUI2CameraConfiguration = SBSDKUI2CameraConfiguration(), recognizerConfiguration: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeRecognizerConfiguration = SBSDKUI2BarcodeRecognizerConfiguration(), useCase: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeUseCase = SBSDKUI2SingleScanningMode(), sound: ScanbotBarcodeScannerSDK.SBSDKUI2Sound = SBSDKUI2Sound(successBeepEnabled: true, soundType: SBSDKUI2SoundType.modernBeep), vibration: ScanbotBarcodeScannerSDK.SBSDKUI2Vibration = SBSDKUI2Vibration(enabled: true), timeouts: ScanbotBarcodeScannerSDK.SBSDKUI2Timeouts = SBSDKUI2Timeouts(autoCancelTimeout: 0, initialScanDelay: 0))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodeScannerUIConfiguration : ObjectiveC.NSObject {
  @objc public var topBarButtonsColor: UIKit.UIColor
  @objc public var topBarBackgroundColor: UIKit.UIColor
  @objc public var flashButtonInactiveColor: UIKit.UIColor
  @objc public var cameraOverlayColor: UIKit.UIColor
  @objc public var finderLineColor: UIKit.UIColor
  @objc public var finderLineWidth: CoreFoundation.CGFloat
  @objc public var finderAspectRatio: ScanbotBarcodeScannerSDK.SBSDKAspectRatio
  @objc public var finderTextHintColor: UIKit.UIColor
  @objc public var isFlashButtonHidden: Swift.Bool
  @objc public var isCancelButtonHidden: Swift.Bool
  @objc public var orientationLockMode: ScanbotBarcodeScannerSDK.SBSDKOrientationLock
  @objc public var confirmationDialogStyle: ScanbotBarcodeScannerSDK.SBSDKUIDialogStyle
  @objc public var confirmationDialogConfirmButtonStyle: ScanbotBarcodeScannerSDK.SBSDKUIDialogButtonStyle
  @objc public var confirmationDialogRetryButtonStyle: ScanbotBarcodeScannerSDK.SBSDKUIDialogButtonStyle
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class SBSDKSimulatedCameraMockData : ObjectiveC.NSObject {
  @_documentation(visibility: internal) public static func == (lhs: ScanbotBarcodeScannerSDK.SBSDKSimulatedCameraMockData, rhs: ScanbotBarcodeScannerSDK.SBSDKSimulatedCameraMockData) -> Swift.Bool
  @objc final public let label: Swift.String
  @objc final public let refreshOnEachFrame: Swift.Bool
  @objc(initWithLabel:imageURL:capturedImageURL:refreshOnEachFrame:) public init(label: Swift.String, imageURL: Foundation.URL, capturedImageURL: Foundation.URL? = nil, refreshOnEachFrame: Swift.Bool)
  @objc(initWithLabel:imageName:capturedImageName:refreshOnEachFrame:) public init(label: Swift.String, imageName: Swift.String, capturedImageName: Swift.String? = nil, refreshOnEachFrame: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKGenericDocument : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentType
  @objc public var fields: [ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField]
  @objc public var children: [ScanbotBarcodeScannerSDK.SBSDKGenericDocument]
  @objc public var confidence: Swift.Float
  @objc public var crop: UIKit.UIImage?
  @objc public var confidenceWeight: Swift.Float
  @objc @_documentation(visibility: internal) public init(type: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentType, fields: [ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField], children: [ScanbotBarcodeScannerSDK.SBSDKGenericDocument], confidence: Swift.Float, confidenceWeight: Swift.Float)
  @_documentation(visibility: internal) required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) @objc override dynamic public init()
  @objc(fieldByTypeName:) public func field(by typeName: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField?
  @objc(fieldsByTypeName:) public func fields(by typeName: Swift.String) -> [ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField]
  @objc(childByDocumentType:) public func child(by typeName: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKGenericDocument?
  @objc public func children(by typeName: Swift.String) -> [ScanbotBarcodeScannerSDK.SBSDKGenericDocument]
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocument {
  @objc dynamic public func wrap() -> ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper?
}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocument {
  @objc dynamic public func flatDocument(includeEmptyChildren: Swift.Bool, includeEmptyFields: Swift.Bool) -> [ScanbotBarcodeScannerSDK.SBSDKGenericDocument]?
  @objc dynamic public func allFields(includeEmptyFields: Swift.Bool) -> [ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField]?
}
@objc public enum SBSDKGenericDocumentCommonFieldType : Swift.Int, Swift.Codable {
  case id
  case surname
  case maidenName
  case givenNames
  case birthDate
  case nationality
  case birthplace
  case expiryDate
  case eyeColor
  case height
  case issueDate
  case issuingAuthority
  case address
  case pseudonym
  case mrz
  case countryCode
  case gender
  case signature
  case photo
  case validFromDate
  case routingNumber
  case accountNumber
  case placeOfIssue
  case titleType
  case remarks
  case name
  case cardAccessNumber
  case none = -1
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKUIConfiguration : ObjectiveC.NSObject {
  @objc public class var defaultConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIConfiguration {
    @objc get
  }
  @objc public var cameraConfiguration: ScanbotBarcodeScannerSDK.SBSDKUICameraConfiguration {
    get
  }
  @objc public init(cameraConfiguration: ScanbotBarcodeScannerSDK.SBSDKUICameraConfiguration)
  @_documentation(visibility: internal) @objc convenience override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBaseScannerZoomConfiguration : ObjectiveC.NSObject {
  @objc public var isZoomingEnabled: Swift.Bool
  @objc public var zoomRange: ScanbotBarcodeScannerSDK.SBSDKZoomRange {
    @objc get
    @objc set
  }
  @objc public var initialZoomFactor: CoreFoundation.CGFloat
  @objc public var isDoubleTapToZoomEnabled: Swift.Bool
  @objc public var isPinchToZoomEnabled: Swift.Bool
  @objc public var shouldAnimateZooming: Swift.Bool
  @objc public static var defaultConfiguration: ScanbotBarcodeScannerSDK.SBSDKBaseScannerZoomConfiguration {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKPolygon : ObjectiveC.NSObject, Foundation.NSCopying, Swift.Codable {
  @objc(initWithNormalizedPointA:pointB:pointC:pointD:) public init(normalizedPointA a: CoreFoundation.CGPoint, pointB b: CoreFoundation.CGPoint, pointC c: CoreFoundation.CGPoint, pointD d: CoreFoundation.CGPoint)
  @objc(initWithNormalizedRect:) convenience public init(normalizedRect rect: CoreFoundation.CGRect)
  @objc(initWithAbsolutePointA:pointB:pointC:pointD:forSize:) public init(absolutePointA a: CoreFoundation.CGPoint, pointB b: CoreFoundation.CGPoint, pointC c: CoreFoundation.CGPoint, pointD d: CoreFoundation.CGPoint, for size: CoreFoundation.CGSize)
  @objc(initWithNormalizedDoubleValues:) convenience public init(normalizedDoubleValues values: [Foundation.NSNumber])
  @objc(initWithMetadataObject:) convenience public init(metadataObject codeObject: AVFoundation.AVMetadataMachineReadableCodeObject)
  @_documentation(visibility: internal) @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @_documentation(visibility: internal) @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @_documentation(visibility: internal) @objc override dynamic public init()
  @objc(isEqualToPolygon:) public func isEqual(to polygon: ScanbotBarcodeScannerSDK.SBSDKPolygon) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc(isSimilarToPolygon:) public func isSimilar(to polygon: ScanbotBarcodeScannerSDK.SBSDKPolygon?) -> Swift.Bool
  @objc public func standardDeviation(to polygon: ScanbotBarcodeScannerSDK.SBSDKPolygon?) -> Swift.Double
  @objc public func normalize()
  @objc public func sortClockwise()
  @objc(normalizedPointFromAbsolutePoint:withSize:) public static func normalizedPoint(fromAbsolutePoint point: CoreFoundation.CGPoint, with size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint
  @objc(absolutePointFromNormalizedPoint:withSize:) public static func absolutePoint(fromNormalizedPoint point: CoreFoundation.CGPoint, with size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint
  @objc(normalizedPointWithIndex:) public func normalizedPoint(with index: Swift.UInt) -> CoreFoundation.CGPoint
  @objc(absolutePointWithIndex:forSize:) public func absolutePoint(with index: Swift.UInt, for size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint
  @objc(normalizedEdgeWithIndex:) public func normalizedEdge(with index: Swift.UInt) -> ScanbotBarcodeScannerSDK.SBSDKPolygonEdge
  @objc(absoluteEdgeWithIndex:forSize:) public func absoluteEdge(with index: Swift.UInt, for size: CoreFoundation.CGSize) -> ScanbotBarcodeScannerSDK.SBSDKPolygonEdge
  @objc public func normalizedDoubleValues() -> [Foundation.NSNumber]
  @objc(setNormalizedPoint:forIndex:) public func setNormalizedPoint(_ point: CoreFoundation.CGPoint, for index: Swift.UInt)
  @objc public func setAbsolutePoint(point: CoreFoundation.CGPoint, with size: CoreFoundation.CGSize, for index: Swift.UInt)
  @objc(rotate90CWWithOldSize:newSize:) public func rotate90CW(oldSize: CoreFoundation.CGSize, newSize: CoreFoundation.CGSize)
  @objc(rotate90CCWWithOldSize:newSize:) public func rotate90CCW(oldSize: CoreFoundation.CGSize, newSize: CoreFoundation.CGSize)
  @objc(rotate180WithOldSize:newSize:) public func rotate180(oldSize: CoreFoundation.CGSize, newSize: CoreFoundation.CGSize)
  @objc(rotateCCW:withSize:) public func rotateCCW(_ times: Swift.UInt, with size: CoreFoundation.CGSize)
  @objc(rotateCW:withSize:) public func rotateCW(_ times: Swift.UInt, with size: CoreFoundation.CGSize)
  @objc public func flipHorizontally(_ size: CoreFoundation.CGSize)
  @objc(boundingBoxWithSize:) public func boundingBox(with size: CoreFoundation.CGSize) -> CoreFoundation.CGRect
  @objc public func center() -> CoreFoundation.CGPoint
  @objc(sizeWhenApplyingToImageOfSize:imageScale:focalLength:sensorWidth:) public func sizeWhenApplying(to imageOfSize: CoreFoundation.CGSize, imageScale: Swift.Double, focalLength: Swift.Double, sensorWidth: Swift.Double) -> CoreFoundation.CGSize
  @objc(bezierPathForSize:) public func bezierPath(for size: CoreFoundation.CGSize) -> UIKit.UIBezierPath
  @objc(bezierPathForSize:cornerRadius:withTransform:) public func bezierPath(for size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat, with transform: CoreFoundation.CGAffineTransform) -> UIKit.UIBezierPath
  @objc(bezierPathForPreviewLayer:) public func bezierPath(for previewLayer: AVFoundation.AVCaptureVideoPreviewLayer) -> UIKit.UIBezierPath
  @objc(bezierPathWithCornerRadius:forPreviewLayer:orientation:isFrontCamera:) public func bezierPath(with cornerRadius: CoreFoundation.CGFloat, for previewLayer: AVFoundation.AVCaptureVideoPreviewLayer, orientation: UIKit.UIDeviceOrientation, isFrontCamera: Swift.Bool) -> UIKit.UIBezierPath
  @objc @_documentation(visibility: internal) public func absolutePoints(with size: CoreFoundation.CGSize) -> [Foundation.NSValue]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc(SBSDKUI2MultipleBarcodesScanningMode) public enum SBSDKUI2MultipleBarcodesScanningMode : Swift.Int, Swift.Codable {
  case counting
  case unique
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBSDKUI2SheetMode) public enum SBSDKUI2SheetMode : Swift.Int, Swift.Codable {
  case button
  case collapsedSheet
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBSDKUI2CollapsedVisibleHeight) public enum SBSDKUI2CollapsedVisibleHeight : Swift.Int, Swift.Codable {
  case small
  case large
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2Sheet) @objcMembers public class SBSDKUI2Sheet : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var mode: ScanbotBarcodeScannerSDK.SBSDKUI2SheetMode
  @objc public var collapsedVisibleHeight: ScanbotBarcodeScannerSDK.SBSDKUI2CollapsedVisibleHeight
  @objc public var listButton: ScanbotBarcodeScannerSDK.SBSDKUI2BadgedButton
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2Sheet?
  @objc public init(mode: ScanbotBarcodeScannerSDK.SBSDKUI2SheetMode = SBSDKUI2SheetMode.collapsedSheet, collapsedVisibleHeight: ScanbotBarcodeScannerSDK.SBSDKUI2CollapsedVisibleHeight = SBSDKUI2CollapsedVisibleHeight.small, listButton: ScanbotBarcodeScannerSDK.SBSDKUI2BadgedButton = SBSDKUI2BadgedButton())
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2SwipeToDelete) @objcMembers public class SBSDKUI2SwipeToDelete : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var enabled: Swift.Bool
  @objc public var backgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var iconColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2SwipeToDelete?
  @objc public init(enabled: Swift.Bool = true, backgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorNegative", isArgb: false), iconColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOnPrimary", isArgb: false))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2ManualCountEditDialog) @objcMembers public class SBSDKUI2ManualCountEditDialog : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var sheetColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var dividerColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var modalOverlayColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var info: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var updateButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var cancelButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var clearTextButton: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2ManualCountEditDialog?
  @objc public init(sheetColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false), dividerColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOutline", isArgb: false), modalOverlayColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorModalOverlay", isArgb: false), title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "Update count",
                                                               color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                    isArgb: false)), info: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "Adjust the number of items you scanned.",
                                                              color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                   isArgb: false)), updateButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(visible: true,
                                                                                        text: "Update",
                                                                                        background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                       isArgb: false),
                                                                                                                            fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                     isArgb: false),
                                                                                                                            strokeWidth: 1.0),
                                                                                        foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                 isArgb: false),
                                                                                                                            useShadow: false)), cancelButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(visible: true,
                                                                                        text: "Cancel",
                                                                                        background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                       isArgb: false),
                                                                                                                            fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                     isArgb: false),
                                                                                                                            strokeWidth: 1.0),
                                                                                        foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                            color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                 isArgb: false),
                                                                                                                            useShadow: false)), clearTextButton: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle = SBSDKUI2IconStyle(visible: true,
                                                                       color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                            isArgb: false)))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2SheetContent) @objcMembers public class SBSDKUI2SheetContent : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var sheetColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var dividerColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var manualCountChangeEnabled: Swift.Bool
  @objc public var manualCountOutlineColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var manualCountChangeColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var clearAllButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var barcodeItemTitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var barcodeItemSubtitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var barcodeItemImageVisible: Swift.Bool
  @objc public var submitButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var startScanningButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var placeholderTitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var placeholderSubtitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var placeholderIconBackground: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var placeholderIcon: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle
  @objc public var swipeToDelete: ScanbotBarcodeScannerSDK.SBSDKUI2SwipeToDelete
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2SheetContent?
  @objc public init(sheetColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false), dividerColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOutline", isArgb: false), manualCountChangeEnabled: Swift.Bool = true, manualCountOutlineColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOutline", isArgb: false), manualCountChangeColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorPrimary", isArgb: false), title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "%d items",
                                                               color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                    isArgb: false)), clearAllButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(visible: true,
                                                                                          text: "Clear all",
                                                                                          background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                         isArgb: false),
                                                                                                                              fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                       isArgb: false),
                                                                                                                              strokeWidth: 1.0),
                                                                                          foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                              color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                   isArgb: false),
                                                                                                                              useShadow: false)), barcodeItemTitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(visible: true, text: "BARCODE_TITLE",
                                                                          color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                               isArgb: false),
                                                                          useShadow: false), barcodeItemSubtitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "BARCODE_SUBTITLE",
                                                                             color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                  isArgb: false)), barcodeItemImageVisible: Swift.Bool = true, submitButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(visible: true,
                                                                                        text: "Submit",
                                                                                        background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                       isArgb: false),
                                                                                                                            fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                     isArgb: false),
                                                                                                                            strokeWidth: 1.0),
                                                                                        foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                 isArgb: false),
                                                                                                                            useShadow: false)), startScanningButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(visible: true,
                                                                                               text: "Start scanning",
                                                                                               background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                              isArgb: false),
                                                                                                                                   fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                            isArgb: false),
                                                                                                                                   strokeWidth: 1.0),
                                                                                               foreground: SBSDKUI2ForegroundStyle(iconVisible: true,
                                                                                                                                   color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                        isArgb: false),
                                                                                                                                   useShadow: false)), placeholderTitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "No barcodes here!",
                                                                          color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                               isArgb: false)), placeholderSubtitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "The barcode list is currently empty. Close this sheet and scan your items to add them.",
                                       color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                            isArgb: false)), placeholderIconBackground: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOutline", isArgb: false), placeholderIcon: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle = SBSDKUI2IconStyle(visible: true,
                                                                       color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                            isArgb: false)), swipeToDelete: ScanbotBarcodeScannerSDK.SBSDKUI2SwipeToDelete = SBSDKUI2SwipeToDelete(enabled: true,
                                                                             backgroundColor: SBSDKUI2Color(colorString: "?sbColorNegative",
                                                                                                            isArgb: false),
                                                                             iconColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                      isArgb: false)))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2MultipleScanningMode) @objcMembers public class SBSDKUI2MultipleScanningMode : ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeUseCase {
  @objc public var countingRepeatDelay: Swift.Int
  @objc public var mode: ScanbotBarcodeScannerSDK.SBSDKUI2MultipleBarcodesScanningMode
  @objc public var sheet: ScanbotBarcodeScannerSDK.SBSDKUI2Sheet
  @objc public var sheetContent: ScanbotBarcodeScannerSDK.SBSDKUI2SheetContent
  @objc public var manualCountEditDialog: ScanbotBarcodeScannerSDK.SBSDKUI2ManualCountEditDialog
  @objc public var barcodeInfoMapping: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeInfoMapping
  @objc public var arOverlay: ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayGeneralConfiguration
  @objc override public var _type: Swift.String {
    @objc get
  }
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc override public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2MultipleScanningMode?
  @objc public init(countingRepeatDelay: Swift.Int = 1000, mode: ScanbotBarcodeScannerSDK.SBSDKUI2MultipleBarcodesScanningMode = SBSDKUI2MultipleBarcodesScanningMode.counting, sheet: ScanbotBarcodeScannerSDK.SBSDKUI2Sheet = SBSDKUI2Sheet(mode: SBSDKUI2SheetMode.collapsedSheet,
                                                     collapsedVisibleHeight: SBSDKUI2CollapsedVisibleHeight.small,
                                                     listButton: SBSDKUI2BadgedButton(badgeBackgroundColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                          isArgb: false),
                                                                                      badgeForegroundColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                          isArgb: false),
                                                                                      visible: true,
                                                                                      backgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                                     isArgb: false),
                                                                                      foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                     isArgb: false),
                                                                                      activeBackgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                                           isArgb: false),
                                                                                      activeForegroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                           isArgb: false))), sheetContent: ScanbotBarcodeScannerSDK.SBSDKUI2SheetContent = SBSDKUI2SheetContent(sheetColor: SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false),
                                         dividerColor: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                     isArgb: false),
                                         manualCountChangeEnabled: true,
                                         manualCountOutlineColor: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                                isArgb: false),
                                         manualCountChangeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                               isArgb: false),
                                         title: SBSDKUI2StyledText(text: "?multipleModeSheetTitle",
                                                                   color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                        isArgb: false)),
                                         clearAllButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                     text: "?sheetClearAllButton",
                                                                                     background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                    isArgb: false),
                                                                                                                         fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                  isArgb: false),
                                                                                                                         strokeWidth: 1.0),
                                                                                     foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                              isArgb: false),
                                                                                                                         useShadow: false)),
                                         barcodeItemTitle: SBSDKUI2StyledText(visible: true,
                                                                              text: "BARCODE_TITLE",
                                                                              color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                   isArgb: false),
                                                                              useShadow: false),
                                         barcodeItemSubtitle: SBSDKUI2StyledText(visible: true,
                                                                                 text: "BARCODE_SUBTITLE",
                                                                                 color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                      isArgb: false),
                                                                                 useShadow: false),
                                         barcodeItemImageVisible: true,
                                         submitButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                   text: "?sheetSubmitButton",
                                                                                   background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                  isArgb: false),
                                                                                                                       fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                isArgb: false),
                                                                                                                       strokeWidth: 1.0),
                                                                                   foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                       color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                            isArgb: false),
                                                                                                                       useShadow: false)),
                                         startScanningButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                          text: "?sheetStartScanningButton",
                                                                                          background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                         isArgb: false),
                                                                                                                              fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                       isArgb: false),
                                                                                                                              strokeWidth: 1.0),
                                                                                          foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                              color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                   isArgb: false),
                                                                                                                              useShadow: false)),
                                         placeholderTitle: SBSDKUI2StyledText(visible: true,
                                                                              text: "?sheetPlaceholderTitle",
                                                                              color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                   isArgb: false),
                                                                              useShadow: false),
                                         placeholderSubtitle: SBSDKUI2StyledText(visible: true,
                                                                                 text: "?sheetPlaceholderSubtitle",
                                                                                 color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                      isArgb: false),
                                                                                 useShadow: false),
                                         placeholderIconBackground: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                                  isArgb: false),
                                         placeholderIcon: SBSDKUI2IconStyle(visible: true,
                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                 isArgb: false)),
                                         swipeToDelete: SBSDKUI2SwipeToDelete(enabled: true,
                                                                              backgroundColor: SBSDKUI2Color(colorString: "?sbColorNegative",
                                                                                                             isArgb: false),
                                                                              iconColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                       isArgb: false))), manualCountEditDialog: ScanbotBarcodeScannerSDK.SBSDKUI2ManualCountEditDialog = SBSDKUI2ManualCountEditDialog(sheetColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                            isArgb: false),
                                                  dividerColor: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                              isArgb: false),
                                                  modalOverlayColor: SBSDKUI2Color(colorString: "?sbColorModalOverlay",
                                                                                   isArgb: false),
                                                  title: SBSDKUI2StyledText(text: "?manualCountEditDialogTitle",
                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                 isArgb: false)),
                                                  info: SBSDKUI2StyledText(text: "?manualCountEditDialogInfo",
                                                                           color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                isArgb: false)),
                                                  updateButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                            text: "?manualCountEditDialogUpdateButton",
                                                                                            background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                           isArgb: false),
                                                                                                                                fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                         isArgb: false),
                                                                                                                                strokeWidth: 1.0),
                                                                                            foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                                color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                     isArgb: false),
                                                                                                                                useShadow: false)),
                                                  cancelButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                            text: "?manualCountEditDialogCancelButton",
                                                                                            background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                           isArgb: false),
                                                                                                                                fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                         isArgb: false),
                                                                                                                                strokeWidth: 1.0),
                                                                                            foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                                color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                     isArgb: false),
                                                                                                                                useShadow: false)),
                                                  clearTextButton: SBSDKUI2IconStyle(visible: true,
                                                                                     color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                          isArgb: false))), barcodeInfoMapping: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeInfoMapping = SBSDKUI2BarcodeInfoMapping(sheetColor: SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false),
                                               dividerColor: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                           isArgb: false),
                                               modalOverlayColor: SBSDKUI2Color(colorString: "?sbColorModalOverlay",
                                                                                isArgb: false),
                                               loadingMessage: SBSDKUI2StyledText(text: "?barcodeInfoMappingLoadingMessage",
                                                                                  color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                       isArgb: false)),
                                               errorState: SBSDKUI2BarcodeItemErrorState(title: SBSDKUI2StyledText(text: "?barcodeInfoMappingErrorStateTitle",
                                                                                                                   color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                        isArgb: false)),
                                                                                         subtitle: SBSDKUI2StyledText(text: "?barcodeInfoMappingErrorStateSubtitle",
                                                                                                                      color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                                                           isArgb: false)),
                                                                                         retryButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                                                                  text: "?barcodeInfoMappingErrorStateRetryButton",
                                                                                                                                  background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                                                                 isArgb: false),
                                                                                                                                                                      fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                                                               isArgb: false),
                                                                                                                                                                      strokeWidth: 1.0),
                                                                                                                                  foreground: SBSDKUI2ForegroundStyle(iconVisible: true,
                                                                                                                                                                      color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                                                           isArgb: false),
                                                                                                                                                                      useShadow: false)),
                                                                                         cancelButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                                                                   text: "?barcodeInfoMappingErrorStateCancelButton",
                                                                                                                                   background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                                  isArgb: false),
                                                                                                                                                                       fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                                isArgb: false),
                                                                                                                                                                       strokeWidth: 1.0),
                                                                                                                                   foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                                                                       color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                                                            isArgb: false),
                                                                                                                                                                       useShadow: false)))), arOverlay: ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayGeneralConfiguration = SBSDKUI2ArOverlayGeneralConfiguration(visible: false,
                                                                                                         counterBadge: SBSDKUI2BadgeStyle(visible: true,
                                                                                                                                          background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#FF000000",
                                                                                                                                                                                                         isArgb: false),
                                                                                                                                                                              fillColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                                                                                       isArgb: false),
                                                                                                                                                                              strokeWidth: 0.0),
                                                                                                                                          foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                                         isArgb: false)),
                                                                                                         automaticSelectionEnabled: false,
                                                                                                         barcodeItemInfoPosition: SBSDKUI2BarcodeItemInfoPosition
                                                                                                             .below,
                                                                                                         polygon: SBSDKUI2ArOverlayPolygonConfiguration(visible: true,
                                                                                                                                                        deselected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                                                                                                                    isArgb: false),
                                                                                                                                                                                         fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                                                  isArgb: false),
                                                                                                                                                                                         strokeWidth: 3.0,
                                                                                                                                                                                         cornerRadius: 5.0),
                                                                                                                                                        selected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                                                                                                  isArgb: false),
                                                                                                                                                                                       fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                                                isArgb: false),
                                                                                                                                                                                       strokeWidth: 3.0,
                                                                                                                                                                                       cornerRadius: 5.0)),
                                                                                                         barcodeItemConfiguration: SBSDKUI2BarcodeItemConfiguration(imageVisible: true,
                                                                                                                                                                    titleSelected: SBSDKUI2StyledText(text: "BARCODE_TITLE",
                                                                                                                                                                                                      color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                                                                                           isArgb: false)),
                                                                                                                                                                    subtitleSelected: SBSDKUI2StyledText(visible: true,
                                                                                                                                                                                                         text: "BARCODE_SUBTITLE",
                                                                                                                                                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                                                                                                                                              isArgb: false),
                                                                                                                                                                                                         useShadow: false),
                                                                                                                                                                    titleDeselected: SBSDKUI2StyledText(visible: true,
                                                                                                                                                                                                        text: "BARCODE_TITLE",
                                                                                                                                                                                                        color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                                                                                             isArgb: false),
                                                                                                                                                                                                        useShadow: false),
                                                                                                                                                                    subtitleDeselected: SBSDKUI2StyledText(text: "BARCODE_SUBTITLE",
                                                                                                                                                                                                           color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                                                                                                                                                isArgb: false)),
                                                                                                                                                                    backgroundSelected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                                                                                                                        isArgb: false),
                                                                                                                                                                                                             fillColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                                                                                                                      isArgb: false),
                                                                                                                                                                                                             strokeWidth: 1.0,
                                                                                                                                                                                                             cornerRadius: 5.0),
                                                                                                                                                                    backgroundDeselected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                                                                                                                                          isArgb: false),
                                                                                                                                                                                                               fillColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                                                                                                                                        isArgb: false),
                                                                                                                                                                                                               strokeWidth: 1.0,
                                                                                                                                                                                                               cornerRadius: 5.0))))
  @objc convenience override dynamic public init()
  @objc override public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BarcodeScannerResult) @objcMembers public class SBSDKUI2BarcodeScannerResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let items: [ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItem]
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerResult?
  @objc public init(items: [ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItem] = [])
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2CameraPermissionScreen) @objcMembers public class SBSDKUI2CameraPermissionScreen : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var statusBarMode: ScanbotBarcodeScannerSDK.SBSDKUI2StatusBarMode
  @objc public var background: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var iconBackground: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var icon: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle
  @objc public var enableCameraButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var closeButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var enableCameraTitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var enableCameraExplanation: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2CameraPermissionScreen?
  @objc public init(statusBarMode: ScanbotBarcodeScannerSDK.SBSDKUI2StatusBarMode = SBSDKUI2StatusBarMode.dark, background: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false), iconBackground: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOutline", isArgb: false), icon: ScanbotBarcodeScannerSDK.SBSDKUI2IconStyle = SBSDKUI2IconStyle(visible: true,
                                                            color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                 isArgb: false)), enableCameraButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(text: "Grant permission",
                                                                                              background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                             isArgb: false),
                                                                                                                                  fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                           isArgb: false),
                                                                                                                                  strokeWidth: 0.0),
                                                                                              foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                                  color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                       isArgb: false),
                                                                                                                                  useShadow: false)), closeButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(text: "Close",
                                                                                       background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                      isArgb: false),
                                                                                                                           fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                    isArgb: false),
                                                                                                                           strokeWidth: 0.0),
                                                                                       foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                           color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                isArgb: false),
                                                                                                                           useShadow: false)), enableCameraTitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "Camera permission denied!",
                                                                           color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                isArgb: false)), enableCameraExplanation: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "Please allow the usage of the camera to start the scanning process.",
                                       color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                            isArgb: false)))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeScanner : ObjectiveC.NSObject {
  @objc public var acceptedBarcodeTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType] {
    @objc get
    @objc set
  }
  @objc public var acceptedDocumentTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType] {
    @objc get
    @objc set
  }
  @objc public var extensionFilter: ScanbotBarcodeScannerSDK.SBSDKBarcodesExtensionFilter {
    @objc get
    @objc set
  }
  @objc public var regularExpressionPattern: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var additionalParameters: ScanbotBarcodeScannerSDK.SBSDKBarcodeAdditionalParameters {
    @objc get
    @objc set
  }
  @objc public var engineMode: ScanbotBarcodeScannerSDK.SBSDKBarcodeEngineMode {
    @objc get
    @objc set
  }
  @objc public var useLiveMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc convenience override dynamic public init()
  @objc(initWithTypes:) convenience public init(types barCodeTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType])
  @objc(initWithTypes:liveMode:) public init(types barCodeTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType], liveMode useLiveMode: Swift.Bool)
  @objc(detectBarCodesOnImage:) public func detectBarCodes(on image: UIKit.UIImage) -> [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]?
  @objc(detectBarCodesOnImage:inRect:) public func detectBarCodes(on image: UIKit.UIImage, in rect: CoreFoundation.CGRect) -> [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]?
  @objc(detectBarCodesOnImage:orientation:inRect:) public func detectBarCodes(on image: UIKit.UIImage, orientation videoOrientation: AVFoundation.AVCaptureVideoOrientation, in rect: CoreFoundation.CGRect) -> [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]?
  @objc(detectBarCodesOnSampleBuffer:orientation:) public func detectBarCodes(on sampleBuffer: CoreMedia.CMSampleBuffer, orientation videoOrientation: AVFoundation.AVCaptureVideoOrientation) -> [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]?
  @objc(detectBarCodesOnSampleBuffer:orientation:inRect:) public func detectBarCodes(on sampleBuffer: CoreMedia.CMSampleBuffer, orientation videoOrientation: AVFoundation.AVCaptureVideoOrientation, in rect: CoreFoundation.CGRect) -> [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2ScanbotAlertDialog) @objcMembers public class SBSDKUI2ScanbotAlertDialog : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var subtitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var sheetColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var modalOverlayColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var dividerColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var okButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var actionButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var cancelButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2ScanbotAlertDialog?
  @objc public init(title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "Title",
                                                               color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                    isArgb: false)), subtitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "Standard explanation message text.",
                                                                  color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                       isArgb: false)), sheetColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false), modalOverlayColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorModalOverlay", isArgb: false), dividerColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOutline", isArgb: false), okButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(background: SBSDKUI2BackgroundStyle(fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                             isArgb: false))), actionButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(visible: false,
                                                                                        background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                       isArgb: false),
                                                                                                                            fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                     isArgb: false),
                                                                                                                            strokeWidth: 0.0)), cancelButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(visible: true,
                                                                                        background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                       isArgb: false),
                                                                                                                            fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                     isArgb: false),
                                                                                                                            strokeWidth: 0.0)))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKUIEnableCameraUIConfiguration : ObjectiveC.NSObject {
  @objc public var enableCameraButtonColor: UIKit.UIColor
  @objc public var enableCameraDescriptionColor: UIKit.UIColor
  @objc public var enableCameraBackgroundColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SBSDKVideoFlipMode : Swift.Int {
  case none = 0
  case horizontal = 1
  case vertical = 2
  case both = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodesBatchScannerBehaviorConfiguration : ObjectiveC.NSObject {
  @objc public var isFlashEnabled: Swift.Bool
  @objc public var isSuccessBeepEnabled: Swift.Bool
  @objc public var acceptedBarcodeTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType]
  @objc public var acceptedDocumentTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType]
  @objc public var extensionFilter: ScanbotBarcodeScannerSDK.SBSDKBarcodesExtensionFilter
  @objc public var additionalDetectionParameters: ScanbotBarcodeScannerSDK.SBSDKBarcodeAdditionalParameters
  @objc public var engineMode: ScanbotBarcodeScannerSDK.SBSDKBarcodeEngineMode
  @objc public var cameraZoomRange: ScanbotBarcodeScannerSDK.SBSDKZoomRange
  @objc public var cameraZoomFactor: CoreFoundation.CGFloat
  @objc public var isDoubleTapToZoomEnabled: Swift.Bool
  @objc public var isPinchToZoomEnabled: Swift.Bool
  @objc public var shouldAnimateZooming: Swift.Bool
  @objc public var barcodeFilter: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeFilter
  @objc public var isFocusLockEnabled: Swift.Bool
  @objc public var focusLockPosition: CoreFoundation.CGFloat
  @objc public var initialScanDelay: Swift.Double
  @objc public var isViewFinderEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentConstants : ObjectiveC.NSObject {
  @objc public static let boardingPassDocumentType: Swift.String
  @objc public static let legDocumentType: Swift.String
  @objc public static let swissQRDocumentType: Swift.String
  @objc public static let deMedicalPlanDocumentType: Swift.String
  @objc public static let patientDocumentType: Swift.String
  @objc public static let doctorDocumentType: Swift.String
  @objc public static let subheadingDocumentType: Swift.String
  @objc public static let medicineDocumentType: Swift.String
  @objc public static let substanceDocumentType: Swift.String
  @objc public static let prescriptionDocumentType: Swift.String
  @objc public static let idCardPDF417DocumentType: Swift.String
  @objc public static let gs1DocumentType: Swift.String
  @objc public static let elementDocumentType: Swift.String
  @objc public static let validationErrorDocumentType: Swift.String
  @objc public static let sepaDocumentType: Swift.String
  @objc public static let medicalCertificateDocumentType: Swift.String
  @objc public static let vCardDocumentType: Swift.String
  @objc public static let entryDocumentType: Swift.String
  @objc public static let versionDocumentType: Swift.String
  @objc public static let sourceDocumentType: Swift.String
  @objc public static let kindDocumentType: Swift.String
  @objc public static let xmlDocumentType: Swift.String
  @objc public static let nameDocumentType: Swift.String
  @objc public static let firstNameDocumentType: Swift.String
  @objc public static let nicknameDocumentType: Swift.String
  @objc public static let birthdayDocumentType: Swift.String
  @objc public static let anniversaryDocumentType: Swift.String
  @objc public static let genderDocumentType: Swift.String
  @objc public static let deliveryAddressDocumentType: Swift.String
  @objc public static let photoDocumentType: Swift.String
  @objc public static let telephoneNumberDocumentType: Swift.String
  @objc public static let emailDocumentType: Swift.String
  @objc public static let imppDocumentType: Swift.String
  @objc public static let languagesDocumentType: Swift.String
  @objc public static let timeZoneDocumentType: Swift.String
  @objc public static let geoLocationDocumentType: Swift.String
  @objc public static let titleDocumentType: Swift.String
  @objc public static let roleDocumentType: Swift.String
  @objc public static let logoDocumentType: Swift.String
  @objc public static let organisationDocumentType: Swift.String
  @objc public static let memberDocumentType: Swift.String
  @objc public static let relatedDocumentType: Swift.String
  @objc public static let categoriesDocumentType: Swift.String
  @objc public static let noteDocumentType: Swift.String
  @objc public static let productIdDocumentType: Swift.String
  @objc public static let revisionDocumentType: Swift.String
  @objc public static let soundDocumentType: Swift.String
  @objc public static let uidDocumentType: Swift.String
  @objc public static let clientPIDMapDocumentType: Swift.String
  @objc public static let urlDocumentType: Swift.String
  @objc public static let publicKeyDocumentType: Swift.String
  @objc public static let busyTimeURLDocumentType: Swift.String
  @objc public static let calendarURIForRequestsDocumentType: Swift.String
  @objc public static let calendarURIDocumentType: Swift.String
  @objc public static let customDocumentType: Swift.String
  @objc public static let aamvaDocumentType: Swift.String
  @objc public static let titleDataDocumentType: Swift.String
  @objc public static let registrationDataDocumentType: Swift.String
  @objc public static let motorCarrierDataDocumentType: Swift.String
  @objc public static let registrantAndVehicleDataDocumentType: Swift.String
  @objc public static let vehicleOwnerDataDocumentType: Swift.String
  @objc public static let vehicleDataDocumentType: Swift.String
  @objc public static let vehicleSafetyInspectionDataDocumentType: Swift.String
  @objc public static let dlidDocumentType: Swift.String
  @objc public static let driverLicenseDocumentType: Swift.String
  @objc public static let idCardDocumentType: Swift.String
  @objc public static let enhancedDriverLicenseDocumentType: Swift.String
  @objc public static let rawDocumentDocumentType: Swift.String
  @objc public static let boardingPassElectronicTicketFieldNormalizedName: Swift.String
  @objc public static let boardingPassNameFieldNormalizedName: Swift.String
  @objc public static let boardingPassNumberOfLegsFieldNormalizedName: Swift.String
  @objc public static let boardingPassSecurityDataFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegAirlineDesignatorOfBoardingPassIssuerFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegAirlineNumericCodeFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegBaggageTagLicensePlateNumbersFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegCheckInSequenceNumberFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegCompartmentCodeFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegDateOfBoardingPassIssuanceJulianFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegDateOfFlightJulianFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegDepartureAirportCodeFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegDestinationAirportCodeFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegDocumentFormSerialNumberFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegDocumentTypeFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegFastTrackFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegFirstNonConsecutiveBaggageTagLicensePlateNumberFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegFlightNumberFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegForIndividualAirlineUseFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegFreeBaggageAllowanceFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegFrequentFlyerAirlineDesignatorFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegFrequentFlyerNumberFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegIDADIndicatorFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegInternationalDocumentationVerificationFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegMarketingCarrierDesignatorFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegOperatingCarrierDesignatorFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegOperatingCarrierPNRCodeFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegPassengerDescriptionFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegPassengerStatusFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegSeatNumberFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegSecondNonConsecutiveBaggageTagLicensePlateNumberFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegSelecteeIndicatorFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegSourceOfBoardingPassIssuanceFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegSourceOfCheckInFieldNormalizedName: Swift.String
  @objc public static let boardingPassLegVersionNumberFieldNormalizedName: Swift.String
  @objc public static let swissQRAdditionalBillingInformationFieldNormalizedName: Swift.String
  @objc public static let swissQRAdditionalInfoTrailerFieldNormalizedName: Swift.String
  @objc public static let swissQRAdditionalInfoUnstructuredFieldNormalizedName: Swift.String
  @objc public static let swissQRAlternativeProcedureParameterFieldNormalizedName: Swift.String
  @objc public static let swissQRAmountFieldNormalizedName: Swift.String
  @objc public static let swissQRCurrencyFieldNormalizedName: Swift.String
  @objc public static let swissQRDebtorAddressTypeFieldNormalizedName: Swift.String
  @objc public static let swissQRDebtorBuildingOrAddressLine2FieldNormalizedName: Swift.String
  @objc public static let swissQRDebtorCountryFieldNormalizedName: Swift.String
  @objc public static let swissQRDebtorNameFieldNormalizedName: Swift.String
  @objc public static let swissQRDebtorPlaceFieldNormalizedName: Swift.String
  @objc public static let swissQRDebtorPostalCodeFieldNormalizedName: Swift.String
  @objc public static let swissQRDebtorStreetOrAddressLine1FieldNormalizedName: Swift.String
  @objc public static let swissQRDueDateFieldNormalizedName: Swift.String
  @objc public static let swissQREncodingFieldNormalizedName: Swift.String
  @objc public static let swissQRFinalPayeeAddressTypeFieldNormalizedName: Swift.String
  @objc public static let swissQRFinalPayeeBuildingOrAddressLine2FieldNormalizedName: Swift.String
  @objc public static let swissQRFinalPayeeCountryFieldNormalizedName: Swift.String
  @objc public static let swissQRFinalPayeeNameFieldNormalizedName: Swift.String
  @objc public static let swissQRFinalPayeePlaceFieldNormalizedName: Swift.String
  @objc public static let swissQRFinalPayeePostalCodeFieldNormalizedName: Swift.String
  @objc public static let swissQRFinalPayeeStreetOrAddressLine1FieldNormalizedName: Swift.String
  @objc public static let swissQRIBANFieldNormalizedName: Swift.String
  @objc public static let swissQRPayeeAddressTypeFieldNormalizedName: Swift.String
  @objc public static let swissQRPayeeBuildingOrAddressLine2FieldNormalizedName: Swift.String
  @objc public static let swissQRPayeeCountryFieldNormalizedName: Swift.String
  @objc public static let swissQRPayeeNameFieldNormalizedName: Swift.String
  @objc public static let swissQRPayeePlaceFieldNormalizedName: Swift.String
  @objc public static let swissQRPayeePostalCodeFieldNormalizedName: Swift.String
  @objc public static let swissQRPayeeStreetOrAddressLine1FieldNormalizedName: Swift.String
  @objc public static let swissQRPaymentReferenceFieldNormalizedName: Swift.String
  @objc public static let swissQRPaymentReferenceTypeFieldNormalizedName: Swift.String
  @objc public static let swissQRVersionFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanCurrentPageFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDocumentVersionNumberFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanGUIDFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanLanguageCountryCodeFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatchVersionNumberFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanTotalNumberOfPagesFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientAllergiesAndIntolerancesFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientBirthDateFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientBreastFeedingFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientCreatinineValueFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientFirstNameFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientGenderFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientHeightFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientLastNameFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientPatientFreeTextFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientPatientIDFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientPreNameFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientPregnantFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientSuffixFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientTitleFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanPatientWeightFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDoctorDoctorNumberFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDoctorEmailFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDoctorHospitalIDFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDoctorIssuerNameFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDoctorIssuingDateAndTimeFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDoctorPharmacyIDFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDoctorPlaceFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDoctorPostalCodeFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDoctorStreetFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanDoctorTelephoneNumberFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingGeneralNoteFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingKeyWordsFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingSubheadingFreeTextFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineDosageFormFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineDosageFormFreeTextFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineDosageFreeTextFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineDosingUnitFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineDosingUnitFreeTextFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineDrugNameFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineEveningFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineGeneralNotesFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineMiddayFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineMorningFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineNightFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicinePharmaceuticalNumberFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineReasonForTreatmentFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineRelevantInfoFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineSubstanceActiveSubstanceFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingMedicineSubstancePotencyFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingPrescriptionGeneralInformationFieldNormalizedName: Swift.String
  @objc public static let deMedicalPlanSubheadingPrescriptionPrescriptionFreeTextFieldNormalizedName: Swift.String
  @objc public static let idCardPDF417BirthDateFieldNormalizedName: Swift.String
  @objc public static let idCardPDF417DateExpiredFieldNormalizedName: Swift.String
  @objc public static let idCardPDF417DateIssuedFieldNormalizedName: Swift.String
  @objc public static let idCardPDF417DocumentCodeFieldNormalizedName: Swift.String
  @objc public static let idCardPDF417FirstNameFieldNormalizedName: Swift.String
  @objc public static let idCardPDF417LastNameFieldNormalizedName: Swift.String
  @objc public static let idCardPDF417OptionalFieldNormalizedName: Swift.String
  @objc public static let gs1ElementApplicationIdentifierFieldNormalizedName: Swift.String
  @objc public static let gs1ElementDataTitleFieldNormalizedName: Swift.String
  @objc public static let gs1ElementElementDescriptionFieldNormalizedName: Swift.String
  @objc public static let gs1ElementRawValueFieldNormalizedName: Swift.String
  @objc public static let gs1ElementValidationErrorCodeFieldNormalizedName: Swift.String
  @objc public static let gs1ElementValidationErrorReasonFieldNormalizedName: Swift.String
  @objc public static let sepaAmountFieldNormalizedName: Swift.String
  @objc public static let sepaCharacterSetFieldNormalizedName: Swift.String
  @objc public static let sepaIdentificationFieldNormalizedName: Swift.String
  @objc public static let sepaInformationFieldNormalizedName: Swift.String
  @objc public static let sepaPurposeFieldNormalizedName: Swift.String
  @objc public static let sepaReceiverBICFieldNormalizedName: Swift.String
  @objc public static let sepaReceiverIBANFieldNormalizedName: Swift.String
  @objc public static let sepaReceiverNameFieldNormalizedName: Swift.String
  @objc public static let sepaRemittanceFieldNormalizedName: Swift.String
  @objc public static let sepaServiceTagFieldNormalizedName: Swift.String
  @objc public static let sepaVersionFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateAccidentFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateAssignedToAccidentInsuranceDoctorFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateBirthDateFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateChildNeedsCareFromFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateChildNeedsCareUntilFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateDiagnoseFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateDiagnosedOnFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateDoctorNumberFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateDocumentDateFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateFirstNameFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateHealthInsuranceNumberFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateIncapableOfWorkSinceFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateIncapableOfWorkUntilFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateInitialCertificateFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateInsuredPersonNumberFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateLastNameFieldNormalizedName: Swift.String
  @objc public static let medicalCertificatePlaceOfOperationNumberFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateRenewedCertificateFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateRequiresCareFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateStatusFieldNormalizedName: Swift.String
  @objc public static let medicalCertificateWorkAccidentFieldNormalizedName: Swift.String
  @objc public static let vCardEntryRawValueFieldNormalizedName: Swift.String
  @objc public static let vCardEntryTypeModifierFieldNormalizedName: Swift.String
  @objc public static let vCardEntryValueFieldNormalizedName: Swift.String
  @objc public static let aamvaIssuerIdentificationNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaJurisdictionVersionNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaVersionFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataAddressCityFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataAddressJurisdictionCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataAddressStreetFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataAddressZipCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataBusinessNameFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataFamilyNameFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataFirstLienHolderIdFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataFirstLienHolderNameFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataGivenNameFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataNewUsedIndicatorFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataOdometerDateFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataOdometerDisclosureFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataOdometerReadingKilometersFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataOdometerReadingMileageFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataPreviousTitleNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataPreviousTitlingJurisdictionFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataTitleBrandFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataTitleIssueDateFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataTitleNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataTitlingJurisdictionFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataVehicleBodyStyleFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataVehicleColorFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataVehicleIdentificationNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataVehicleMakeFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataVehicleModelFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataVehicleModelYearFieldNormalizedName: Swift.String
  @objc public static let aamvaTitleDataVehiclePurchaseDateFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataAddressCityFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataAddressJurisdictionCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataAddressStreetFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataAddressZipCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataAxlesFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataBusinessNameFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataFuelFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataGrossVehicleWeightFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataRegistrantFamilyNameFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataRegistrantGivenNameFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataRegistrationExpiryDateFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataRegistrationIssueDateFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataRegistrationPlateNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataRegistrationWindowStickerDecalFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataRegistrationYearFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataVehicleBodyStyleFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataVehicleColorFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataVehicleIdentificationNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataVehicleMakeFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataVehicleModelFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataVehicleModelYearFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrationDataVehicleUseFieldNormalizedName: Swift.String
  @objc public static let aamvaMotorCarrierDataCarrierNameFieldNormalizedName: Swift.String
  @objc public static let aamvaMotorCarrierDataCityFieldNormalizedName: Swift.String
  @objc public static let aamvaMotorCarrierDataJurisdictionFieldNormalizedName: Swift.String
  @objc public static let aamvaMotorCarrierDataStreetAddressFieldNormalizedName: Swift.String
  @objc public static let aamvaMotorCarrierDataUSDOTNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaMotorCarrierDataZipFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataAddressFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataBaseJurisdictionRegisteredWeightFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataCarrierNameRegistrantFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataCityFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataGrossVehicleWeightFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataJurisdictionFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataModelYearFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataNumberOfSeatsFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataRegistrationDecalNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataRegistrationEnforcementDateFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataRegistrationExpirationDateFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataRegistrationIssueDateFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataRegistrationPlateNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataRegistrationYearFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataTypeOfVehicleFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataUnitNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataVehicleIdentificationNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataVehicleMakeFieldNormalizedName: Swift.String
  @objc public static let aamvaRegistrantAndVehicleDataZipCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataFirstOwnerIdNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataFirstOwnerLastNameFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataFirstOwnerLegalStatusFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataFirstOwnerMiddleNameFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataFirstOwnerNameFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataFirstOwnerTotalNameFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataMailingAddress1FieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataMailingAddress2FieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataMailingCityFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataMailingJurisdictionCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataMailingZipCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataResidenceAddress1FieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataResidenceAddress2FieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataResidenceCityFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataResidenceJurisdictionCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataResidenceZipCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataSecondOwnerIdNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataSecondOwnerLastNameFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataSecondOwnerLegalStatusFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataSecondOwnerMiddleNameFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataSecondOwnerNameFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleOwnerDataSecondOwnerTotalNameFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataBodyStyleFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataDateJunkedFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataDateRecoveredFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataDateStolenFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataEngineDisplacementFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataEngineSizeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataFuelTypeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataHorsepowerFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataIFTAIndicatorFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataIRPIndicatorFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataJunkedIndicatorFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataMSRPFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataMajorCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataMakeYearFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataManufactureGrossWeightFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataMinorCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataNumberOfAxlesFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataNumberOfCylindersFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataNumberOfDoorsFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataStolenIndicatorFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataTransmissionCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataUnladenWeightFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataVLTClacFromDateFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataVehicleIdNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataVehicleIdentificationNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataVehicleMakeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataVehicleModelFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataVehicleStatusCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleDataVehicleTypeCodeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataInspectionAddressFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataInspectionAirPollutionDeviceConditionsFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataInspectionFacilityIdentifierFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataInspectionFormOrStickerNumberCurrentFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataInspectionFormOrStickerNumberPreviousFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataInspectionSmogCertificateIndicatorFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataInspectionStationNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataInspectorIdentificationNumberFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataOdometerReadingAtInspectionFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataVehicleBodyTypeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataVehicleMakeFieldNormalizedName: Swift.String
  @objc public static let aamvaVehicleSafetyInspectionDataVehicleModelYearFieldNormalizedName: Swift.String
  @objc public static let aamvadlidAddressCityFieldNormalizedName: Swift.String
  @objc public static let aamvadlidAddressJurisdictionCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidAddressPostalCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidAddressStreet1FieldNormalizedName: Swift.String
  @objc public static let aamvadlidAddressStreet2FieldNormalizedName: Swift.String
  @objc public static let aamvadlidAdultInformationFieldNormalizedName: Swift.String
  @objc public static let aamvadlidAliasFamilyNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidAliasGivenNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidAliasMiddleNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidAliasPrefixNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidAliasSuffixNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidCardRevisionDateFieldNormalizedName: Swift.String
  @objc public static let aamvadlidComplianceTypeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidCountryIdentificationFieldNormalizedName: Swift.String
  @objc public static let aamvadlidCustomerFamilyNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidCustomerFirstNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidCustomerGivenNamesFieldNormalizedName: Swift.String
  @objc public static let aamvadlidCustomerIdNumberFieldNormalizedName: Swift.String
  @objc public static let aamvadlidCustomerMiddleNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDateOfBirthFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDocumentDiscriminatorFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDocumentExpirationDateFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDocumentIssueDateFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverAliasDateOfBirthFieldFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverAliasFirstNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverAliasLastNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverAliasSocialSecurityNumberFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverLastNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverLicenseClassificationCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverLicenseEndorsementsCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverLicenseNameFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverLicenseRestrictionCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverNamePrefixFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverNameSuffixFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverPermitClassificationCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverPermitEndorsementCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverPermitIssueDateFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverPermitRestrictionCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverResidenceCityFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverResidenceJurisdictionCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverResidencePostalCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverResidenceStreetAddress1FieldNormalizedName: Swift.String
  @objc public static let aamvadlidDriverResidenceStreetAddress2FieldNormalizedName: Swift.String
  @objc public static let aamvadlidFamilyNameTruncationFieldNormalizedName: Swift.String
  @objc public static let aamvadlidFederalCommercialVehicleCodesFieldNormalizedName: Swift.String
  @objc public static let aamvadlidFirstNameTruncationFieldNormalizedName: Swift.String
  @objc public static let aamvadlidHAZMATEndorsementExpirationDateFieldNormalizedName: Swift.String
  @objc public static let aamvadlidHairColorFieldNormalizedName: Swift.String
  @objc public static let aamvadlidHeightFieldNormalizedName: Swift.String
  @objc public static let aamvadlidInventoryControlNumberFieldNormalizedName: Swift.String
  @objc public static let aamvadlidIssueTimeStampFieldNormalizedName: Swift.String
  @objc public static let aamvadlidJurisdictionSpecificEndorsementCodeDescriptionFieldNormalizedName: Swift.String
  @objc public static let aamvadlidJurisdictionSpecificEndorsementCodesFieldNormalizedName: Swift.String
  @objc public static let aamvadlidJurisdictionSpecificRestrictionCodeDescriptionFieldNormalizedName: Swift.String
  @objc public static let aamvadlidJurisdictionSpecificRestrictionCodesFieldNormalizedName: Swift.String
  @objc public static let aamvadlidJurisdictionSpecificVehicleClassFieldNormalizedName: Swift.String
  @objc public static let aamvadlidJurisdictionSpecificVehicleClassificationDescriptionFieldNormalizedName: Swift.String
  @objc public static let aamvadlidLimitedDurationDocumentIndicatorFieldNormalizedName: Swift.String
  @objc public static let aamvadlidMiddleNameTruncationFieldNormalizedName: Swift.String
  @objc public static let aamvadlidNameSuffixFieldNormalizedName: Swift.String
  @objc public static let aamvadlidNonResidentIndicatorFieldNormalizedName: Swift.String
  @objc public static let aamvadlidNumberOfDuplicatesFieldNormalizedName: Swift.String
  @objc public static let aamvadlidOrganDonorFieldNormalizedName: Swift.String
  @objc public static let aamvadlidOrganDonorIndicatorFieldNormalizedName: Swift.String
  @objc public static let aamvadlidPermitExpirationDateFieldNormalizedName: Swift.String
  @objc public static let aamvadlidPermitIdentifierFieldNormalizedName: Swift.String
  @objc public static let aamvadlidPhysicalDescriptionEyeColorFieldNormalizedName: Swift.String
  @objc public static let aamvadlidPhysicalDescriptionHeightFieldNormalizedName: Swift.String
  @objc public static let aamvadlidPhysicalDescriptionSexFieldNormalizedName: Swift.String
  @objc public static let aamvadlidPhysicalDescriptionWeightRangeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidPlaceOfBirthFieldNormalizedName: Swift.String
  @objc public static let aamvadlidRaceEthnicityFieldNormalizedName: Swift.String
  @objc public static let aamvadlidSocialSecurityNumberFieldNormalizedName: Swift.String
  @objc public static let aamvadlidStandardEndorsementCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidStandardRestrictionCodeFieldNormalizedName: Swift.String
  @objc public static let aamvadlidStandardVehicleClassificationFieldNormalizedName: Swift.String
  @objc public static let aamvadlidUnder18UntilFieldNormalizedName: Swift.String
  @objc public static let aamvadlidUnder19UntilFieldNormalizedName: Swift.String
  @objc public static let aamvadlidUnder21UntilFieldNormalizedName: Swift.String
  @objc public static let aamvadlidUniqueCustomerIdentifierFieldNormalizedName: Swift.String
  @objc public static let aamvadlidVeteranIndicatorFieldNormalizedName: Swift.String
  @objc public static let aamvadlidWeightKilogramsFieldNormalizedName: Swift.String
  @objc public static let aamvadlidWeightPoundsFieldNormalizedName: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SBSDKCameraDevicePosition : Swift.Int {
  case back = 0
  case front = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SBSDKCameraDeviceType : Swift.Int {
  case wide = 0
  case tele = 1
  case ultraWide = 2
  case dualWide = 3
  case dual = 4
  case triple = 5
  case simulated = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SBSDKCameraDevice : ObjectiveC.NSObject {
  @objc final public let deviceType: ScanbotBarcodeScannerSDK.SBSDKCameraDeviceType
  @objc final public let devicePosition: ScanbotBarcodeScannerSDK.SBSDKCameraDevicePosition
  @objc public var name: Swift.String {
    get
  }
  @objc final public let device: AVFoundation.AVCaptureDevice?
  @objc public static var defaultBackFacingCamera: ScanbotBarcodeScannerSDK.SBSDKCameraDevice? {
    @objc get
  }
  @objc public static var defaultFrontFacingCamera: ScanbotBarcodeScannerSDK.SBSDKCameraDevice? {
    @objc get
  }
  @objc public static var widestAvailableBackFacingCamera: ScanbotBarcodeScannerSDK.SBSDKCameraDevice? {
    @objc get
  }
  @objc public static var availableDevices: [ScanbotBarcodeScannerSDK.SBSDKCameraDevice] {
    @objc get
  }
  @objc(availableDevicesForPosition:) public static func availableDevices(for position: ScanbotBarcodeScannerSDK.SBSDKCameraDevicePosition) -> [ScanbotBarcodeScannerSDK.SBSDKCameraDevice]
  @objc(availableDevicesForType:) public static func availableDevices(for type: ScanbotBarcodeScannerSDK.SBSDKCameraDeviceType) -> [ScanbotBarcodeScannerSDK.SBSDKCameraDevice]
  @objc(availableDevicesForType:andPosition:) public static func availableDevices(for type: ScanbotBarcodeScannerSDK.SBSDKCameraDeviceType, position: ScanbotBarcodeScannerSDK.SBSDKCameraDevicePosition) -> [ScanbotBarcodeScannerSDK.SBSDKCameraDevice]
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
public typealias SBSDKLicenseFailureHandler = (ScanbotBarcodeScannerSDK.SBSDKLicenseStatus, ScanbotBarcodeScannerSDK.SBSDKFeature, Swift.String?) -> ()
@objc @_inheritsConvenienceInitializers @objcMembers public class Scanbot : ObjectiveC.NSObject {
  @objc public static func setLoggingEnabled(_ enabled: Swift.Bool)
  @objc public static func setLicenseLoggingEnabled(_ enabled: Swift.Bool)
  @objc public static var isLicenseValid: Swift.Bool {
    @objc get
  }
  @objc public static var licenseStatus: ScanbotBarcodeScannerSDK.SBSDKLicenseStatus {
    @objc get
  }
  @objc public static var licenseExpirationDate: Foundation.Date? {
    @objc get
  }
  @objc public static func defaultLicenseFailureHandler() -> ScanbotBarcodeScannerSDK.SBSDKLicenseFailureHandler
  @objc public static func setupDefaultLicenseFailureHandler()
  @objc(setupDefaultLicenseFailureHandlerWithCompletion:) public static func setupDefaultLicenseFailureHandler(completion: (() -> ())?)
  @objc public static func setLicenseFailureHandler(_ handler: ScanbotBarcodeScannerSDK.SBSDKLicenseFailureHandler?)
  @objc @discardableResult
  public static func setLicense(_ licenseString: Swift.String) -> Swift.Bool
  @objc public static var backupImageStoragesEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static let testData: ScanbotBarcodeScannerSDK.SBSDKTestData
  @objc public static var resourceBundle: Foundation.Bundle?
  @objc public static var sharedApplication: UIKit.UIApplication
  @discardableResult
  @objc public static func applyConfiguration(_ configuration: ScanbotBarcodeScannerSDK.ScanbotSDKConfiguration) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodeMappedData : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let codeDescription: Swift.String
  @objc(initWithName:description:) public init(name: Swift.String, codeDescription: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKUICameraConfiguration : ObjectiveC.NSObject {
  @objc public var camera: ScanbotBarcodeScannerSDK.SBSDKCameraDevice!
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol SBSDKBarcodeScannerViewControllerDelegate {
  @objc(barcodeScannerController:didDetectBarcodes:) func barcodeScannerController(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewController, didDetectBarcodes codes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult])
  @objc optional func barcodeScannerControllerShouldDetectBarcodes(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewController) -> Swift.Bool
  @objc(barcodeScannerController:filterResults:) optional func barcodeScannerController(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewController, filterResults codes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]) -> [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKBarcodeScannerViewController : ScanbotBarcodeScannerSDK.SBSDKBaseScannerViewController {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var acceptedBarcodeTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var extensionFilter: ScanbotBarcodeScannerSDK.SBSDKBarcodesExtensionFilter {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var additionalDetectionParameters: ScanbotBarcodeScannerSDK.SBSDKBarcodeAdditionalParameters {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var acceptedDocumentTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var regularExpressionPattern: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var engineMode: ScanbotBarcodeScannerSDK.SBSDKBarcodeEngineMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var barcodeImageGenerationType: ScanbotBarcodeScannerSDK.SBSDKBarcodeImageGenerationType
  @objc @_Concurrency.MainActor @preconcurrency public var isTrackingOverlayEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var trackingOverlayController: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController! {
    get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public var isRecognitionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc(initWithParentViewController:parentView:) @_Concurrency.MainActor @preconcurrency convenience public init?(parentViewController: UIKit.UIViewController, parentView: UIKit.UIView)
  @objc(initWithParentViewController:parentView:delegate:) @_Concurrency.MainActor @preconcurrency public init?(parentViewController: UIKit.UIViewController, parentView: UIKit.UIView, delegate: (any ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewControllerDelegate)?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func resetAccumulation()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKGenericDocumentType : ObjectiveC.NSObject, Swift.Codable {
  @objc public static var userDocumentTypeDisplayTexts: [Swift.String : Swift.String]
  @objc public static let defaultDocumentTypeDisplayTexts: [Swift.String : Swift.String]
  @objc public var name: Swift.String
  @objc public var fullName: Swift.String
  @objc public var normalizedName: Swift.String
  @objc public var displayText: Swift.String? {
    @objc get
  }
  @objc public var listIndex: Foundation.NSNumber?
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc @_documentation(visibility: internal) public init(name: Swift.String, fullName: Swift.String, normalizedName: Swift.String)
  @_documentation(visibility: internal) @objc override dynamic public init()
  @_documentation(visibility: internal) required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodesBatchScannerTextConfiguration : ScanbotBarcodeScannerSDK.SBSDKUIEnableCameraTextConfiguration {
  @objc public var finderTextHint: Swift.String
  @objc public var cancelButtonTitle: Swift.String
  @objc public var flashButtonTitle: Swift.String
  @objc public var clearButtonTitle: Swift.String
  @objc public var deleteButtonTitle: Swift.String
  @objc public var submitButtonTitle: Swift.String
  @objc public var barcodesCountText: Swift.String
  @objc public var fetchingStateText: Swift.String
  @objc public var noBarcodesTitle: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objc public protocol SBSDKUIBarcodesBatchScannerViewControllerDelegate : ScanbotBarcodeScannerSDK.SBSDKUIViewControllerDelegate {
  @objc(barcodesBatchScannerViewController:didFinishWithResults:) func barcodesBatchScannerViewController(_ viewController: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewController, didFinishWith barcodeResults: [ScanbotBarcodeScannerSDK.SBSDKUIBarcodeMappedResult])
  @objc(barcodesBatchScannerViewControllerDidCancel:) optional func barcodesBatchScannerViewControllerDidCancel(_ viewController: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewController)
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKUIBarcodesBatchScannerViewController : ScanbotBarcodeScannerSDK.SBSDKUICameraViewController, UIKit.UIViewControllerTransitioningDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public var isRecognitionEnabled: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewControllerDelegate)? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency weak public var dataMapper: (any ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerMapping)? {
    @objc get
    @objc set
  }
  @discardableResult
  @objc(presentOn:configuration:delegate:) @_Concurrency.MainActor @preconcurrency public static func present(on presenter: UIKit.UIViewController, configuration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerConfiguration, delegate: (any ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewControllerDelegate)?) -> ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewController
  @objc(createNewWithConfiguration:delegate:) @_Concurrency.MainActor @preconcurrency public static func create(configuration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerConfiguration, delegate: (any ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewControllerDelegate)?) -> ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewController
  @objc @_Concurrency.MainActor @preconcurrency public func freezeCamera()
  @objc @_Concurrency.MainActor @preconcurrency public func unfreezeCamera()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public func updateLayout()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public func updateFlashButton()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public var containerForEnableCameraView: UIKit.UIView! {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public var enableCameraTextConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIEnableCameraTextConfiguration {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public var enableCameraUIConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIEnableCameraUIConfiguration {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public func didHideEnableCameraView()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public func willShowEnableCameraView()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewController : ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewControllerDelegate {
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeScannerController(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewController, filterResults codes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]) -> [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeScannerController(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewController, didDetectBarcodes codes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult])
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeScannerControllerShouldDetectBarcodes(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewController) -> Swift.Bool
}
extension ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewController : ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayControllerDelegate {
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, didChangeSelectedBarcodes selectedBarcodes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult])
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, didTapOnBarcode barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, polygonStyleFor barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackedViewPolygonStyle?
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, textStyleFor barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackedViewTextStyle?
}
extension ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
extension ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerViewController {
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func interactionControllerForDismissal(using animator: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func interactionControllerForPresentation(using animator: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
}
@_Concurrency.MainActor @preconcurrency public struct SBSDKUI2BarcodeScannerView : SwiftUI.UIViewControllerRepresentable {
  @_documentation(visibility: internal) public typealias UIViewControllerType = ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerViewController
  @_Concurrency.MainActor @preconcurrency public init(configuration: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerConfiguration, onSubmit: @escaping (ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerResult) -> (), onCancel: @escaping () -> (), onError: @escaping ((any Swift.Error)?) -> ())
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerView.Context) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerViewController
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerViewController, context: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerView.Context)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Coordinator = Swift.Void
}
extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerConfiguration {
  @_documentation(visibility: internal) @objc convenience dynamic public init?(json: Foundation.Data)
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2TopBarConfiguration) @objcMembers public class SBSDKUI2TopBarConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var mode: ScanbotBarcodeScannerSDK.SBSDKUI2TopBarMode
  @objc public var statusBarMode: ScanbotBarcodeScannerSDK.SBSDKUI2StatusBarMode
  @objc public var backgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var cancelButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2TopBarConfiguration?
  @objc public init(title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(visible: false, text: "Scan Item",
                                                               color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                    isArgb: false)), mode: ScanbotBarcodeScannerSDK.SBSDKUI2TopBarMode = SBSDKUI2TopBarMode.solid, statusBarMode: ScanbotBarcodeScannerSDK.SBSDKUI2StatusBarMode = SBSDKUI2StatusBarMode.light, backgroundColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorPrimary", isArgb: false), cancelButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(text: "Cancel",
                                                                                        background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                       isArgb: false),
                                                                                                                            fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                     isArgb: false),
                                                                                                                            strokeWidth: 0.0),
                                                                                        foreground: SBSDKUI2ForegroundStyle(color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                 isArgb: false))))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc(SBSDKUI2StatusBarMode) public enum SBSDKUI2StatusBarMode : Swift.Int, Swift.Codable {
  case dark
  case light
  case hidden
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBSDKUI2TopBarMode) public enum SBSDKUI2TopBarMode : Swift.Int, Swift.Codable {
  case solid
  case gradient
  case hidden
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SBSDKVideoContentMode : Swift.Int {
  case fillIn
  case fitIn
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKImageMetadataProcessor : ObjectiveC.NSObject {
  @objc(extractMetadataFromImageData:) public static func extractMetadata(from imageData: Foundation.Data) -> ScanbotBarcodeScannerSDK.SBSDKImageMetadata?
  @objc(imageDataByInjectingMetadata:intoImageData:) public static func imageDataByInjecting(metadata: ScanbotBarcodeScannerSDK.SBSDKImageMetadata, into imageData: Foundation.Data) -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeTrackedViewTextStyle : ObjectiveC.NSObject {
  @objc public var textDrawingEnabled: Swift.Bool
  @objc public var trackingOverlayTextFormat: ScanbotBarcodeScannerSDK.SBSDKBarcodeOverlayFormat
  @objc public var textFont: UIKit.UIFont
  @objc public var textColor: UIKit.UIColor
  @objc public var selectedTextColor: UIKit.UIColor
  @objc public var textBackgroundColor: UIKit.UIColor
  @objc public var textBackgroundSelectedColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SBSDKErrorCode : Swift.Int {
  case cancelled = 1
  case invalidImageStorage = 2
  case imageStorageCopyingFailed = 3
  case invalidImageData = 4
  case invalidFileURL = 5
  case PDFCreation = 6
  case textRecognition = 7
  case pageAnalysis = 8
  case OCRLanguageMissing = 9
  case PDFMetadataCreation = 10
  case unknown = 999
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_documentation(visibility: internal) @objc extension Foundation.NSError {
  @_documentation(visibility: internal) @objc(errorWithCode:) public static func error(with code: ScanbotBarcodeScannerSDK.SBSDKErrorCode) -> Foundation.NSError
}
@objc public enum SBSDKVideoFrameResolution : Swift.Int {
  case auto
  case fullHD
  case UHD
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class SBSDKBarcodeScannerAccumulatingResult : ObjectiveC.NSObject {
  @objc final public let code: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult
  @objc public var scanCount: Swift.Int
  @objc(initWithBarcodeResult:) public init(barcodeResult: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodesBatchScannerUIConfiguration : ObjectiveC.NSObject {
  @objc public var topBarButtonsColor: UIKit.UIColor
  @objc public var topBarBackgroundColor: UIKit.UIColor
  @objc public var topBarButtonsInactiveColor: UIKit.UIColor
  @objc public var cameraOverlayColor: UIKit.UIColor
  @objc public var finderLineColor: UIKit.UIColor
  @objc public var finderLineWidth: CoreFoundation.CGFloat
  @objc public var finderAspectRatio: ScanbotBarcodeScannerSDK.SBSDKAspectRatio
  @objc public var finderTextHintColor: UIKit.UIColor
  @objc public var isFlashButtonHidden: Swift.Bool
  @objc public var isCancelButtonHidden: Swift.Bool
  @objc public var orientationLockMode: ScanbotBarcodeScannerSDK.SBSDKOrientationLock
  @objc public var barcodesCountTextColor: UIKit.UIColor
  @objc public var detailsPrimaryColor: UIKit.UIColor
  @objc public var detailsActionColor: UIKit.UIColor
  @objc public var detailsBackgroundColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class SBSDKFrameLimiter : ObjectiveC.NSObject {
  @objc public var fpsCount: Swift.UInt {
    @objc get
    @objc set
  }
  @objc public var framesTotal: Swift.UInt {
    get
  }
  @objc public var framesSkipped: Swift.UInt {
    get
  }
  @objc public var frameDuration: Swift.Double {
    get
  }
  @objc public var throttleRate: Swift.Double {
    @objc get
  }
  @objc(initWithFPSCount:) public init(fpsCount: Swift.UInt)
  @objc public func isReadyForNextFrame() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKZoomRange : ObjectiveC.NSObject {
  @objc public var minZoom: CoreFoundation.CGFloat {
    get
  }
  @objc public var maxZoom: CoreFoundation.CGFloat {
    get
  }
  @objc(initWithMinZoom:andMaxZoom:) public init(minZoom: CoreFoundation.CGFloat, maxZoom: CoreFoundation.CGFloat)
  @_documentation(visibility: internal) @objc override dynamic public init()
  @objc deinit
}
@objc(SBSDKUI2ExpectedBarcode) @objcMembers public class SBSDKUI2ExpectedBarcode : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var barcodeValue: Swift.String
  @objc public var title: Swift.String?
  @objc public var image: Swift.String?
  @objc public var count: Swift.Int
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2ExpectedBarcode?
  @objc public init(barcodeValue: Swift.String, title: Swift.String?, image: Swift.String?, count: Swift.Int = 1)
  @objc convenience public init(barcodeValue: Swift.String, title: Swift.String?, image: Swift.String?)
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2FindAndPickScanningMode) @objcMembers public class SBSDKUI2FindAndPickScanningMode : ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeUseCase {
  @objc public var scanningCompletedColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var scanningPartiallyColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var scanningNotScannedColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var allowPartialScan: Swift.Bool
  @objc public var expectedBarcodes: [ScanbotBarcodeScannerSDK.SBSDKUI2ExpectedBarcode]
  @objc public var countingRepeatDelay: Swift.Int
  @objc public var sheet: ScanbotBarcodeScannerSDK.SBSDKUI2Sheet
  @objc public var sheetContent: ScanbotBarcodeScannerSDK.SBSDKUI2SheetContent
  @objc public var manualCountEditDialog: ScanbotBarcodeScannerSDK.SBSDKUI2ManualCountEditDialog
  @objc public var arOverlay: ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayFindAndPickConfiguration
  @objc public var partialScannedAlertDialogEnabled: Swift.Bool
  @objc public var partialScannedAlertDialog: ScanbotBarcodeScannerSDK.SBSDKUI2ScanbotAlertDialog
  @objc public var confirmationAlertDialogEnabled: Swift.Bool
  @objc public var confirmationAlertDialog: ScanbotBarcodeScannerSDK.SBSDKUI2ScanbotAlertDialog
  @objc override public var _type: Swift.String {
    @objc get
  }
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc override public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2FindAndPickScanningMode?
  @objc public init(scanningCompletedColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorPositive", isArgb: false), scanningPartiallyColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorWarning", isArgb: false), scanningNotScannedColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOutline", isArgb: false), allowPartialScan: Swift.Bool = false, expectedBarcodes: [ScanbotBarcodeScannerSDK.SBSDKUI2ExpectedBarcode] = [], countingRepeatDelay: Swift.Int = 1000, sheet: ScanbotBarcodeScannerSDK.SBSDKUI2Sheet = SBSDKUI2Sheet(mode: SBSDKUI2SheetMode.collapsedSheet,
                                                     collapsedVisibleHeight: SBSDKUI2CollapsedVisibleHeight.small,
                                                     listButton: SBSDKUI2BadgedButton(badgeBackgroundColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                          isArgb: false),
                                                                                      badgeForegroundColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                          isArgb: false),
                                                                                      visible: true,
                                                                                      backgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                                     isArgb: false),
                                                                                      foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                     isArgb: false),
                                                                                      activeBackgroundColor: SBSDKUI2Color(colorString: "?sbColorSurfaceHigh",
                                                                                                                           isArgb: false),
                                                                                      activeForegroundColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                           isArgb: false))), sheetContent: ScanbotBarcodeScannerSDK.SBSDKUI2SheetContent = SBSDKUI2SheetContent(sheetColor: SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false),
                                         dividerColor: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                     isArgb: false),
                                         manualCountChangeEnabled: true,
                                         manualCountOutlineColor: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                                isArgb: false),
                                         manualCountChangeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                               isArgb: false),
                                         title: SBSDKUI2StyledText(visible: true,
                                                                   text: "?findAndPickSheetTitle",
                                                                   color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                        isArgb: false),
                                                                   useShadow: false),
                                         clearAllButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                     text: "?sheetResetButton",
                                                                                     background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                    isArgb: false),
                                                                                                                         fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                  isArgb: false),
                                                                                                                         strokeWidth: 1.0),
                                                                                     foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                              isArgb: false),
                                                                                                                         useShadow: false)),
                                         barcodeItemTitle: SBSDKUI2StyledText(text: "BARCODE_TITLE",
                                                                              color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                   isArgb: false)),
                                         barcodeItemSubtitle: SBSDKUI2StyledText(text: "?findAndPickSheetBarcodeItemSubtitle",
                                                                                 color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                      isArgb: false)),
                                         barcodeItemImageVisible: true,
                                         submitButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                   text: "?sheetSubmitButton",
                                                                                   background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                  isArgb: false),
                                                                                                                       fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                isArgb: false),
                                                                                                                       strokeWidth: 1.0),
                                                                                   foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                       color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                            isArgb: false),
                                                                                                                       useShadow: false)),
                                         startScanningButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                          text: "?sheetStartScanningButton",
                                                                                          background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                         isArgb: false),
                                                                                                                              fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                       isArgb: false),
                                                                                                                              strokeWidth: 1.0),
                                                                                          foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                              color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                   isArgb: false),
                                                                                                                              useShadow: false)),
                                         placeholderTitle: SBSDKUI2StyledText(text: "?sheetPlaceholderTitle",
                                                                              color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                   isArgb: false)),
                                         placeholderSubtitle: SBSDKUI2StyledText(text: "?sheetPlaceholderSubtitle",
                                                                                 color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                      isArgb: false)),
                                         placeholderIconBackground: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                                  isArgb: false),
                                         placeholderIcon: SBSDKUI2IconStyle(visible: true,
                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                 isArgb: false)),
                                         swipeToDelete: SBSDKUI2SwipeToDelete(enabled: false,
                                                                              backgroundColor: SBSDKUI2Color(colorString: "?sbColorNegative",
                                                                                                             isArgb: false),
                                                                              iconColor: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                       isArgb: false))), manualCountEditDialog: ScanbotBarcodeScannerSDK.SBSDKUI2ManualCountEditDialog = SBSDKUI2ManualCountEditDialog(sheetColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                            isArgb: false),
                                                  dividerColor: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                              isArgb: false),
                                                  modalOverlayColor: SBSDKUI2Color(colorString: "?sbColorModalOverlay",
                                                                                   isArgb: false),
                                                  title: SBSDKUI2StyledText(text: "?manualCountEditDialogTitle",
                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                 isArgb: false)),
                                                  info: SBSDKUI2StyledText(text: "?manualCountEditDialogInfo",
                                                                           color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                isArgb: false)),
                                                  updateButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                            text: "?manualCountEditDialogUpdateButton",
                                                                                            background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                           isArgb: false),
                                                                                                                                fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                         isArgb: false),
                                                                                                                                strokeWidth: 1.0),
                                                                                            foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                                color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                     isArgb: false),
                                                                                                                                useShadow: false)),
                                                  cancelButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                            text: "?manualCountEditDialogCancelButton",
                                                                                            background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                           isArgb: false),
                                                                                                                                fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                         isArgb: false),
                                                                                                                                strokeWidth: 1.0),
                                                                                            foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                                color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                     isArgb: false),
                                                                                                                                useShadow: false)),
                                                  clearTextButton: SBSDKUI2IconStyle(visible: true,
                                                                                     color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                          isArgb: false))), arOverlay: ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayFindAndPickConfiguration = SBSDKUI2ArOverlayFindAndPickConfiguration(visible: true,
                                                              automaticSelectionEnabled: true,
                                                              polygon: SBSDKUI2FindAndPickArOverlayPolygonConfiguration(partiallyScanned: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorWarning",
                                                                                                                                                                                          isArgb: false),
                                                                                                                                                               fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                        isArgb: false),
                                                                                                                                                               strokeWidth: 3.0,
                                                                                                                                                               cornerRadius: 5.0),
                                                                                                                        rejected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                                                                                  isArgb: false),
                                                                                                                                                       fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                isArgb: false),
                                                                                                                                                       strokeWidth: 3.0,
                                                                                                                                                       cornerRadius: 5.0),
                                                                                                                        completed: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                                                                   isArgb: false),
                                                                                                                                                        fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                 isArgb: false),
                                                                                                                                                        strokeWidth: 3.0,
                                                                                                                                                        cornerRadius: 5.0)),
                                                              badge: SBSDKUI2FindAndPickBadgeConfiguration(partiallyScanned: SBSDKUI2BadgeStyle(visible: true,
                                                                                                                                                background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#000000FF",
                                                                                                                                                                                                               isArgb: false),
                                                                                                                                                                                    fillColor: SBSDKUI2Color(colorString: "?sbColorWarning",
                                                                                                                                                                                                             isArgb: false),
                                                                                                                                                                                    strokeWidth: 0.0),
                                                                                                                                                foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                                               isArgb: false)),
                                                                                                           rejected: SBSDKUI2BadgeStyle(visible: true,
                                                                                                                                        background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#000000FF",
                                                                                                                                                                                                       isArgb: false),
                                                                                                                                                                            fillColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                                                                                                     isArgb: false),
                                                                                                                                                                            strokeWidth: 0.0),
                                                                                                                                        foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                                       isArgb: false)),
                                                                                                           completed: SBSDKUI2BadgeStyle(visible: true,
                                                                                                                                         background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#000000FF",
                                                                                                                                                                                                        isArgb: false),
                                                                                                                                                                             fillColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                                                                                      isArgb: false),
                                                                                                                                                                             strokeWidth: 0.0),
                                                                                                                                         foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                                        isArgb: false)))), partialScannedAlertDialogEnabled: Swift.Bool = true, partialScannedAlertDialog: ScanbotBarcodeScannerSDK.SBSDKUI2ScanbotAlertDialog = SBSDKUI2ScanbotAlertDialog(title: SBSDKUI2StyledText(text: "?findAndPickPartialAlertTitle",
                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                              isArgb: false)),
                                               subtitle: SBSDKUI2StyledText(text: "?findAndPickPartialAlertSubtitle",
                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                 isArgb: false)),
                                               sheetColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                         isArgb: false),
                                               modalOverlayColor: SBSDKUI2Color(colorString: "?sbColorModalOverlay",
                                                                                isArgb: false),
                                               dividerColor: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                           isArgb: false),
                                               okButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                     text: "?findAndPickPartialAlertSubmitButton",
                                                                                     background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                    isArgb: false),
                                                                                                                         fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                  isArgb: false),
                                                                                                                         strokeWidth: 1.0),
                                                                                     foreground: SBSDKUI2ForegroundStyle(iconVisible: true,
                                                                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                              isArgb: false),
                                                                                                                         useShadow: false)),
                                               cancelButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                         text: "?findAndPickPartialAlertCancelButton",
                                                                                         background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                        isArgb: false),
                                                                                                                             fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                      isArgb: false),
                                                                                                                             strokeWidth: 1.0),
                                                                                         foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                             color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                  isArgb: false),
                                                                                                                             useShadow: false))), confirmationAlertDialogEnabled: Swift.Bool = false, confirmationAlertDialog: ScanbotBarcodeScannerSDK.SBSDKUI2ScanbotAlertDialog = SBSDKUI2ScanbotAlertDialog(title: SBSDKUI2StyledText(text: "?findAndPickCompleteAlertTitle",
                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                              isArgb: false)),
                                               subtitle: SBSDKUI2StyledText(text: "?findAndPickCompleteAlertSubtitle",
                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                 isArgb: false)),
                                               sheetColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                         isArgb: false),
                                               modalOverlayColor: SBSDKUI2Color(colorString: "?sbColorModalOverlay",
                                                                                isArgb: false),
                                               dividerColor: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                           isArgb: false),
                                               okButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                     text: "?findAndPickCompleteAlertSubmitButton",
                                                                                     background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                    isArgb: false),
                                                                                                                         fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                  isArgb: false),
                                                                                                                         strokeWidth: 1.0),
                                                                                     foreground: SBSDKUI2ForegroundStyle(iconVisible: true,
                                                                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                              isArgb: false),
                                                                                                                         useShadow: false)),
                                               cancelButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                         text: "?findAndPickCompleteAlertCancelButton",
                                                                                         background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                        isArgb: false),
                                                                                                                             fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                      isArgb: false),
                                                                                                                             strokeWidth: 1.0),
                                                                                         foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                             color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                  isArgb: false),
                                                                                                                             useShadow: false))))
  @objc convenience override dynamic public init()
  @objc override public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public enum SBSDKBarcodeDialogFormat : Swift.Int {
  case code = 0
  case typeAndCode = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SBSDKPolygonLayer : QuartzCore.CAShapeLayer {
  @objc public var lineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc(initWithLineColor:) convenience public init(lineColor: UIKit.UIColor)
  @_documentation(visibility: internal) @objc override dynamic public init(layer: Any)
  @_documentation(visibility: internal) @objc override dynamic public init()
  @_documentation(visibility: internal) @objc override dynamic public func action(forKey event: Swift.String) -> (any QuartzCore.CAAction)?
  @objc deinit
}
extension UIKit.UIViewController {
  @objc(sbsdk_attachViewController:inView:) @_Concurrency.MainActor @preconcurrency dynamic public func sbsdk_attach(_ viewController: UIKit.UIViewController, in containerView: UIKit.UIView)
  @objc(sbsdk_attachViewController:withConstraints:) @_Concurrency.MainActor @preconcurrency dynamic public func sbsdk_attach(_ viewController: UIKit.UIViewController, with constraints: [UIKit.NSLayoutConstraint])
  @objc(sbsdk_detachViewController:) @_Concurrency.MainActor @preconcurrency dynamic public func sbsdk_detach(_ viewController: UIKit.UIViewController)
}
extension UIKit.UIView {
  @objc(sbsdk_constraintsForAnchoringToBoundsOf:) @_Concurrency.MainActor @preconcurrency dynamic public func sbsdk_constraints(boundsOf otherView: UIKit.UIView) -> [UIKit.NSLayoutConstraint]
}
@available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objc public protocol SBSDKUIBarcodeScannerViewControllerDelegate : ScanbotBarcodeScannerSDK.SBSDKUIViewControllerDelegate {
  @objc(qrBarcodeDetectionViewController:didDetectResults:) optional func qrBarcodeDetectionViewController(_ viewController: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewController, didDetect barcodeResults: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult])
  @objc(qrBarcodeDetectionViewController:shouldHighlightResult:) optional func qrBarcodeDetectionViewController(_ viewController: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewController, shouldHighlightResult code: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> Swift.Bool
  @objc optional func qrBarcodeDetectionViewControllerDidCancel(_ viewController: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewController)
  @objc optional func qrBarcodeDetectionViewControllerDidTimeout(_ viewController: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewController)
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKUIBarcodeScannerViewController : ScanbotBarcodeScannerSDK.SBSDKUICameraViewController {
  @objc @_Concurrency.MainActor @preconcurrency public var isRecognitionEnabled: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewControllerDelegate)? {
    @objc get
    @objc set
  }
  @discardableResult
  @objc(presentOn:configuration:delegate:) @_Concurrency.MainActor @preconcurrency public static func present(on presenter: UIKit.UIViewController, configuration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerConfiguration, delegate: (any ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewControllerDelegate)?) -> ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewController
  @objc(createWithConfiguration:delegate:) @_Concurrency.MainActor @preconcurrency public static func create(configuration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerConfiguration, delegate: (any ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewControllerDelegate)?) -> ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewController
  @objc @_Concurrency.MainActor @preconcurrency public func freezeCamera()
  @objc @_Concurrency.MainActor @preconcurrency public func unfreezeCamera()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public func updateFlashButton()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc public func didCancel()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc public func didFinish()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public var containerForEnableCameraView: UIKit.UIView {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public var enableCameraTextConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIEnableCameraTextConfiguration {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public var enableCameraUIConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIEnableCameraUIConfiguration {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public func didHideEnableCameraView()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override public func willShowEnableCameraView()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewController : ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewControllerDelegate {
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeScannerControllerShouldDetectBarcodes(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewController) -> Swift.Bool
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeScannerController(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewController, filterResults codes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]) -> [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeScannerController(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerViewController, didDetectBarcodes codes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult])
}
extension ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerViewController : ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayControllerDelegate {
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, didTapOnBarcode barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, didChangeSelectedBarcodes selectedBarcodes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult])
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, polygonStyleFor barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackedViewPolygonStyle?
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public func barcodeTrackingOverlay(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackingOverlayController, textStyleFor barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackedViewTextStyle?
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKScanAndCountPolygonStyle : ObjectiveC.NSObject {
  @objc public var polygonDrawingEnabled: Swift.Bool
  @objc public var polygonColor: UIKit.UIColor
  @objc public var polygonFillColor: UIKit.UIColor
  @objc public var lineWidth: CoreFoundation.CGFloat
  @objc public var cornerRadius: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
extension CoreFoundation.CGPoint {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGPoint) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKUI2Node : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKGenericDocumentFieldType : ObjectiveC.NSObject, Swift.Codable {
  @objc public static var userFieldTypeVisibilities: [Swift.String : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldDisplayState]?
  @objc public static var userFieldTypeDisplayTexts: [Swift.String : Swift.String]?
  @objc public static let defaultFieldTypeDisplayTexts: [Swift.String : Swift.String]
  @objc public static let defaultFieldTypeVisibilities: [Swift.String : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldDisplayState]?
  @objc public var name: Swift.String
  @objc public var fullName: Swift.String
  @objc public var normalizedName: Swift.String
  @objc public var commonType: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentCommonFieldType
  @objc public var displayText: Swift.String? {
    @objc get
  }
  @objc public var listIndex: Foundation.NSNumber?
  @objc @_documentation(visibility: internal) public init(name: Swift.String, fullName: Swift.String, normalizedName: Swift.String, commonType: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentCommonFieldType)
  @_documentation(visibility: internal) @objc override dynamic public init()
  @_documentation(visibility: internal) required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SBSDKBarcodeScannerResult : ObjectiveC.NSObject {
  @objc public static let SBSDKBarcodeMetadataEANUPCExtensionKey: Swift.String
  @objc public static let SBSDKBarcodeMetadataIsGS1MessageKey: Swift.String
  @objc public static let SBSDKBarcodeMetadataGS1Composite2DTypeKey: Swift.String
  @objc public static let SBSDKBarcodeMetadataDatabarStacksizeKey: Swift.String
  @objc public var polygon: ScanbotBarcodeScannerSDK.SBSDKPolygon
  @objc public var type: ScanbotBarcodeScannerSDK.SBSDKBarcodeType {
    get
  }
  @objc public var `extension`: Swift.String? {
    @objc get
  }
  @objc public var barcodeImage: UIKit.UIImage {
    get
  }
  @objc public var sourceImage: UIKit.UIImage? {
    get
  }
  @objc public var rawTextString: Swift.String {
    get
  }
  @objc public var rawTextStringWithExtension: Swift.String {
    @objc get
  }
  @objc public var rawBytes: Foundation.Data {
    get
  }
  @objc public var parsedDocument: ScanbotBarcodeScannerSDK.SBSDKGenericDocument? {
    @objc get
  }
  @objc public var dateOfDetection: Foundation.Date
  @objc public var age: Foundation.TimeInterval {
    @objc get
  }
  @objc public var metadata: Swift.Dictionary<Swift.String, Swift.String>
  @objc(initWithPolygon:type:barcodeImage:sourceImage:rawTextString:rawBytes:metadata:) public init(polygon: ScanbotBarcodeScannerSDK.SBSDKPolygon, type: ScanbotBarcodeScannerSDK.SBSDKBarcodeType, barcodeImage: UIKit.UIImage, sourceImage: UIKit.UIImage?, rawTextString: Swift.String, rawBytes: Foundation.Data, metadata: Swift.Dictionary<Swift.String, Swift.String>)
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@objc public protocol SBSDKBarcodeScanAndCountViewControllerDelegate {
  @objc(barcodeScanAndCountController:didDetectBarcodes:) func barcodeScanAndCount(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountViewController, didDetectBarcodes codes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult])
  @objc(barcodeScanAndCountController:filterResults:) optional func barcodeScanAndCount(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountViewController, filterResults codes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]) -> [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]
  @objc(barcodeScanAndCountController:polygonStyleForBarcode:) optional func barcodeScanAndCount(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountViewController, polygonStyleForBarcode code: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> ScanbotBarcodeScannerSDK.SBSDKScanAndCountPolygonStyle
  @objc(barcodeScanAndCountController:overlayForBarcode:) optional func barcodeScanAndCount(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountViewController, overlayForBarcode code: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> UIKit.UIView?
  @objc optional func barcodeScanAndCountControllerDidStartScanning(_ controller: ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountViewController)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKBarcodeScanAndCountViewController : ScanbotBarcodeScannerSDK.SBSDKBaseScannerViewController {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var acceptedBarcodeTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var extensionFilter: ScanbotBarcodeScannerSDK.SBSDKBarcodesExtensionFilter {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var additionalDetectionParameters: ScanbotBarcodeScannerSDK.SBSDKBarcodeAdditionalParameters {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var engineMode: ScanbotBarcodeScannerSDK.SBSDKBarcodeEngineMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var captureMode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountCaptureMode
  @objc @_Concurrency.MainActor @preconcurrency public var shutterButtonHidden: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var polygonStyle: ScanbotBarcodeScannerSDK.SBSDKScanAndCountPolygonStyle {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var countedBarcodes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerAccumulatingResult] {
    @objc get
  }
  @objc(initWithParentViewController:parentView:) @_Concurrency.MainActor @preconcurrency convenience public init?(parentViewController: UIKit.UIViewController, parentView: UIKit.UIView)
  @objc(initWithParentViewController:parentView:delegate:) @_Concurrency.MainActor @preconcurrency public init?(parentViewController: UIKit.UIViewController, parentView: UIKit.UIView, delegate: (any ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountViewControllerDelegate)?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc @_Concurrency.MainActor @preconcurrency public func clearCountedBarcodes()
  @objc @_Concurrency.MainActor @preconcurrency public func scanAndCount()
  @objc @_Concurrency.MainActor @preconcurrency public func continueScanning()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKZoomingImageScrollView : UIKit.UIScrollView {
  @objc @_Concurrency.MainActor @preconcurrency public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var margins: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var overlayView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension ScanbotBarcodeScannerSDK.SBSDKZoomingImageScrollView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
}
@objc extension ScanbotBarcodeScannerSDK.SBSDKUIBarcodeScannerConfiguration {
  @objc convenience dynamic public init?(json: Swift.String, partial: Swift.Bool = true)
}
@objc public enum SBSDKSoundType : Swift.Int {
  case modern
  case classic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKSoundController : ObjectiveC.NSObject {
  @objc public var type: ScanbotBarcodeScannerSDK.SBSDKSoundType {
    @objc get
    @objc set
  }
  @objc convenience public init(soundType: ScanbotBarcodeScannerSDK.SBSDKSoundType)
  @objc public func playBleepSound()
  @objc(playCustomSoundFromURL:) public func playCustomSound(from url: Foundation.URL)
  @objc public func vibrate()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ScanbotSDKConfiguration : ObjectiveC.NSObject {
  @objc public var loggingEnabled: Swift.Bool
  @objc public var licenseString: Swift.String?
  @objc public var licenseLoggingEnabled: Swift.Bool
  @objc public var licenseFailureHandler: ScanbotBarcodeScannerSDK.SBSDKLicenseFailureHandler
  @objc public var resourceBundle: Foundation.Bundle
  @objc public var sharedApplication: UIKit.UIApplication?
  @objc public var shouldShowStatusBarOnScanningScreens: Swift.Bool
  @objc public var defaultStatusBarStyle: UIKit.UIStatusBarStyle
  @objc public var fileStorageImageQuality: Swift.UInt8
  @objc public var fileStorageImageFormat: ScanbotBarcodeScannerSDK.SBSDKImageFileFormat
  @objc public var fileStorageBaseDirectory: Foundation.URL?
  @objc public var fileEncryptionMode: ScanbotBarcodeScannerSDK.SBSDKAESEncrypterMode
  @objc public var fileEncryptionPassword: Swift.String?
  @objc override dynamic public init()
  @objc public static var defaultConfiguration: ScanbotBarcodeScannerSDK.ScanbotSDKConfiguration {
    @objc get
  }
  @objc public class func configurationWith(JSON: Swift.String) -> ScanbotBarcodeScannerSDK.ScanbotSDKConfiguration?
  @objc public class func configurationWithJSONFrom(URL: Foundation.URL) -> ScanbotBarcodeScannerSDK.ScanbotSDKConfiguration?
  @objc deinit
}
@objc @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodesBatchScannerConfiguration : ScanbotBarcodeScannerSDK.SBSDKUIConfiguration {
  @objc public var uiConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerUIConfiguration
  @objc public var textConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerTextConfiguration
  @objc public var behaviorConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerBehaviorConfiguration
  @objc public var trackingOverlayConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeTrackingOverlayConfiguration
  @objc override public class var defaultConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerConfiguration {
    @objc get
  }
  @objc public init(uiConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerUIConfiguration, textConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerTextConfiguration, behaviorConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodesBatchScannerBehaviorConfiguration, cameraConfiguration: ScanbotBarcodeScannerSDK.SBSDKUICameraConfiguration, trackingOverlayConfiguration: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeTrackingOverlayConfiguration)
  @_documentation(visibility: internal) @objc convenience dynamic public init()
  @objc deinit
}
@objc @objcMembers public class SBSDKStorageLocation : ObjectiveC.NSObject {
  @objc public static var applicationDocumentsFolderURL: Foundation.URL {
    @objc get
  }
  @objc public static var applicationSupportFolderURL: Foundation.URL {
    @objc get
  }
  @objc public static var applicationCachesFolderURL: Foundation.URL {
    @objc get
  }
  @objc public static var defaultURL: Foundation.URL {
    @objc get
  }
  @objc public static var scanbotSupportFolderURL: Foundation.URL {
    @objc get
  }
  @objc public static var temporaryURL: Foundation.URL {
    @objc get
  }
  @objc public static var temporary: ScanbotBarcodeScannerSDK.SBSDKStorageLocation? {
    @objc get
  }
  @objc public var baseURL: Foundation.URL
  @objc public init?(baseURL: Foundation.URL? = nil)
  @objc public func url(key: Swift.String) -> Foundation.URL?
  @objc public func removeFromDisk() throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBaseScannerViewFinderConfiguration : ObjectiveC.NSObject {
  @objc public var isViewFinderEnabled: Swift.Bool
  @objc public var style: ScanbotBarcodeScannerSDK.SBSDKFinderView.Style
  @objc public var aspectRatio: ScanbotBarcodeScannerSDK.SBSDKAspectRatio
  @objc public var minimumInset: UIKit.UIEdgeInsets
  @objc public var preferredHeight: CoreFoundation.CGFloat
  @objc public var offset: CoreFoundation.CGPoint
  @objc public var finderSafeArea: CoreFoundation.CGRect
  @objc public var ignoresSafeAreaInsets: Swift.Bool
  @objc public var secondaryAspectRatio: ScanbotBarcodeScannerSDK.SBSDKAspectRatio?
  @objc public var secondaryMinimumInset: UIKit.UIEdgeInsets
  @objc public var lineColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var lineCornerRadius: CoreFoundation.CGFloat
  @objc public var lineWidth: CoreFoundation.CGFloat
  @objc public var isAnimatingChanges: Swift.Bool
  @objc public var backgroundEffect: UIKit.UIVisualEffect?
  @objc public static var defaultConfiguration: ScanbotBarcodeScannerSDK.SBSDKBaseScannerViewFinderConfiguration {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodeMappedResult : ObjectiveC.NSObject {
  @objc final public let barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult
  @objc public var mappedData: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeMappedData? {
    @objc get
  }
  @objc(initWithBarcode:) public init(barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2ViewFinderConfiguration) @objcMembers public class SBSDKUI2ViewFinderConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var style: ScanbotBarcodeScannerSDK.SBSDKUI2FinderStyle
  @objc public var overlayColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var aspectRatio: ScanbotBarcodeScannerSDK.SBSDKUI2AspectRatio
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2ViewFinderConfiguration?
  @objc public init(visible: Swift.Bool = true, style: ScanbotBarcodeScannerSDK.SBSDKUI2FinderStyle = SBSDKUI2FinderCorneredStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                           isArgb: false),
                                                strokeWidth: 2.0, cornerRadius: 10.0), overlayColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorSurfaceLow", isArgb: false), aspectRatio: ScanbotBarcodeScannerSDK.SBSDKUI2AspectRatio = SBSDKUI2AspectRatio(width: 1.0, height: 1.0))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2FinderStyle) @objcMembers public class SBSDKUI2FinderStyle : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Encodable {
  @objc public var _type: Swift.String {
    @objc get
  }
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2FinderStyle?
  @objc override dynamic public init()
  @objc public func toJson() -> Swift.String
  @objc public static func finderCorneredStyle() -> ScanbotBarcodeScannerSDK.SBSDKUI2FinderCorneredStyle
  @objc public static func finderStrokedStyle() -> ScanbotBarcodeScannerSDK.SBSDKUI2FinderStrokedStyle
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2FinderCorneredStyle) @objcMembers public class SBSDKUI2FinderCorneredStyle : ScanbotBarcodeScannerSDK.SBSDKUI2FinderStyle {
  @objc public var strokeColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var strokeWidth: Swift.Double
  @objc public var cornerRadius: Swift.Double
  @objc override public var _type: Swift.String {
    @objc get
  }
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc override public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2FinderCorneredStyle?
  @objc public init(strokeColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFFFF", isArgb: false), strokeWidth: Swift.Double = 3.0, cornerRadius: Swift.Double = 10.0)
  @objc convenience override dynamic public init()
  @objc override public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2FinderStrokedStyle) @objcMembers public class SBSDKUI2FinderStrokedStyle : ScanbotBarcodeScannerSDK.SBSDKUI2FinderStyle {
  @objc public var strokeColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var strokeWidth: Swift.Double
  @objc public var cornerRadius: Swift.Double
  @objc override public var _type: Swift.String {
    @objc get
  }
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc override public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2FinderStrokedStyle?
  @objc public init(strokeColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "#FFFFFFFF", isArgb: false), strokeWidth: Swift.Double = 3.0, cornerRadius: Swift.Double = 10.0)
  @objc convenience override dynamic public init()
  @objc override public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc(SBSDKUI2CameraModule) public enum SBSDKUI2CameraModule : Swift.Int, Swift.Codable {
  case front
  case back
  case backWidest
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2CameraConfiguration) @objcMembers public class SBSDKUI2CameraConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var cameraModule: ScanbotBarcodeScannerSDK.SBSDKUI2CameraModule
  @objc public var zoomSteps: [Swift.Double]
  @objc public var defaultZoomFactor: Swift.Double
  @objc public var flashEnabled: Swift.Bool
  @objc public var minFocusDistanceLock: Swift.Bool
  @objc public var pinchToZoomEnabled: Swift.Bool
  @objc public var orientationLockMode: ScanbotBarcodeScannerSDK.SBSDKUI2OrientationLockMode
  @objc public var cameraPreviewMode: ScanbotBarcodeScannerSDK.SBSDKUI2CameraPreviewMode
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2CameraConfiguration?
  @objc public init(cameraModule: ScanbotBarcodeScannerSDK.SBSDKUI2CameraModule = SBSDKUI2CameraModule.back, zoomSteps: [Swift.Double] = [1.0, 2.0, 5.0], defaultZoomFactor: Swift.Double = 1.0, flashEnabled: Swift.Bool = false, minFocusDistanceLock: Swift.Bool = false, pinchToZoomEnabled: Swift.Bool = true, orientationLockMode: ScanbotBarcodeScannerSDK.SBSDKUI2OrientationLockMode = SBSDKUI2OrientationLockMode.none, cameraPreviewMode: ScanbotBarcodeScannerSDK.SBSDKUI2CameraPreviewMode = SBSDKUI2CameraPreviewMode.fillIn)
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKUI2BarcodeScannerViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor public static func presentAsync(on presenter: UIKit.UIViewController, configuration: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerConfiguration) async throws -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerResult?
  @discardableResult
  @objc(presentOn:configuration:handler:) @_Concurrency.MainActor @preconcurrency public static func present(on presenter: UIKit.UIViewController, configuration: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerConfiguration, handler: @escaping (ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerViewController, Swift.Bool, (any Swift.Error)?, ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerResult?) -> ()) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerViewController
  @objc(createNewWithConfiguration:handler:) @_Concurrency.MainActor @preconcurrency public static func create(with configuration: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerConfiguration, handler: @escaping (ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerViewController, Swift.Bool, (any Swift.Error)?, ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerResult?) -> ()) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerViewController
  @objc @_Concurrency.MainActor @preconcurrency public var shouldHideHomeIndicator: Swift.Bool
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2SingleScanningMode) @objcMembers public class SBSDKUI2SingleScanningMode : ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeUseCase {
  @objc public var confirmationSheetEnabled: Swift.Bool
  @objc public var barcodeImageVisible: Swift.Bool
  @objc public var sheetColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var dividerColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var modalOverlayColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var barcodeTitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var barcodeSubtitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var submitButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var cancelButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var barcodeInfoMapping: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeInfoMapping
  @objc public var arOverlay: ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayGeneralConfiguration
  @objc override public var _type: Swift.String {
    @objc get
  }
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc override public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2SingleScanningMode?
  @objc public init(confirmationSheetEnabled: Swift.Bool = false, barcodeImageVisible: Swift.Bool = true, sheetColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false), dividerColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOutline", isArgb: false), modalOverlayColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorModalOverlay", isArgb: false), barcodeTitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "BARCODE_TITLE",
                                                                      color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                           isArgb: false)), barcodeSubtitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "BARCODE_SUBTITLE",
                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                              isArgb: false)), submitButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(visible: true,
                                                                                        text: "?sheetSubmitButton",
                                                                                        background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                       isArgb: false),
                                                                                                                            fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                     isArgb: false),
                                                                                                                            strokeWidth: 1.0),
                                                                                        foreground: SBSDKUI2ForegroundStyle(iconVisible: true,
                                                                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                 isArgb: false))), cancelButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(visible: true,
                                                                                        text: "?singleModeConfirmationCancelButton",
                                                                                        background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                       isArgb: false),
                                                                                                                            fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                     isArgb: false),
                                                                                                                            strokeWidth: 1.0),
                                                                                        foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                            color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                 isArgb: false))), barcodeInfoMapping: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeInfoMapping = SBSDKUI2BarcodeInfoMapping(sheetColor: SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false),
                                               dividerColor: SBSDKUI2Color(colorString: "?sbColorOutline",
                                                                           isArgb: false),
                                               modalOverlayColor: SBSDKUI2Color(colorString: "?sbColorModalOverlay",
                                                                                isArgb: false),
                                               loadingMessage: SBSDKUI2StyledText(text: "?barcodeInfoMappingLoadingMessage",
                                                                                  color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                       isArgb: false)),
                                               errorState: SBSDKUI2BarcodeItemErrorState(title: SBSDKUI2StyledText(text: "?barcodeInfoMappingErrorStateTitle",
                                                                                                                   color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                        isArgb: false)),
                                                                                         subtitle: SBSDKUI2StyledText(text: "?barcodeInfoMappingErrorStateSubtitle",
                                                                                                                      color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                                                           isArgb: false)),
                                                                                         retryButton: SBSDKUI2ButtonConfiguration(visible: true,
                                                                                                                                  text: "?barcodeInfoMappingErrorStateRetryButton",
                                                                                                                                  background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                                                                 isArgb: false),
                                                                                                                                                                      fillColor: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                                                               isArgb: false),
                                                                                                                                                                      strokeWidth: 1.0),
                                                                                                                                  foreground: SBSDKUI2ForegroundStyle(iconVisible: true,
                                                                                                                                                                      color: SBSDKUI2Color(colorString: "?sbColorOnPrimary",
                                                                                                                                                                                           isArgb: false))),
                                                                                         cancelButton: SBSDKUI2ButtonConfiguration(text: "?barcodeInfoMappingErrorStateCancelButton",
                                                                                                                                   background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                                  isArgb: false),
                                                                                                                                                                       fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                                isArgb: false),
                                                                                                                                                                       strokeWidth: 1.0),
                                                                                                                                   foreground: SBSDKUI2ForegroundStyle(iconVisible: false,
                                                                                                                                                                       color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                                                                                                                                                            isArgb: false))))), arOverlay: ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayGeneralConfiguration = SBSDKUI2ArOverlayGeneralConfiguration(visible: false,
                                                                                                         counterBadge: SBSDKUI2BadgeStyle(visible: true,
                                                                                                                                          background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#000000FF",
                                                                                                                                                                                                         isArgb: false),
                                                                                                                                                                              fillColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                                                                                       isArgb: false),
                                                                                                                                                                              strokeWidth: 0.0),
                                                                                                                                          foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                                         isArgb: false)),
                                                                                                         automaticSelectionEnabled: false,
                                                                                                         barcodeItemInfoPosition: SBSDKUI2BarcodeItemInfoPosition
                                                                                                             .below,
                                                                                                         polygon: SBSDKUI2ArOverlayPolygonConfiguration(visible: true,
                                                                                                                                                        deselected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                                                                                                                    isArgb: false),
                                                                                                                                                                                         fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                                                  isArgb: false),
                                                                                                                                                                                         strokeWidth: 3.0,
                                                                                                                                                                                         cornerRadius: 5.0),
                                                                                                                                                        selected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                                                                                                  isArgb: false),
                                                                                                                                                                                       fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                                                                                                                                                                isArgb: false),
                                                                                                                                                                                       strokeWidth: 3.0,
                                                                                                                                                                                       cornerRadius: 5.0)),
                                                                                                         barcodeItemConfiguration: SBSDKUI2BarcodeItemConfiguration(imageVisible: true,
                                                                                                                                                                    titleSelected: SBSDKUI2StyledText(text: "BARCODE_TITLE",
                                                                                                                                                                                                      color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                                                                                           isArgb: false)),
                                                                                                                                                                    subtitleSelected: SBSDKUI2StyledText(text: "BARCODE_SUBTITLE",
                                                                                                                                                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                                                                                                                                              isArgb: false)),
                                                                                                                                                                    titleDeselected: SBSDKUI2StyledText(text: "BARCODE_TITLE",
                                                                                                                                                                                                        color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                                                                                                                                             isArgb: false)),
                                                                                                                                                                    subtitleDeselected: SBSDKUI2StyledText(visible: true,
                                                                                                                                                                                                           text: "BARCODE_SUBTITLE",
                                                                                                                                                                                                           color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                                                                                                                                                isArgb: false),
                                                                                                                                                                                                           useShadow: false),
                                                                                                                                                                    backgroundSelected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                                                                                                                        isArgb: false),
                                                                                                                                                                                                             fillColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                                                                                                                      isArgb: false),
                                                                                                                                                                                                             strokeWidth: 1.0,
                                                                                                                                                                                                             cornerRadius: 5.0),
                                                                                                                                                                    backgroundDeselected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                                                                                                                                          isArgb: false),
                                                                                                                                                                                                               fillColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                                                                                                                                        isArgb: false),
                                                                                                                                                                                                               strokeWidth: 1.0,
                                                                                                                                                                                                               cornerRadius: 5.0))))
  @objc convenience override dynamic public init()
  @objc override public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodeExtensionsFilter : ScanbotBarcodeScannerSDK.SBSDKUIBarcodeFilter {
  @objc override public func acceptsBarcode(_ barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKUIDialogStyle : ObjectiveC.NSObject {
  @objc public var screenBackgroundColor: UIKit.UIColor
  @objc public var dialogBackgroundColor: UIKit.UIColor
  @objc public var dialogBackgroundEffect: UIKit.UIVibrancyEffect
  @objc public var cornerRadius: CoreFoundation.CGFloat
  @objc public var titleColor: UIKit.UIColor
  @objc public var titleFont: UIKit.UIFont
  @objc public var messageColor: UIKit.UIColor
  @objc public var messageFont: UIKit.UIFont
  @objc public var separatorColor: UIKit.UIColor
  @objc public var separatorWidth: CoreFoundation.CGFloat
  @objc(defaultStyle) public static var `default`: ScanbotBarcodeScannerSDK.SBSDKUIDialogStyle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol SBSDKUI2BarcodeItemMapper {
  @objc func mapBarcodeItem(item: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItem, onResult: @escaping (ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeMappedData) -> Swift.Void, onError: @escaping () -> Swift.Void)
}
@objc public enum SBSDKBarcodesExtensionFilter : Swift.Int {
  case noFilter = 0
  case onlyWithExtensions = 1
  case onlyWithoutExtensions = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol SBSDKUIViewControllerDelegate {
  @objc optional func viewControllerShouldCancel(_ viewController: ScanbotBarcodeScannerSDK.SBSDKUIViewController) -> Swift.Bool
  @objc optional func viewControllerShouldFinish(_ viewController: ScanbotBarcodeScannerSDK.SBSDKUIViewController) -> Swift.Bool
}
@objc @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKUIViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public var shouldShowStatusBar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var statusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var shouldHideHomeIndicator: Swift.Bool
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc(dismiss:) @_Concurrency.MainActor @preconcurrency public func dismiss(cancelled: Swift.Bool)
  @objc deinit
}
@objc public protocol SBSDKTrackedBarcodeInfoViewable {
  @objc static func make(withBarcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> any UIKit.UIView & ScanbotBarcodeScannerSDK.SBSDKTrackedBarcodeInfoViewable
  @objc func update(barcodeFrame: CoreFoundation.CGRect, isSelected: Swift.Bool, textStyle: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackedViewTextStyle, polygonStyle: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackedViewPolygonStyle)
}
public typealias SBSDKTrackedBarcodeInfoView = (UIKit.UIView & ScanbotBarcodeScannerSDK.SBSDKTrackedBarcodeInfoViewable)
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SBSDKGenericDocumentOcrResult : ObjectiveC.NSObject, Swift.Codable {
  @objc public var text: Swift.String
  @objc public var confidence: Swift.Float
  @_documentation(visibility: internal) @objc override dynamic public init()
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_documentation(visibility: internal) @propertyWrapper final public class SBSDKThreadSafe<T> {
  @_documentation(visibility: internal) public init(wrappedValue: T)
  @_documentation(visibility: internal) final public var projectedValue: ScanbotBarcodeScannerSDK.SBSDKThreadSafe<T> {
    get
  }
  @_documentation(visibility: internal) final public var wrappedValue: T {
    _read
    _modify
  }
  @objc deinit
}
@objc extension UIKit.UIImage {
  @objc dynamic public func sbsdk_imageRotatedClockwise(_ times: Swift.Int) -> UIKit.UIImage?
  @objc dynamic public func sbsdk_imageRotatedCounterClockwise(_ times: Swift.Int) -> UIKit.UIImage?
  @objc(sbsdk_imageRotatedByDegrees:) dynamic public func sbsdk_imageRotated(by degrees: CoreFoundation.CGFloat) -> UIKit.UIImage?
  @objc dynamic public func sbsdk_imageWithStrippedAlpha() -> UIKit.UIImage?
  @objc(sbsdk_imageTransformedBy:) dynamic public func sbsdk_imageTransformed(by transform: CoreFoundation.CGAffineTransform) -> UIKit.UIImage?
  @objc dynamic public func sbsdk_invertedImage() -> UIKit.UIImage?
  @objc dynamic public func sbsdk_imageWithNormalizedOrientation() -> UIKit.UIImage?
  @objc dynamic public func sbsdk_imageWithFixedOrientation() -> UIKit.UIImage?
  @objc(sbsdk_imageScaledToSize:) dynamic public func sbsdk_imageScaled(to size: CoreFoundation.CGSize) -> UIKit.UIImage?
  @objc(sbsdk_limitedToSize:) dynamic public func sbsdk_limited(to size: CoreFoundation.CGSize) -> UIKit.UIImage?
  @objc(sbsdk_imageByCenterCroppingToAspectRatio:) dynamic public func sbsdk_imageByCenterCropping(to aspectRatio: ScanbotBarcodeScannerSDK.SBSDKAspectRatio) -> UIKit.UIImage?
  @objc dynamic public func sbsdk_isMonochrome() -> Swift.Bool
  @objc dynamic public func sbsdk_grayscaledImage() -> UIKit.UIImage?
  @objc public static func sbsdk_imageDataWithFixedOrientation(_ imageData: Foundation.Data) -> Foundation.Data?
  @objc(sbsdk_imageFromPixelBuffer:) public static func sbsdk_image(from pixelBuffer: CoreVideo.CVPixelBuffer) -> UIKit.UIImage?
  @objc(sbsdk_imageFromSampleBuffer:) public static func sbsdk_image(from sampleBuffer: CoreMedia.CMSampleBuffer) -> UIKit.UIImage?
  @objc(sbsdk_imageFromPixelBuffer:orientation:) public static func sbsdk_image(from pixelBuffer: CoreVideo.CVPixelBuffer, orientation: AVFoundation.AVCaptureVideoOrientation) -> UIKit.UIImage?
  @objc(sbsdk_imageFromSampleBuffer:orientation:) public static func sbsdk_image(from sampleBuffer: CoreMedia.CMSampleBuffer, orientation: AVFoundation.AVCaptureVideoOrientation) -> UIKit.UIImage?
  @objc(sbsdk_imageWithColor:size:) public static func sbsdk_image(with color: UIKit.UIColor, size: CoreFoundation.CGSize) -> UIKit.UIImage?
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BarcodeItemErrorState) @objcMembers public class SBSDKUI2BarcodeItemErrorState : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var subtitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var retryButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @objc public var cancelButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemErrorState?
  @objc public init(title: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "Connection Error!",
                                                               color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                    isArgb: false)), subtitle: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "There was an issue and the data requested was not fetched. You could try again or discard this result to start a new scan.",
                                       color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                            isArgb: false)), retryButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration(), cancelButton: ScanbotBarcodeScannerSDK.SBSDKUI2ButtonConfiguration = SBSDKUI2ButtonConfiguration())
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc(SBSDKUI2BarcodeMappedData) @objcMembers public class SBSDKUI2BarcodeMappedData : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var title: Swift.String
  @objc public var subtitle: Swift.String
  @objc public var barcodeImage: Swift.String
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeMappedData?
  @objc public init(title: Swift.String, subtitle: Swift.String, barcodeImage: Swift.String)
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BarcodeInfoMapping) @objcMembers public class SBSDKUI2BarcodeInfoMapping : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var barcodeItemMapper: (any ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemMapper)?
  @objc public var sheetColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var dividerColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var modalOverlayColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color
  @objc public var loadingMessage: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var errorState: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemErrorState
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeInfoMapping?
  @objc public init(barcodeItemMapper: (any ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemMapper)? = nil, sheetColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false), dividerColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorOutline", isArgb: false), modalOverlayColor: ScanbotBarcodeScannerSDK.SBSDKUI2Color = SBSDKUI2Color(colorString: "?sbColorModalOverlay", isArgb: false), loadingMessage: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "Loading message for barcode info mapping.",
                                       color: SBSDKUI2Color(colorString: "?sbColorPrimary",
                                                            isArgb: false)), errorState: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemErrorState = SBSDKUI2BarcodeItemErrorState())
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public protocol SBSDKStorageCrypting {
  @objc(encryptData:) func encrypt(data: Foundation.Data) -> Foundation.Data
  @objc(decryptData:) func decrypt(data: Foundation.Data) -> Foundation.Data
  @objc func beginStreamingEncrypt() -> Swift.Bool
  @objc func beginStreamingDecrypt() -> Swift.Bool
  @objc(streamingCryptChunk:) func streamingCryptChunk(data: Foundation.Data) -> Foundation.Data?
  @objc func streamingCryptComplete() -> Foundation.Data?
}
@objc @_inheritsConvenienceInitializers @_documentation(visibility: internal) @objcMembers public class SBSDKIndexSetValidator : ObjectiveC.NSObject {
  @objc(validateIndexSet:withStorage:) public static func validate(indexSet: Foundation.IndexSet, storage: any ScanbotBarcodeScannerSDK.SBSDKImageStoring) -> Foundation.IndexSet
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKUIEnableCameraTextConfiguration : ObjectiveC.NSObject {
  @objc public var enableCameraExplanationText: Swift.String
  @objc public var enableCameraButtonTitle: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class SBSDKGenericDocumentFieldDisplayState : ObjectiveC.NSObject {
  @objc public static let hidden: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldDisplayState
  @objc public static let visibleIfNotEmpty: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldDisplayState
  @objc public static let alwaysVisible: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldDisplayState
  @_documentation(visibility: internal) @objc(SBSDKGenericDocumentFieldDisplayStateValue) public enum Value : Swift.Int {
    case hidden
    case visibleIfNotEmpty
    case alwaysVisible
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let value: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldDisplayState.Value
  @objc @_documentation(visibility: internal) public init(value: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldDisplayState.Value)
  @objc deinit
}
@objc public enum SBSDKApplicationState : Swift.Int {
  case active = 0
  case inactive = 1
  case background = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_documentation(visibility: internal) @objcMembers public class SBSDKLog : ObjectiveC.NSObject {
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc public static var isLoggingEnabled: Swift.Bool
  @objc public static func logInfo(_ message: Swift.String)
  @objc public static func logError(_ message: Swift.String)
  @objc public static func logWarning(_ message: Swift.String)
  @objc deinit
}
@objc extension ScanbotBarcodeScannerSDK.SBSDKUI2ExpectedBarcode {
  @objc public static let barcodeImageKey: Swift.String
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SBSDKBarcodeType : ObjectiveC.NSObject {
  @objc public static let aztec: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let codaBar: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let code25: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let code39: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let code93: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let code128: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let dataMatrix: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let ean8: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let ean13: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let itf: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let pdf417: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let qrCode: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let microQrCode: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let databar: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let databarExpanded: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let upcA: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let upcE: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let msiPlessey: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let iata2Of5: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let industrial2Of5: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let uspsIntelligentMail: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let royalMail: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let japanPost: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let royalTNTPpost: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let australiaPost: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let databarLimited: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let gs1Composite: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let microPdf417: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let maxiCode: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let rmqrCode: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let code11: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc public static let code32: ScanbotBarcodeScannerSDK.SBSDKBarcodeType
  @objc final public let name: Swift.String
  @objc @_documentation(visibility: internal) final public let value: Swift.Int
  @objc public var isExtendedType: Swift.Bool {
    @objc get
  }
  @objc public static var allTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType] {
    @objc get
  }
  @objc public static var commonTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType] {
    @objc get
  }
  @objc public static var oneDTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType] {
    @objc get
  }
  @objc public static var twoDTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType] {
    @objc get
  }
  @objc public static var postalTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType] {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc @_documentation(visibility: internal) public static func type(with value: Swift.UInt) -> ScanbotBarcodeScannerSDK.SBSDKBarcodeType?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeTrackingOverlayConfiguration : ObjectiveC.NSObject {
  @objc public var polygonStyle: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackedViewPolygonStyle
  @objc public var textStyle: ScanbotBarcodeScannerSDK.SBSDKBarcodeTrackedViewTextStyle
  @objc public var isSelectable: Swift.Bool
  @objc public var isAutomaticSelectionEnabled: Swift.Bool
  @objc public var customView: (any UIKit.UIView & ScanbotBarcodeScannerSDK.SBSDKTrackedBarcodeInfoViewable)?
  @objc public var customViewType: (any ScanbotBarcodeScannerSDK.SBSDKTrackedBarcodeInfoView.Type)?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SBSDKBarcodeMSIPlesseyChecksumAlgorithm : Swift.Int {
  case none = 0
  case mod10 = 0x1
  case mod11IBM = 0x2
  case mod11NCR = 0x4
  case mod1010 = 0x8
  case mod1110IBM = 0x10
  case mod1110NCR = 0x20
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SBSDKAustraliaPostCustomerFormat : Swift.Int {
  case numeric = 1
  case alphanumeric = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SBSDKGS1Handling : Swift.Int {
  case none
  case parse
  case validateStructure
  case decodeStructure
  case validateFull
  case decodeFull
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeAdditionalParameters : ObjectiveC.NSObject {
  @objc public var minimumTextLength: Swift.UInt
  @objc public var maximumTextLength: Swift.UInt
  @objc public var minimum1DBarcodesQuietZone: Swift.UInt
  @objc public var msiPlesseyChecksumAlgorithm: ScanbotBarcodeScannerSDK.SBSDKBarcodeMSIPlesseyChecksumAlgorithm
  @objc public var australiaPostCustomerFormat: ScanbotBarcodeScannerSDK.SBSDKAustraliaPostCustomerFormat
  @objc public var stripCheckDigits: Swift.Bool
  @objc public var useIATA2OF5Checksum: Swift.Bool
  @objc public var useCode11Checksum: Swift.Bool
  @objc public var gs1Handling: ScanbotBarcodeScannerSDK.SBSDKGS1Handling
  @objc public var addAdditionalQuietZone: Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SBSDKPolygonEdgeOrientation : Swift.Int {
  case horizontal = 0
  case vertical = 1
  case undefined = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol SBSDKImageStoring : Foundation.NSCopying {
  @objc var imageCount: Swift.Int { get }
  @objc(addImage:) func add(_ image: UIKit.UIImage) -> Swift.Bool
  @objc(addImageFromURL:) func addImage(from url: Foundation.URL) -> Swift.Bool
  @objc(imageAtIndex:) func image(at index: Swift.Int) -> UIKit.UIImage?
  @objc(imageURLAtIndex:) func imageURL(at index: Swift.Int) -> Foundation.URL?
  @objc(removeImageAtIndex:) func removeImage(at index: Swift.Int)
  @objc(removeAllImages) func removeAll()
  @objc func copy() -> Any
}
@objc public enum SBSDKLicenseStatus : Swift.Int {
  case okay = 0
  case trial = 1
  case notSet = 10
  case corrupted = 11
  case wrongOS = 12
  case appIDMismatch = 13
  case expired = 14
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentBoardingPassLeg : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var airlineDesignatorOfBoardingPassIssuer: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var airlineNumericCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var baggageTagLicensePlateNumbers: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var checkInSequenceNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var compartmentCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dateOfBoardingPassIssuanceJulian: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dateOfFlightJulian: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var departureAirportCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var destinationAirportCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var documentFormSerialNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var documentType: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var fastTrack: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstNonConsecutiveBaggageTagLicensePlateNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var flightNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var forIndividualAirlineUse: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var freeBaggageAllowance: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var frequentFlyerAirlineDesignator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var frequentFlyerNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var idadIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var internationalDocumentationVerification: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var marketingCarrierDesignator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var operatingCarrierDesignator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var operatingCarrierPNRCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var passengerDescription: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var passengerStatus: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var seatNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var secondNonConsecutiveBaggageTagLicensePlateNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var selecteeIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var sourceOfBoardingPassIssuance: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var sourceOfCheckIn: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var versionNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentBoardingPass : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var electronicTicket: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var name: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var numberOfLegs: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var securityData: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var legs: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentBoardingPassLeg]? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentSwissQR : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var additionalBillingInformation: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var additionalInfoTrailer: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var additionalInfoUnstructured: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var alternativeProcedureParameter: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var amount: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var currency: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var debtorAddressType: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var debtorBuildingOrAddressLine2: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var debtorCountry: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var debtorName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var debtorPlace: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var debtorPostalCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var debtorStreetOrAddressLine1: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dueDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var encoding: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var finalPayeeAddressType: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var finalPayeeBuildingOrAddressLine2: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var finalPayeeCountry: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var finalPayeeName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var finalPayeePlace: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var finalPayeePostalCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var finalPayeeStreetOrAddressLine1: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var iban: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var payeeAddressType: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var payeeBuildingOrAddressLine2: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var payeeCountry: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var payeeName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var payeePlace: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var payeePostalCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var payeeStreetOrAddressLine1: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var paymentReference: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var paymentReferenceType: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var version: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentDEMedicalPlanPatient : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var allergiesAndIntolerances: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var birthDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var breastFeeding: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var creatinineValue: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var gender: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var height: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var lastName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var patientFreeText: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var patientID: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var preName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var pregnant: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var suffix: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var weight: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentDEMedicalPlanDoctor : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var doctorNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var email: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var hospitalID: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var issuerName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var issuingDateAndTime: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var pharmacyID: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var place: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var postalCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var street: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var telephoneNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicineSubstance : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var activeSubstance: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var potency: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicine : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var dosageForm: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dosageFormFreeText: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dosageFreeText: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dosingUnit: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dosingUnitFreeText: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var drugName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var evening: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var generalNotes: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var midday: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var morning: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var night: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var pharmaceuticalNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var reasonForTreatment: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var relevantInfo: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var substances: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicineSubstance]? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentDEMedicalPlanSubheadingPrescription : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var generalInformation: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var prescriptionFreeText: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentDEMedicalPlanSubheading : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var generalNotes: [ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField]? {
    @objc get
  }
  @objc public var keyWords: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var subheadingFreeText: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var medicines: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicine]? {
    @objc get
  }
  @objc public var prescriptions: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentDEMedicalPlanSubheadingPrescription]? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentDEMedicalPlan : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var currentPage: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var documentVersionNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var guid: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var languageCountryCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var patchVersionNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var totalNumberOfPages: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var patient: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentDEMedicalPlanPatient? {
    @objc get
  }
  @objc public var doctor: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentDEMedicalPlanDoctor? {
    @objc get
  }
  @objc public var subheadings: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentDEMedicalPlanSubheading]? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentIDCardPDF417 : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var birthDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dateExpired: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dateIssued: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var documentCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var lastName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var optional: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentGS1ElementValidationError : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var code: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var reason: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentGS1Element : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var applicationIdentifier: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dataTitle: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var elementDescription: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var rawValue: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var validationErrors: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentGS1ElementValidationError]? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentGS1 : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var elements: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentGS1Element]? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentSEPA : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var amount: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var characterSet: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var identification: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var information: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var purpose: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var receiverBIC: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var receiverIBAN: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var receiverName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var remittance: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var serviceTag: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var version: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentMedicalCertificate : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var accident: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var assignedToAccidentInsuranceDoctor: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var birthDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var childNeedsCareFrom: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var childNeedsCareUntil: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var diagnose: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var diagnosedOn: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var doctorNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var documentDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var healthInsuranceNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var incapableOfWorkSince: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var incapableOfWorkUntil: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var initialCertificate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var insuredPersonNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var lastName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var placeOfOperationNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var renewedCertificate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var requiresCare: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var status: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var workAccident: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentVCardEntry : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc public var rawValue: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var typeModifiers: [ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField]? {
    @objc get
  }
  @objc public var values: [ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField]? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentVCard : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var version: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var source: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var kind: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var xml: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var name: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var firstName: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var nickname: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var birthday: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var anniversary: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var gender: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var deliveryAddress: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var photo: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var telephoneNumber: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var email: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var impp: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var languages: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var timeZone: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var geoLocation: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var title: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var role: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var logo: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var organisation: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var member: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var related: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var categories: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var note: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var productId: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var revision: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var sound: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var uid: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var clientPIDMap: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var url: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var publicKey: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var busyTimeURL: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var calendarURIForRequests: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var calendarURI: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry? {
    @objc get
  }
  @objc public var customs: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentVCardEntry]? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentAAMVATitleData : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var addressCity: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var addressJurisdictionCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var addressStreet: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var addressZipCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var businessName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var familyName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstLienHolderId: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstLienHolderName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var givenName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var newUsedIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var odometerDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var odometerDisclosure: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var odometerReadingKilometers: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var odometerReadingMileage: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var previousTitleNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var previousTitlingJurisdiction: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var titleBrand: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var titleIssueDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var titleNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var titlingJurisdiction: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleBodyStyle: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleColor: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleIdentificationNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleMake: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleModel: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleModelYear: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehiclePurchaseDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentAAMVARegistrationData : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var addressCity: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var addressJurisdictionCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var addressStreet: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var addressZipCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var axles: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var businessName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var fuel: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var grossVehicleWeight: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrantFamilyName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrantGivenName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationExpiryDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationIssueDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationPlateNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationWindowStickerDecal: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationYear: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleBodyStyle: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleColor: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleIdentificationNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleMake: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleModel: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleModelYear: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleUse: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentAAMVAMotorCarrierData : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var carrierName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var city: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var jurisdiction: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var streetAddress: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var usdotNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var zip: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentAAMVARegistrantAndVehicleData : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var address: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var baseJurisdictionRegisteredWeight: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var carrierNameRegistrant: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var city: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var grossVehicleWeight: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var jurisdiction: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var modelYear: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var numberOfSeats: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationDecalNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationEnforcementDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationExpirationDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationIssueDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationPlateNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var registrationYear: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var typeOfVehicle: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var unitNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleIdentificationNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleMake: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var zipCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentAAMVAVehicleOwnerData : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var firstOwnerIdNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstOwnerLastName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstOwnerLegalStatus: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstOwnerMiddleName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstOwnerName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstOwnerTotalName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var mailingAddress1: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var mailingAddress2: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var mailingCity: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var mailingJurisdictionCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var mailingZipCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var residenceAddress1: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var residenceAddress2: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var residenceCity: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var residenceJurisdictionCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var residenceZipCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var secondOwnerIdNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var secondOwnerLastName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var secondOwnerLegalStatus: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var secondOwnerMiddleName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var secondOwnerName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var secondOwnerTotalName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentAAMVAVehicleData : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var bodyStyle: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dateJunked: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dateRecovered: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dateStolen: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var engineDisplacement: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var engineSize: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var fuelType: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var horsepower: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var iftaIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var irpIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var junkedIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var msrp: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var majorCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var makeYear: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var manufactureGrossWeight: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var minorCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var numberOfAxles: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var numberOfCylinders: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var numberOfDoors: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var stolenIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var transmissionCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var unladenWeight: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vltClacFromDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleIdNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleIdentificationNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleMake: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleModel: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleStatusCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleTypeCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentAAMVAVehicleSafetyInspectionData : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var inspectionAddress: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var inspectionAirPollutionDeviceConditions: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var inspectionFacilityIdentifier: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var inspectionFormOrStickerNumberCurrent: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var inspectionFormOrStickerNumberPrevious: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var inspectionSmogCertificateIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var inspectionStationNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var inspectorIdentificationNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var odometerReadingAtInspection: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleBodyType: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleMake: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var vehicleModelYear: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentAAMVADLID : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc public var addressCity: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var addressJurisdictionCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var addressPostalCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var addressStreet1: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var addressStreet2: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var adultInformation: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var aliasFamilyName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var aliasGivenName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var aliasMiddleName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var aliasPrefixName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var aliasSuffixName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var cardRevisionDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var complianceType: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var countryIdentification: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var customerFamilyName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var customerFirstName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var customerGivenNames: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var customerIdNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var customerMiddleName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var dateOfBirth: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var documentDiscriminator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var documentExpirationDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var documentIssueDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverAliasDateOfBirthField: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverAliasFirstName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverAliasLastName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverAliasSocialSecurityNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverLastName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverLicenseClassificationCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverLicenseEndorsementsCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverLicenseName: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverLicenseRestrictionCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverNamePrefix: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverNameSuffix: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverPermitClassificationCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverPermitEndorsementCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverPermitIssueDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverPermitRestrictionCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverResidenceCity: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverResidenceJurisdictionCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverResidencePostalCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverResidenceStreetAddress1: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var driverResidenceStreetAddress2: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var familyNameTruncation: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var federalCommercialVehicleCodes: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var firstNameTruncation: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var hazmatEndorsementExpirationDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var hairColor: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var height: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var inventoryControlNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var issueTimeStamp: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var jurisdictionSpecificEndorsementCodeDescription: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var jurisdictionSpecificEndorsementCodes: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var jurisdictionSpecificRestrictionCodeDescription: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var jurisdictionSpecificRestrictionCodes: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var jurisdictionSpecificVehicleClass: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var jurisdictionSpecificVehicleClassificationDescription: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var limitedDurationDocumentIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var middleNameTruncation: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var nameSuffix: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var nonResidentIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var numberOfDuplicates: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var organDonor: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var organDonorIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var permitExpirationDate: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var permitIdentifier: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var physicalDescriptionEyeColor: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var physicalDescriptionHeight: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var physicalDescriptionSex: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var physicalDescriptionWeightRange: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var placeOfBirth: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var raceEthnicity: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var socialSecurityNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var standardEndorsementCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var standardRestrictionCode: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var standardVehicleClassification: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var under18Until: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var under19Until: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var under21Until: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var uniqueCustomerIdentifier: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var veteranIndicator: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var weightKilograms: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var weightPounds: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentAAMVARawDocument : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentAAMVA : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper {
  @objc override public var requiredDocumentType: Swift.String {
    @objc get
  }
  @objc public var issuerIdentificationNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var jurisdictionVersionNumber: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var version: ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField? {
    @objc get
  }
  @objc public var titleData: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVATitleData? {
    @objc get
  }
  @objc public var registrationData: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVARegistrationData? {
    @objc get
  }
  @objc public var motorCarrierData: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVAMotorCarrierData? {
    @objc get
  }
  @objc public var registrantAndVehicleData: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVARegistrantAndVehicleData? {
    @objc get
  }
  @objc public var vehicleOwnerData: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVAVehicleOwnerData? {
    @objc get
  }
  @objc public var vehicleData: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVAVehicleData? {
    @objc get
  }
  @objc public var vehicleSafetyInspectionData: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVAVehicleSafetyInspectionData? {
    @objc get
  }
  @objc public var driverLicense: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVADLID? {
    @objc get
  }
  @objc public var idCard: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVADLID? {
    @objc get
  }
  @objc public var enhancedDriverLicense: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVADLID? {
    @objc get
  }
  @objc public var rawDocument: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentAAMVARawDocument? {
    @objc get
  }
  @objc override public init?(document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBarcodeDocumentRootType : ScanbotBarcodeScannerSDK.SBSDKGenericDocumentType {
  @objc public static let allDocumentTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType]
  @objc public class func wrap(_ document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument) -> ScanbotBarcodeScannerSDK.SBSDKGenericDocumentWrapper?
  @objc public class func rootType(from document: ScanbotBarcodeScannerSDK.SBSDKGenericDocument) -> ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType?
  @objc public static let boardingPass: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType
  @objc public static let swissQR: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType
  @objc public static let deMedicalPlan: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType
  @objc public static let idCardPDF417: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType
  @objc public static let gs1: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType
  @objc public static let sepa: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType
  @objc public static let medicalCertificate: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType
  @objc public static let vCard: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType
  @objc public static let aamva: ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType
  @objc override public init(name: Swift.String, fullName: Swift.String, normalizedName: Swift.String)
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKAESEncrypter : ObjectiveC.NSObject, ScanbotBarcodeScannerSDK.SBSDKStorageCrypting {
  @objc public var key: Foundation.Data! {
    get
  }
  @objc final public let iv: Foundation.Data
  @objc final public let salt: Foundation.Data
  @objc final public let iterations: Swift.Int
  @objc(initWithPassword:mode:) required public init?(password: Swift.String, mode: ScanbotBarcodeScannerSDK.SBSDKAESEncrypterMode)
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc public func decrypt(data: Foundation.Data) -> Foundation.Data
  @objc public func encrypt(data: Foundation.Data) -> Foundation.Data
  @objc public func beginStreamingEncrypt() -> Swift.Bool
  @objc public func beginStreamingDecrypt() -> Swift.Bool
  @objc public func streamingCryptChunk(data: Foundation.Data) -> Foundation.Data?
  @objc public func streamingCryptComplete() -> Foundation.Data?
  @objc deinit
}
@objc public enum SBSDKBarcodeImageGenerationType : Swift.Int {
  case none = 0
  case fromVideoFrame = 1
  case capturedImage = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SBSDKCapturePhotoQualityPrioritization : Swift.Int {
  case speed = 0
  case balanced = 1
  case quality = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBaseScannerEnergyConfiguration : ObjectiveC.NSObject {
  @objc public var isEnergySavingEnabled: Swift.Bool
  @objc public var detectionRate: Swift.UInt
  @objc public var energySaveDetectionRate: Swift.UInt
  @objc public var inactivityTimeout: Swift.Double
  @objc public var motionSensitivity: CoreFoundation.CGFloat
  @objc public static var defaultConfiguration: ScanbotBarcodeScannerSDK.SBSDKBaseScannerEnergyConfiguration {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodeTrackingOverlayConfiguration : ObjectiveC.NSObject {
  @objc public var overlayEnabled: Swift.Bool
  @objc public var automaticSelectionEnabled: Swift.Bool
  @objc public var polygonColor: UIKit.UIColor
  @objc public var textColor: UIKit.UIColor
  @objc public var textContainerColor: UIKit.UIColor
  @objc public var highlightedPolygonColor: UIKit.UIColor
  @objc public var highlightedTextColor: UIKit.UIColor
  @objc public var highlightedTextContainerColor: UIKit.UIColor
  @objc public var overlayTextFormat: ScanbotBarcodeScannerSDK.SBSDKBarcodeOverlayFormat
  @objc override dynamic public init()
  @objc deinit
}
@objc(SBSDKUI2AustraliaPostCustomerFormat) public enum SBSDKUI2AustraliaPostCustomerFormat : Swift.Int, Swift.Codable {
  case numeric
  case alphaNumeric
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBSDKUI2MSIPlesseyChecksumAlgorithm) public enum SBSDKUI2MSIPlesseyChecksumAlgorithm : Swift.Int, Swift.Codable {
  case none
  case mod10
  case mod11Ibm
  case mod11Ncr
  case mod1010
  case mod1110Ibm
  case mod1110Ncr
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBSDKUI2Gs1Handling) public enum SBSDKUI2Gs1Handling : Swift.Int, Swift.Codable {
  case none
  case parse
  case validateStructure
  case decodeStructure
  case validateFull
  case decodeFull
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SBSDKUI2BarcodeDocumentFormat) @objcMembers final public class SBSDKUI2BarcodeDocumentFormat : ObjectiveC.NSObject, Swift.Codable {
  @objc public static let aamva: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat
  @objc public static let boardingPass: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat
  @objc public static let deMedicalPlan: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat
  @objc public static let medicalCertificate: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat
  @objc public static let idCardPdf417: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat
  @objc public static let sepa: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat
  @objc public static let swissQr: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat
  @objc public static let vcard: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat
  @objc public static let gs1: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat
  @objc final public let rawValue: Swift.Int
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @objc public static func enumValue(from rawValue: Swift.Int) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat?
  @_documentation(visibility: internal) final public func encode(to encoder: any Swift.Encoder) throws
  @_documentation(visibility: internal) @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBSDKUI2BarcodeFormat) @objcMembers final public class SBSDKUI2BarcodeFormat : ObjectiveC.NSObject, Swift.Codable {
  @objc public static let aztec: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let codabar: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let code25: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let code39: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let code93: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let code128: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let dataMatrix: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let ean8: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let ean13: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let itf: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let pdf417: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let qrCode: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let microQrCode: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let databar: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let databarExpanded: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let upcA: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let upcE: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let msiPlessey: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let iata2Of5: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let industrial2Of5: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let uspsIntelligentMail: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let royalMail: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let japanPost: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let royalTntPost: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let australiaPost: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let databarLimited: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let gs1Composite: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let microPdf417: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let maxiCode: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let rmqrCode: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let code11: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc public static let code32: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat
  @objc final public let rawValue: Swift.Int
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @objc public static func enumValue(from rawValue: Swift.Int) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat?
  @_documentation(visibility: internal) final public func encode(to encoder: any Swift.Encoder) throws
  @_documentation(visibility: internal) @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@objc(SBSDKUI2BarcodesExtensionFilter) public enum SBSDKUI2BarcodesExtensionFilter : Swift.Int, Swift.Codable {
  case noFilter
  case onlyWithExtensions
  case onlyWithoutExtensions
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BarcodeRecognizerConfiguration) @objcMembers public class SBSDKUI2BarcodeRecognizerConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var acceptedDocumentFormats: [ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat]
  @objc public var barcodesExtensionFilter: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodesExtensionFilter
  @objc public var barcodesRegexFilter: Swift.String
  @objc public var minimumTextLength: Swift.Int
  @objc public var maximumTextLength: Swift.Int
  @objc public var minimum1DBarcodesQuietZone: Swift.Int
  @objc public var stripCheckDigits: Swift.Bool
  @objc public var useIATA2OF5Checksum: Swift.Bool
  @objc public var useCode11Checksum: Swift.Bool
  @objc public var barcodeFormats: [ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat]
  @objc public var msiPlesseyChecksumAlgorithm: ScanbotBarcodeScannerSDK.SBSDKUI2MSIPlesseyChecksumAlgorithm
  @objc public var australiaPostCustomerFormat: ScanbotBarcodeScannerSDK.SBSDKUI2AustraliaPostCustomerFormat
  @objc public var gs1Handling: ScanbotBarcodeScannerSDK.SBSDKUI2Gs1Handling
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeRecognizerConfiguration?
  @objc public init(acceptedDocumentFormats: [ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeDocumentFormat] = [], barcodesExtensionFilter: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodesExtensionFilter = SBSDKUI2BarcodesExtensionFilter.noFilter, barcodesRegexFilter: Swift.String = "", minimumTextLength: Swift.Int = 0, maximumTextLength: Swift.Int = 0, minimum1DBarcodesQuietZone: Swift.Int = 10, stripCheckDigits: Swift.Bool = false, useIATA2OF5Checksum: Swift.Bool = true, useCode11Checksum: Swift.Bool = true, barcodeFormats: [ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeFormat] = [], msiPlesseyChecksumAlgorithm: ScanbotBarcodeScannerSDK.SBSDKUI2MSIPlesseyChecksumAlgorithm = SBSDKUI2MSIPlesseyChecksumAlgorithm
                    .mod10, australiaPostCustomerFormat: ScanbotBarcodeScannerSDK.SBSDKUI2AustraliaPostCustomerFormat = SBSDKUI2AustraliaPostCustomerFormat
                    .alphaNumeric, gs1Handling: ScanbotBarcodeScannerSDK.SBSDKUI2Gs1Handling = SBSDKUI2Gs1Handling.parse)
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKUIEnableCameraViewController : UIKit.UIViewController {
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency public var enableCameraButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency public var enableCameraDescriptionLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency public var enableCameraImageView: UIKit.UIImageView!
  @objc @_Concurrency.MainActor @preconcurrency public static func make() -> ScanbotBarcodeScannerSDK.SBSDKUIEnableCameraViewController
  @objc @IBAction @_Concurrency.MainActor @preconcurrency public func enableCameraTapped(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers open class SBSDKUIBarcodeFilter : ObjectiveC.NSObject {
  @objc open func acceptsBarcode(_ barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult) -> Swift.Bool
  @objc(shouldAdd:toBarcodes:) open func shouldAdd(_ barcode: ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult, toBarcodes codes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeScannerResult]) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKImageMetadata : ObjectiveC.NSObject {
  @objc public var metadataDictionary: [Swift.String : Any] {
    get
  }
  @objc public var orientation: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var imageWidth: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var imageHeight: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var originalDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc public var digitalizationDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc public var lensModel: Swift.String? {
    @objc get
  }
  @objc public var lensMaker: Swift.String? {
    @objc get
  }
  @objc public var focalLength: Swift.Double {
    @objc get
  }
  @objc public var focalLength35mm: Swift.Double {
    @objc get
  }
  @objc public var aperture: Swift.Double {
    @objc get
  }
  @objc public var exposureTime: Swift.Double {
    @objc get
  }
  @objc public var ISOValue: Swift.Double {
    @objc get
  }
  @objc(initWithMetadataDictionary:) public init?(with metadata: [Swift.String : Any])
  @_documentation(visibility: internal) @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SBSDKDetectionStatusLabel : UIKit.UILabel {
  @objc @_Concurrency.MainActor @preconcurrency public var textInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func textRect(forBounds bounds: CoreFoundation.CGRect, limitedToNumberOfLines numberOfLines: Swift.Int) -> CoreFoundation.CGRect
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func drawText(in rect: CoreFoundation.CGRect)
  @_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use SBSDKUI2BarcodeScannerViewController instead.")
@objcMembers public class SBSDKUIBarcodeScannerBehaviorConfiguration : ObjectiveC.NSObject {
  @objc public var acceptedBarcodeTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeType]
  @objc public var acceptedDocumentTypes: [ScanbotBarcodeScannerSDK.SBSDKBarcodeDocumentRootType]
  @objc public var extensionFilter: ScanbotBarcodeScannerSDK.SBSDKBarcodesExtensionFilter
  @objc public var barcodeImageGenerationType: ScanbotBarcodeScannerSDK.SBSDKBarcodeImageGenerationType
  @objc public var isFlashEnabled: Swift.Bool
  @objc public var isSuccessBeepEnabled: Swift.Bool
  @objc public var autoCancelTimeout: Swift.Double
  @objc public var additionalParameters: ScanbotBarcodeScannerSDK.SBSDKBarcodeAdditionalParameters
  @objc public var cameraZoomRange: ScanbotBarcodeScannerSDK.SBSDKZoomRange
  @objc public var cameraZoomFactor: CoreFoundation.CGFloat
  @objc public var isDoubleTapToZoomEnabled: Swift.Bool
  @objc public var isPinchToZoomEnabled: Swift.Bool
  @objc public var shouldAnimateZooming: Swift.Bool
  @objc public var engineMode: ScanbotBarcodeScannerSDK.SBSDKBarcodeEngineMode
  @objc public var barcodeFilter: ScanbotBarcodeScannerSDK.SBSDKUIBarcodeFilter
  @objc public var isFocusLockEnabled: Swift.Bool
  @objc public var focusLockPosition: CoreFoundation.CGFloat
  @objc public var initialScanDelay: Swift.Double
  @objc public var isResultWithConfirmationEnabled: Swift.Bool
  @objc public var dialogTextFormat: ScanbotBarcodeScannerSDK.SBSDKBarcodeDialogFormat
  @objc public var isViewFinderEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class SBSDKKeyedImageStorage : ObjectiveC.NSObject {
  @objc public var imageCount: Swift.Int {
    @objc get
  }
  @objc public var imageURLs: [Foundation.URL] {
    @objc get
  }
  @objc public var imageKeys: [Swift.String] {
    @objc get
  }
  @objc final public let fileFormat: ScanbotBarcodeScannerSDK.SBSDKImageFileFormat
  @objc public var jpegCompressionQuality: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc final public let encrypter: (any ScanbotBarcodeScannerSDK.SBSDKStorageCrypting)?
  @objc convenience public init?(storageLocation: ScanbotBarcodeScannerSDK.SBSDKStorageLocation? = SBSDKStorageLocation())
  @objc public init?(storageLocation: ScanbotBarcodeScannerSDK.SBSDKStorageLocation?, fileFormat: ScanbotBarcodeScannerSDK.SBSDKImageFileFormat, encrypter: (any ScanbotBarcodeScannerSDK.SBSDKStorageCrypting)?)
  @objc(setImage:forKey:) public func set(image: UIKit.UIImage, for key: Swift.String)
  @objc(imageForKey:) public func image(for key: Swift.String) -> UIKit.UIImage?
  @objc(imageURLForKey:) public func imageURL(for key: Swift.String) -> Foundation.URL?
  @objc(removeImageForKey:) public func removeImage(for key: Swift.String)
  @objc(removeImagesForKeysMatchingPrefix:) public func removeImages(matchingPrefix prefix: Swift.String)
  @objc(removeAllImages) public func removeAll()
  @objc public func waitUntilWritingCompleted()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2ArOverlayPolygonConfiguration) @objcMembers public class SBSDKUI2ArOverlayPolygonConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var deselected: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle
  @objc public var selected: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayPolygonConfiguration?
  @objc public init(visible: Swift.Bool = true, deselected: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle = SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false),
                                         fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                  isArgb: false),
                                         strokeWidth: 2.0, cornerRadius: 2.0), selected: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle = SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPositive", isArgb: false),
                                         fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                  isArgb: false),
                                         strokeWidth: 2.0, cornerRadius: 2.0))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc(SBSDKUI2BarcodeItemInfoPosition) public enum SBSDKUI2BarcodeItemInfoPosition : Swift.Int, Swift.Codable {
  case disabled
  case stacked
  case below
  case above
  @_documentation(visibility: internal) public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2BarcodeItemConfiguration) @objcMembers public class SBSDKUI2BarcodeItemConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var imageVisible: Swift.Bool
  @objc public var titleSelected: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var subtitleSelected: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var titleDeselected: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var subtitleDeselected: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText
  @objc public var backgroundSelected: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle
  @objc public var backgroundDeselected: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemConfiguration?
  @objc public init(imageVisible: Swift.Bool = true, titleSelected: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "BARCODE_TITLE",
                                                                       color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                            isArgb: false)), subtitleSelected: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "BARCODE_SUBTITLE",
                                                                          color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                               isArgb: false)), titleDeselected: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "BARCODE_TITLE",
                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                              isArgb: false)), subtitleDeselected: ScanbotBarcodeScannerSDK.SBSDKUI2StyledText = SBSDKUI2StyledText(text: "BARCODE_SUBTITLE",
                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                 isArgb: false)), backgroundSelected: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle = SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPositive", isArgb: false),
                                         fillColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                  isArgb: false),
                                         strokeWidth: 0.0, cornerRadius: 10.0), backgroundDeselected: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle = SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false),
                                         fillColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                  isArgb: false),
                                         strokeWidth: 0.0, cornerRadius: 10.0))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2ArOverlayGeneralConfiguration) @objcMembers public class SBSDKUI2ArOverlayGeneralConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var counterBadge: ScanbotBarcodeScannerSDK.SBSDKUI2BadgeStyle
  @objc public var automaticSelectionEnabled: Swift.Bool
  @objc public var barcodeItemInfoPosition: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemInfoPosition
  @objc public var polygon: ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayPolygonConfiguration
  @objc public var barcodeItemConfiguration: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemConfiguration
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayGeneralConfiguration?
  @objc public init(visible: Swift.Bool = false, counterBadge: ScanbotBarcodeScannerSDK.SBSDKUI2BadgeStyle = SBSDKUI2BadgeStyle(background: SBSDKUI2BackgroundStyle(),
                                                                      foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                     isArgb: false)), automaticSelectionEnabled: Swift.Bool = false, barcodeItemInfoPosition: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemInfoPosition = SBSDKUI2BarcodeItemInfoPosition.below, polygon: ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayPolygonConfiguration = SBSDKUI2ArOverlayPolygonConfiguration(visible: true,
                                                                                                       deselected: SBSDKUI2PolygonStyle(),
                                                                                                       selected: SBSDKUI2PolygonStyle()), barcodeItemConfiguration: ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemConfiguration = SBSDKUI2BarcodeItemConfiguration(imageVisible: true,
                                                     titleSelected: SBSDKUI2StyledText(text: "BARCODE_TITLE",
                                                                                       color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                            isArgb: false)),
                                                     subtitleSelected: SBSDKUI2StyledText(text: "BARCODE_SUBTITLE",
                                                                                          color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                               isArgb: false)),
                                                     titleDeselected: SBSDKUI2StyledText(text: "BARCODE_TITLE",
                                                                                         color: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                              isArgb: false)),
                                                     subtitleDeselected: SBSDKUI2StyledText(text: "BARCODE_SUBTITLE",
                                                                                            color: SBSDKUI2Color(colorString: "?sbColorOnSurfaceVariant",
                                                                                                                 isArgb: false)),
                                                     backgroundSelected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                         isArgb: false),
                                                                                              fillColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                       isArgb: false),
                                                                                              strokeWidth: 1.0,
                                                                                              cornerRadius: 5.0),
                                                     backgroundDeselected: SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                           isArgb: false),
                                                                                                fillColor: SBSDKUI2Color(colorString: "?sbColorSurface",
                                                                                                                         isArgb: false),
                                                                                                strokeWidth: 1.0,
                                                                                                cornerRadius: 5.0)))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2FindAndPickArOverlayPolygonConfiguration) @objcMembers public class SBSDKUI2FindAndPickArOverlayPolygonConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var partiallyScanned: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle
  @objc public var rejected: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle
  @objc public var completed: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2FindAndPickArOverlayPolygonConfiguration?
  @objc public init(visible: Swift.Bool = true, partiallyScanned: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle = SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorWarning", isArgb: false),
                                         fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                  isArgb: false),
                                         strokeWidth: 3.0, cornerRadius: 5.0), rejected: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle = SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorSurface", isArgb: false),
                                         fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                  isArgb: false),
                                         strokeWidth: 3.0, cornerRadius: 5.0), completed: ScanbotBarcodeScannerSDK.SBSDKUI2PolygonStyle = SBSDKUI2PolygonStyle(strokeColor: SBSDKUI2Color(colorString: "?sbColorPositive", isArgb: false),
                                         fillColor: SBSDKUI2Color(colorString: "#00000000",
                                                                  isArgb: false),
                                         strokeWidth: 3.0, cornerRadius: 5.0))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2FindAndPickBadgeConfiguration) @objcMembers public class SBSDKUI2FindAndPickBadgeConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var partiallyScanned: ScanbotBarcodeScannerSDK.SBSDKUI2BadgeStyle
  @objc public var rejected: ScanbotBarcodeScannerSDK.SBSDKUI2BadgeStyle
  @objc public var completed: ScanbotBarcodeScannerSDK.SBSDKUI2BadgeStyle
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2FindAndPickBadgeConfiguration?
  @objc public init(partiallyScanned: ScanbotBarcodeScannerSDK.SBSDKUI2BadgeStyle = SBSDKUI2BadgeStyle(visible: true,
                                                                          background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#FFFFFF30",
                                                                                                                                         isArgb: false),
                                                                                                              fillColor: SBSDKUI2Color(colorString: "?sbColorWarning",
                                                                                                                                       isArgb: false),
                                                                                                              strokeWidth: 0.0),
                                                                          foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                         isArgb: false)), rejected: ScanbotBarcodeScannerSDK.SBSDKUI2BadgeStyle = SBSDKUI2BadgeStyle(visible: true,
                                                                  background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#FFFFFF30",
                                                                                                                                 isArgb: false),
                                                                                                      fillColor: SBSDKUI2Color(colorString: "?sbColorNegative",
                                                                                                                               isArgb: false),
                                                                                                      strokeWidth: 0.0),
                                                                  foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                 isArgb: false)), completed: ScanbotBarcodeScannerSDK.SBSDKUI2BadgeStyle = SBSDKUI2BadgeStyle(visible: true,
                                                                   background: SBSDKUI2BackgroundStyle(strokeColor: SBSDKUI2Color(colorString: "#FFFFFF30",
                                                                                                                                  isArgb: false),
                                                                                                       fillColor: SBSDKUI2Color(colorString: "?sbColorPositive",
                                                                                                                                isArgb: false),
                                                                                                       strokeWidth: 0.0),
                                                                   foregroundColor: SBSDKUI2Color(colorString: "?sbColorOnSurface",
                                                                                                  isArgb: false)))
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBSDKUI2ArOverlayFindAndPickConfiguration) @objcMembers public class SBSDKUI2ArOverlayFindAndPickConfiguration : ScanbotBarcodeScannerSDK.SBSDKUI2Node, Swift.Codable {
  @objc public var visible: Swift.Bool
  @objc public var automaticSelectionEnabled: Swift.Bool
  @objc public var polygon: ScanbotBarcodeScannerSDK.SBSDKUI2FindAndPickArOverlayPolygonConfiguration
  @objc public var badge: ScanbotBarcodeScannerSDK.SBSDKUI2FindAndPickBadgeConfiguration
  @_documentation(visibility: internal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_documentation(visibility: internal) @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @_documentation(visibility: internal) @objc public class func fromJson(json: Swift.String) -> ScanbotBarcodeScannerSDK.SBSDKUI2ArOverlayFindAndPickConfiguration?
  @objc public init(visible: Swift.Bool = false, automaticSelectionEnabled: Swift.Bool = true, polygon: ScanbotBarcodeScannerSDK.SBSDKUI2FindAndPickArOverlayPolygonConfiguration = SBSDKUI2FindAndPickArOverlayPolygonConfiguration(), badge: ScanbotBarcodeScannerSDK.SBSDKUI2FindAndPickBadgeConfiguration = SBSDKUI2FindAndPickBadgeConfiguration())
  @objc convenience override dynamic public init()
  @objc public func toJson() -> Swift.String
  convenience required public init(from decoder: any Swift.Decoder) throws
  @_documentation(visibility: internal) public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SBSDKBaseScannerGeneralConfiguration : ObjectiveC.NSObject {
  @objc public var videoFrameResolution: ScanbotBarcodeScannerSDK.SBSDKVideoFrameResolution
  @objc public var videoContentMode: ScanbotBarcodeScannerSDK.SBSDKVideoContentMode
  @objc public var videoFlipMode: ScanbotBarcodeScannerSDK.SBSDKVideoFlipMode
  @objc public var photoQualityPrioritization: ScanbotBarcodeScannerSDK.SBSDKCapturePhotoQualityPrioritization
  @objc public var stopsCameraSessionWhenDisappeared: Swift.Bool
  @objc public var initialScanDelay: Swift.Double
  @objc public var isFocusLockEnabled: Swift.Bool
  @objc public var focusLockPosition: CoreFoundation.CGFloat
  @objc public var playFlashAnimation: Swift.Bool
  @objc public var minimumTimeWithoutDeviceMotionBeforeDetection: Swift.Double
  @objc public static var defaultConfiguration: ScanbotBarcodeScannerSDK.SBSDKBaseScannerGeneralConfiguration {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension ScanbotBarcodeScannerSDK.SBSDKFeature : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKFeature : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKFeature : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKImageFileFormat : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKImageFileFormat : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKImageFileFormat : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKScannerStatus : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKScannerStatus : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKScannerStatus : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField.ValidationStatus : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField.ValidationStatus : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocumentField.ValidationStatus : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeOverlayFormat : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeOverlayFormat : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeOverlayFormat : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeUseCase : Swift.Decodable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2SoundType : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2SoundType : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2SoundType : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKOrientationLock : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKOrientationLock : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKOrientationLock : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeEngineMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeEngineMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeEngineMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountCaptureMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountCaptureMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeScanAndCountCaptureMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKAESEncrypterMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKAESEncrypterMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKAESEncrypterMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2OrientationLockMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2OrientationLockMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2OrientationLockMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2CameraPreviewMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2CameraPreviewMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2CameraPreviewMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKFinderView.Style : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKFinderView.Style : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKFinderView.Style : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocumentCommonFieldType : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocumentCommonFieldType : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocumentCommonFieldType : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2MultipleBarcodesScanningMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2MultipleBarcodesScanningMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2MultipleBarcodesScanningMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2SheetMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2SheetMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2SheetMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2CollapsedVisibleHeight : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2CollapsedVisibleHeight : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2CollapsedVisibleHeight : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKVideoFlipMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKVideoFlipMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKVideoFlipMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKCameraDevicePosition : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKCameraDevicePosition : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKCameraDevicePosition : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKCameraDeviceType : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKCameraDeviceType : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKCameraDeviceType : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeScannerView : Swift.Sendable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2StatusBarMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2StatusBarMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2StatusBarMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2TopBarMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2TopBarMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2TopBarMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKVideoContentMode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKVideoContentMode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKVideoContentMode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKErrorCode : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKErrorCode : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKErrorCode : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKVideoFrameResolution : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKVideoFrameResolution : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKVideoFrameResolution : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeDialogFormat : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeDialogFormat : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeDialogFormat : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKSoundType : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKSoundType : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKSoundType : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2FinderStyle : Swift.Decodable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2CameraModule : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2CameraModule : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2CameraModule : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodesExtensionFilter : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodesExtensionFilter : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodesExtensionFilter : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2Gs1Handling : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2Gs1Handling : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2Gs1Handling : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2MSIPlesseyChecksumAlgorithm : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2MSIPlesseyChecksumAlgorithm : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2MSIPlesseyChecksumAlgorithm : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2AustraliaPostCustomerFormat : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2AustraliaPostCustomerFormat : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2AustraliaPostCustomerFormat : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldDisplayState.Value : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldDisplayState.Value : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKGenericDocumentFieldDisplayState.Value : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKApplicationState : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKApplicationState : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKApplicationState : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeMSIPlesseyChecksumAlgorithm : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeMSIPlesseyChecksumAlgorithm : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeMSIPlesseyChecksumAlgorithm : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKAustraliaPostCustomerFormat : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKAustraliaPostCustomerFormat : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKAustraliaPostCustomerFormat : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKGS1Handling : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKGS1Handling : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKGS1Handling : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKPolygonEdgeOrientation : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKPolygonEdgeOrientation : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKPolygonEdgeOrientation : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKLicenseStatus : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKLicenseStatus : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKLicenseStatus : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeImageGenerationType : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeImageGenerationType : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKBarcodeImageGenerationType : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKCapturePhotoQualityPrioritization : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKCapturePhotoQualityPrioritization : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKCapturePhotoQualityPrioritization : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodesExtensionFilter : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodesExtensionFilter : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodesExtensionFilter : Swift.RawRepresentable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemInfoPosition : Swift.Equatable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemInfoPosition : Swift.Hashable {}
extension ScanbotBarcodeScannerSDK.SBSDKUI2BarcodeItemInfoPosition : Swift.RawRepresentable {}
