#if 0
#elif 1
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef SCANBOTBARCODESCANNERSDK_SWIFT_H
#define SCANBOTBARCODESCANNERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreMedia;
@import CoreVideo;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ScanbotBarcodeScannerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

enum SBSDKErrorCode : NSInteger;

@interface NSError (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
+ (NSError * _Nonnull)errorWithCode:(enum SBSDKErrorCode)code SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;

/// Protocol for implementing encryption and decryption of (streamed) data.
/// ScanbotSDK comes with a built-in AES encryptor that currently supports AES128 and AES256. If these algorithms
/// are not meeting your requirements you can create and use your own encryption classes in ScanbotSDKs image storages
/// by simply conforming to this protocol and implementing the two methods.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK20SBSDKStorageCrypting_")
@protocol SBSDKStorageCrypting
- (NSData * _Nonnull)encryptData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)decryptData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (BOOL)beginStreamingEncrypt SWIFT_WARN_UNUSED_RESULT;
- (BOOL)beginStreamingDecrypt SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)streamingCryptChunk:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)streamingCryptComplete SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;
enum SBSDKAESEncrypterMode : NSInteger;

/// ScanbotSDK’s default data encrypter. Provides AES128 and AES 256 encryption to your data.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK17SBSDKAESEncrypter")
@interface SBSDKAESEncrypter : NSObject <SBSDKStorageCrypting>
/// The key used for encryption and decryption of the data. It is being derived from the
/// given password, the salt and the iterations using the PBKDF2 function.
/// https://en.wikipedia.org/wiki/PBKDF2
/// For decryption you can use this key directly or generate it using salt, password and the number of iterations.
/// Readonly.
@property (nonatomic, readonly, copy) NSData * _Null_unspecified key;
/// The encryption initialization vector.
/// A fixed value that is needed for decryption on the backend side.
@property (nonatomic, readonly, copy) NSData * _Nonnull iv;
/// The salt data used to derive the encryption key from the password.
/// A fixed value that may be needed for manual decryption key derivation on the backend side.
/// Readonly.
@property (nonatomic, readonly, copy) NSData * _Nonnull salt;
/// The number of iterations used to derive the encryption key from the salt data and the password.
/// A fixed value that may be needed for manual decryption key derivation on the backend side.
/// Readonly.
@property (nonatomic, readonly) NSInteger iterations;
/// Required initializer.
/// Creates a new AES encrypter/decrypter with either AES128 or AES256 encryption.
/// The encryption/decryption key is derived from the password, the salt and the number of iterations
/// using the PBKDF2 function. See https://en.wikipedia.org/wiki/PBKDF2
/// \param password The password phrase used to encrypt or decrypt the data. See notes in class info.
///
/// \param mode The value of  <code>SBSDKAESEncrypterMode</code> that specifies the AES encryption mode to be used.
///
- (nullable instancetype)initWithPassword:(NSString * _Nonnull)password mode:(enum SBSDKAESEncrypterMode)mode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (NSData * _Nonnull)decryptData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)encryptData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (BOOL)beginStreamingEncrypt SWIFT_WARN_UNUSED_RESULT;
- (BOOL)beginStreamingDecrypt SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)streamingCryptChunk:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)streamingCryptComplete SWIFT_WARN_UNUSED_RESULT;
@end

/// An enum containing the available encryption modes for the <code>SBSDKAESEncrypter</code>.
typedef SWIFT_ENUM(NSInteger, SBSDKAESEncrypterMode, open) {
/// AES128 mode with a key length of 16 bytes. Secure and fast.
  SBSDKAESEncrypterModeAES128 = 0,
/// AES256 mode with a key length of 32 bytes. More secure, but slower.
  SBSDKAESEncrypterModeAES256 = 1,
};

/// An enum describing the current state of the app.
typedef SWIFT_ENUM(NSInteger, SBSDKApplicationState, open) {
/// The app is active and in foreground.
  SBSDKApplicationStateActive = 0,
/// The app is inactive and in background.
  SBSDKApplicationStateInactive = 1,
/// The app is in background.
  SBSDKApplicationStateBackground = 2,
};


/// A class that describes an aspect ratio for a document page.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK16SBSDKAspectRatio")
@interface SBSDKAspectRatio : NSObject
/// The width of the document page. Unit independent
@property (nonatomic, readonly) double width;
/// The height of the document page. Unit independent.
@property (nonatomic, readonly) double height;
/// The aspect ratio of the receiver expressed as a <code>Double</code> value of width divided by height.
@property (nonatomic, readonly) double ratio;
/// Designated initializer.
/// \param width The width of the document page.
///
/// \param height The height of the document page.
///
- (nonnull instancetype)initWithWidth:(double)width andHeight:(double)height OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end

/// The format of the australia post code. Can be <code>numeric</code> or <code>alphanumeric</code>.
/// Only relevant for format codes 59 and 62.
typedef SWIFT_ENUM(NSInteger, SBSDKAustraliaPostCustomerFormat, open) {
/// The numeric format.
  SBSDKAustraliaPostCustomerFormatNumeric = 1,
/// The alphanumeric format.
  SBSDKAustraliaPostCustomerFormatAlphanumeric = 2,
};

enum SBSDKBarcodeMSIPlesseyChecksumAlgorithm : NSInteger;
enum SBSDKGS1Handling : NSInteger;

/// A class that contains additional parameters for barcodes detection and filtering.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK32SBSDKBarcodeAdditionalParameters")
@interface SBSDKBarcodeAdditionalParameters : NSObject
/// Minimum required text length of the detected barcode.
/// Defaults to 0.
/// note:
/// Currently works for ITF and MSI Plessey barcodes only!
@property (nonatomic) NSUInteger minimumTextLength;
/// Maximum text length of the detected barcode. Setting to zero removes the limit.
/// Defaults to 0.
/// note:
/// Currently works for ITF and MSI Plessey barcodes only!
@property (nonatomic) NSUInteger maximumTextLength;
/// Minimum required quiet zone on the barcode. Measured in modules (the size of minimal bar on the barcode).
/// Defaults to 10.
/// NOTE: Currently works for ITF and MSI Plessey barcodes only!
@property (nonatomic) NSUInteger minimum1DBarcodesQuietZone;
/// The checksum algorithm for MSI Plessey barcodes.
/// Defaults to <code>SBSDKBarcodeMSIPlesseyChecksumAlgorithm/mod10</code>.
@property (nonatomic) enum SBSDKBarcodeMSIPlesseyChecksumAlgorithm msiPlesseyChecksumAlgorithm;
/// The australia post customer format.
/// Defaults to <code>SBSDKAustraliaPostCustomerFormat/alphanumeric</code>.
@property (nonatomic) enum SBSDKAustraliaPostCustomerFormat australiaPostCustomerFormat;
/// With this option enabled, the scanner removes checks digits for UPC, EAN and MSI Plessey codes.
/// Has no effect if both single and double digit MSI Plessey checksums are enabled.
/// Defaults to <code>False</code>.
@property (nonatomic) BOOL stripCheckDigits;
/// If <code>True</code>, the optional check digit for IATA2OF5 codes is used in validation. Defaults to <code>True</code>.
@property (nonatomic) BOOL useIATA2OF5Checksum;
/// If <code>True</code>, the optional check digit for Code11 codes is used in validation. Defaults to <code>True</code>.
@property (nonatomic) BOOL useCode11Checksum;
/// Defines how GS1-formatted barcodes are handled.
/// Defaults to <code>SBSDKGS1Handling/parse</code>.
@property (nonatomic) enum SBSDKGS1Handling gs1Handling;
/// Adds an additional quiet zone around the source image.
/// Defaults to ‘false’.
@property (nonatomic) BOOL addAdditionalQuietZone;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The barcode dialog text format.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeDialogFormat, open) {
/// Shows the barcode value only.
  SBSDKBarcodeDialogFormatCode = 0,
/// Shows the barcode type and value.
  SBSDKBarcodeDialogFormatTypeAndCode = 1,
};

@class SBSDKGenericDocument;

/// Base class for strongly-typed <code>SBSDKGenericDocument</code> wrappers.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKGenericDocumentWrapper")
@interface SBSDKGenericDocumentWrapper : NSObject
/// The required type of the wrapped document. <code>nil</code> if this wrapper can wrap more than one type of document.
@property (nonatomic, readonly, copy) NSString * _Nullable requiredDocumentType;
/// The wrapped generic document.
@property (nonatomic, readonly, strong) SBSDKGenericDocument * _Nonnull document;
/// Initializes a new wrapper of the given document.
/// note:
/// Returns <code>nil</code> if <code>SBSDKGenericDocumentWrapper/requiredDocumentType</code> is not <code>nil</code> and is not equal to the document’s type name.
/// \param document The wrapped document.
///
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBSDKGenericDocumentField;
@class SBSDKBarcodeDocumentAAMVATitleData;
@class SBSDKBarcodeDocumentAAMVARegistrationData;
@class SBSDKBarcodeDocumentAAMVAMotorCarrierData;
@class SBSDKBarcodeDocumentAAMVARegistrantAndVehicleData;
@class SBSDKBarcodeDocumentAAMVAVehicleOwnerData;
@class SBSDKBarcodeDocumentAAMVAVehicleData;
@class SBSDKBarcodeDocumentAAMVAVehicleSafetyInspectionData;
@class SBSDKBarcodeDocumentAAMVADLID;
@class SBSDKBarcodeDocumentAAMVARawDocument;

/// AAMVA.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK25SBSDKBarcodeDocumentAAMVA")
@interface SBSDKBarcodeDocumentAAMVA : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Issuer Identification Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable issuerIdentificationNumber;
/// Jurisdiction Version Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionVersionNumber;
/// Version.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable version;
/// TitleData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVATitleData * _Nullable titleData;
/// RegistrationData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVARegistrationData * _Nullable registrationData;
/// MotorCarrierData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVAMotorCarrierData * _Nullable motorCarrierData;
/// RegistrantAndVehicleData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVARegistrantAndVehicleData * _Nullable registrantAndVehicleData;
/// VehicleOwnerData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVAVehicleOwnerData * _Nullable vehicleOwnerData;
/// VehicleData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVAVehicleData * _Nullable vehicleData;
/// VehicleSafetyInspectionData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVAVehicleSafetyInspectionData * _Nullable vehicleSafetyInspectionData;
/// DriverLicense.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVADLID * _Nullable driverLicense;
/// IDCard.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVADLID * _Nullable idCard;
/// EnhancedDriverLicense.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVADLID * _Nullable enhancedDriverLicense;
/// RawDocument.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVARawDocument * _Nullable rawDocument;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Driver License Or ID Document.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK29SBSDKBarcodeDocumentAAMVADLID")
@interface SBSDKBarcodeDocumentAAMVADLID : SBSDKGenericDocumentWrapper
/// Data element ID “DAI”. City portion of the cardholder address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressCity;
/// Data element ID “DAJ”. State portion of the cardholder address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressJurisdictionCode;
/// Data element ID “DAK”. Postal code portion of the cardholder address in the U.S. and Canada. If the trailing portion of the postal code in the U.S. is not known, zeros will be used to fill the trailing set of numbers up to nine (9) digits.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressPostalCode;
/// Data element ID “DAG”. Street portion of the cardholder address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressStreet1;
/// Data element ID “DAH”. Second line of street portion of the cardholder address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressStreet2;
/// Data element ID “DCJ”. A string of letters and/or numbers that identifies when, where, and by whom a driver license/ID card was made. If audit information is not used on the card or the MRT, it must be included in the driver record.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable adultInformation;
/// Data element ID “DBN”. Other family name by which cardholder is known.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable aliasFamilyName;
/// Data element ID “DBG”. Other given name by which cardholder is known.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable aliasGivenName;
/// Data element ID “DBQ”. Other middle name by which cardholder is known.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable aliasMiddleName;
/// Data element ID “DBR”. Other prefix by which cardholder is known.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable aliasPrefixName;
/// Data element ID “DBS”. Other suffix by which cardholder is known.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable aliasSuffixName;
/// Data element ID “DDB”. DHS required field that indicates date of the most recent version change or modification to the visible format of the DL/ID. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable cardRevisionDate;
/// Data element ID “DDA”. DHS required field that indicates compliance: “F” = compliant; and, “N” = non-compliant.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable complianceType;
/// Data element ID “DCG”. Country in which DL/ID is issued. U.S. = USA, Canada = CAN.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable countryIdentification;
/// Data element ID “DCS”. Family name of the cardholder. (Family name is sometimes also called “last name” or “surname.”) Collect full name for record, print as many characters as possible on portrait side of DL/ID.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable customerFamilyName;
/// Data element ID “DAC”. First name of the cardholder.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable customerFirstName;
/// Data element ID “DCT”. Given names of the cardholder. (Given names include all names other than the Family Name. This includes all those names sometimes also called “first” and “middle” names.)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable customerGivenNames;
/// Data element ID “DAQ”. The number assigned or calculated by the issuing authority.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable customerIdNumber;
/// Data element ID “DAD”. Middle name(s) of the cardholder. In the case of multiple middle names they shall be separated by a comma “,”.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable customerMiddleName;
/// Data element ID “DBB”. Date on which the cardholder was born. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateOfBirth;
/// Data element ID “DCF”. Number must uniquely identify a particular document issued to that customer from others that may have been issued in the past. This number may serve multiple purposes of document discrimination, audit information number, and/or inventory control.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentDiscriminator;
/// Data element ID “DBA”. Date on which the driving and identification privileges granted by the document are no longer valid. The format is ISO8601 with delimtiers.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentExpirationDate;
/// Data element ID “DBD”. Date on which the document was issued. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentIssueDate;
/// Data element ID “DBL”. Alternative dates given as date of birth.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverAliasDateOfBirthField;
/// Data element ID “DBP”. Alternative fist name or given name of the individual holding the Driver License or ID. Hyphenated names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverAliasFirstName;
/// Data element ID “DBO”. Alternative last name or surname of the individual holding the Driver License or ID. Hyphenated names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverAliasLastName;
/// Data element ID “DBM”. DriverAliasSocialSecurityNumber.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverAliasSocialSecurityNumber;
/// Data element ID “DAB”. Last name or surname of the individual holding the Driver License or ID. Hyphenated names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverLastName;
/// Data element ID “DAR”. A=Class A; B=Class B; C=Class C (Class A, B and C are defined by Federal Highway regulations); M=Class M motorcycle as defined by AAMVA; others are defined by DL Classification Code Standards.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverLicenseClassificationCode;
/// Data element ID “DAT”. Any endorsements on a driver license which authorize the operation of specified types of vehicles or the operation of vehicles carrying specified loads. Endorsements shall be specific to classification of a driver license.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverLicenseEndorsementsCode;
/// Data element ID “DAA”. Name of the individual holding the Driver License or ID as defined in ANSI D20 Data Dictionary. (Lastname@Firstname@MI@ suffix if any) (Machine, Mag Stripe uses ‘$’ and Bar Code uses ‘,’ in place of ‘@’) Firstname, Middle Initial, Lastname (Human)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverLicenseName;
/// Data element ID “DAS”. A restriction applicable to a driver license.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverLicenseRestrictionCode;
/// Data element ID “DAF”. Prefix to Driver Name. Not defined in ANSI D20. Freeform as defined by issuing jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverNamePrefix;
/// Data element ID “DAE”. An affix occurring at the end of a word, e.g.; Sr., Jr., II, III, IV, etc.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverNameSuffix;
/// Data element ID “PAA”. Identifies the type of permit as defined by ANSI D20.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverPermitClassificationCode;
/// Data element ID “PAF”. Permit endorsements as defined by ANSI D20.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverPermitEndorsementCode;
/// Data element ID “PAD”.  Date permit was issued. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverPermitIssueDate;
/// Data element ID “PAE”. Permit restrictions as defined by ANSI D20.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverPermitRestrictionCode;
/// Data element ID “DAN”. Name of city for mailing address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverResidenceCity;
/// Data element ID “DAO”. Jurisdiction code for mailing address. Conforms to Canadian, Mexican and US Jurisdictions as appropriate. Codes for provinces (Canada) and states (US and Mexico).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverResidenceJurisdictionCode;
/// Data element ID “DAP”. Postal code of residence.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverResidencePostalCode;
/// Data element ID “DAL”. Street address line 1 (mailing).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverResidenceStreetAddress1;
/// Data element ID “DAM”. Street address line 2 (mailing).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverResidenceStreetAddress2;
/// Data element ID “DDE”. A code that indicates whether a field has been truncated (T), has not been truncated (N), or – unknown whether truncated (U).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable familyNameTruncation;
/// Data element ID “DCH”. Federal Commercial Vehicle Codes.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable federalCommercialVehicleCodes;
/// Data element ID “DDF”. A code that indicates whether a field has been truncated (T), has not been truncated (N), or – unknown whether truncated (U).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstNameTruncation;
/// Data element ID “DDC”. Date on which the hazardous material endorsement granted by the document is no longer valid. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable hazmatEndorsementExpirationDate;
/// Data element ID “DAZ”. Color of cardholder’s hair. ANSI D-20 codes converted to human readable format according to the ANSI D20 Data Dictionary.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable hairColor;
/// Data element ID “DAV”. Height in centimeters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable height;
/// Data element ID “DCK”. A string of letters and/or numbers that is affixed to the raw materials (card stock, laminate, etc.) used in producing driver licenses and ID cards. (DHS recommended field).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inventoryControlNumber;
/// Data element ID “DBE”. A string used by some jurisdictions to validate the document against their data base.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable issueTimeStamp;
/// Data element ID “DCQ”. Text that explains the jurisdiction-specific code(s) that indicates additional driving privileges granted to the cardholder beyond the vehicle class.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificEndorsementCodeDescription;
/// Data element ID “DCD”. Jurisdiction-specific codes that represent additional privileges granted to the cardholder beyond the vehicle class (such as transportation of passengers, hazardous materials, operation of motorcycles, etc.).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificEndorsementCodes;
/// Data element ID “DCR”. Text describing the jurisdiction-specific restriction code(s) that curtail driving privileges.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificRestrictionCodeDescription;
/// Data element ID “DCB”. Jurisdiction-specific codes that represent restrictions to driving privileges (such as airbrakes, automatic transmission, daylight only, etc.).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificRestrictionCodes;
/// Data element ID “DCA”. Jurisdiction-specific vehicle class / group code, designating the type of vehicle the cardholder has privilege to drive.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificVehicleClass;
/// Data element ID “DCP”. Text that explains the jurisdiction-specific code(s) for classifications of vehicles cardholder is authorized to drive.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificVehicleClassificationDescription;
/// Data element ID “DDD”. DHS required field that indicates that the cardholder has temporary lawful status = “1”.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable limitedDurationDocumentIndicator;
/// Data element ID “DDG”. A code that indicates whether a field has been truncated (T), has not been truncated (N), or – unknown whether truncated (U).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable middleNameTruncation;
/// Data element ID “DCU”. Name Suffix (If jurisdiction participates in systems requiring name suffix (PDPS, CDLIS, etc.), the suffix must be collected and displayed on the DL/ID and in the MRT). Collect full name for record, print as many characters as possible on portrait side of DL/ID. JR (Junior), SR (Senior), 1ST or I (First), 2ND or II (Second),  3RD or III (Third),  4TH or IV (Fourth), 5TH or V (Fifth), 6TH or VI (Sixth), 7TH or VII (Seventh), 8TH or VIII (Eighth), 9TH or IX (Ninth).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable nameSuffix;
/// Data element ID “DBI”. “Y”; Used by some jurisdictions to indicate holder of the document is a non-resident.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable nonResidentIndicator;
/// Data element ID “DBF”. Number of duplicate cards issued for a license or ID if any.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfDuplicates;
/// Data element ID “DBH”. Organ Donor.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable organDonor;
/// Data element ID “DDK”. Field that indicates that the cardholder is an organ donor = “1”.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable organDonorIndicator;
/// Data element ID “PAB”. Date permit expires, The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable permitExpirationDate;
/// Data element ID “PAC”. Type of permit.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable permitIdentifier;
/// Data element ID “DAY”. Color of cardholder’s eyes. ANSI D-20 codes converted to human readable format according to the ANSI D20 Data Dictionary.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable physicalDescriptionEyeColor;
/// Data element ID “DAU”. Height of cardholder. Inches (in): number of inches followed by “ in” or Centimeters (cm): number of centimeters followed by “ cm.”
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable physicalDescriptionHeight;
/// Data element ID “DBC”. Gender of the cardholder. “Male” or “Female”.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable physicalDescriptionSex;
/// Data element ID “DCE”. Indicates the approximate weight range of the cardholder: 0 = up to 31 kg (up to 70 lbs), 1 = 32 – 45 kg (71 – 100 lbs), 2 = 46 - 59 kg (101 – 130 lbs), 3 = 60 - 70 kg (131 – 160 lbs), 4 = 71 - 86 kg (161 – 190 lbs), 5 = 87 - 100 kg (191 – 220 lbs), 6 = 101 - 113 kg (221 – 250 lbs), 7 = 114 - 127 kg (251 – 280 lbs), 8 = 128 – 145 kg (281 – 320 lbs), 9 = 146+ kg (321+ lbs).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable physicalDescriptionWeightRange;
/// Data element ID “DCI”. Country and municipality and/or state/province.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable placeOfBirth;
/// Data element ID “DCL”. Codes for race or ethnicity of the cardholder. ANSI D-20 codes converted to human readable format according to the ANSI D20 Data Dictionary.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable raceEthnicity;
/// Data element ID “DBK”. The number assigned to an individual by the Social Security Administration.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable socialSecurityNumber;
/// Data element ID “DCN”. Standard endorsement code(s) for cardholder. See codes in D20. This data element is a placeholder for future efforts to standardize endorsement codes.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable standardEndorsementCode;
/// Data element ID “DCO”. Standard restriction code(s) for cardholder. See codes in D20. This data element is a placeholder for future efforts to standardize restriction codes.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable standardRestrictionCode;
/// Data element ID “DCM”. Standard vehicle classification code(s) for cardholder. This data element is a placeholder for future efforts to standardize vehicle classifications.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable standardVehicleClassification;
/// Data element ID “DDH”. Date on which the cardholder turns 18 years old. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable under18Until;
/// Data element ID “DDI”. Date on which the cardholder turns 19 years old. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable under19Until;
/// Data element ID “DDJ”. Date on which the cardholder turns 21 years old. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable under21Until;
/// Data element ID “DBJ”. A number or alphanumeric string used by some jurisdictions to identify a “customer” across multiple data bases.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable uniqueCustomerIdentifier;
/// Data element ID “DDL”. Field that indicates that the cardholder is a veteran = “1”.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable veteranIndicator;
/// Data element ID “DAX”. Cardholder weight in kilograms Ex. 84 kg = “084”
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable weightKilograms;
/// Data element ID “DAW”. Cardholder weight in pounds Ex. 185 lb = “185”
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable weightPounds;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Motor Carrier Data. File type “MC”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK41SBSDKBarcodeDocumentAAMVAMotorCarrierData")
@interface SBSDKBarcodeDocumentAAMVAMotorCarrierData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “MAA”. The name of the carrier responsible for safety. This can be an individual, partnership or corporation responsible for the transportation of persons or property. This is the name that is recognized by law.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable carrierName;
/// Data element ID “MAL”. This is the city for the mailing address of the individual carrier. This information is utilized by the base jurisdiction to send information to the carrier that purchased the IRP credentials.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable city;
/// Data element ID “MAI”. This is the jurisdiction of the residential address of the individual carrier. This information is utilized by the base jurisdiction to send information to the carrier that purchased the IRP credentials.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdiction;
/// Data element ID “MAK”. This is the mailing address of the individual carrier. This information is utilized by the base jurisdiction to send information to the carrier that purchased the IRP credentials.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable streetAddress;
/// Data element ID “MAN”. A unique identifier assigned to the carrier responsible for safety issued by the U.S. Department of Transportation – Federal Motor Carrier Safety Administration.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable usdotNumber;
/// Data element ID “MAO”. The ZIP or Postal code of the resident address of the vehicle owner.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable zip;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// The raw document as was parsed from the barcode. The original field key names and field values as they appear in the barcode are left as-is. The mnemonic field keys from the AAMVA specification are not replaced with human-readable names. No field value normalization, like ISO 8601 date reformatting, etc., is done.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKBarcodeDocumentAAMVARawDocument")
@interface SBSDKBarcodeDocumentAAMVARawDocument : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Registrant And Vehicle Data. File type “IR”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK49SBSDKBarcodeDocumentAAMVARegistrantAndVehicleData")
@interface SBSDKBarcodeDocumentAAMVARegistrantAndVehicleData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “RBI”. The first line of the registrant’s residence address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable address;
/// Data element ID “RAU”. The declared base jurisdiction registration weight.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable baseJurisdictionRegisteredWeight;
/// Data element ID “RBC”. The name of the first registrant of a vehicle. Registrant’s name may be a combined individual name or the name of a business.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable carrierNameRegistrant;
/// Data element ID “RBK”. The registrant’s residence city name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable city;
/// Data element ID “VAT”. The unladen weight of the vehicle (e.g., single-unit truck, truck combination) plus the weight of the maximum load for which vehicle registration fees have been paid within a particular jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable grossVehicleWeight;
/// Data element ID “RBL”. The state or province of the registrant’s residence address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdiction;
/// Data element ID “VAL”. The year which is assigned to a vehicle by the manufacturer. The format is YY.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable modelYear;
/// Data element IDs “RAP”, “VBC”. The seat capacity of a commercial vehicle designed for transportation of more than then passengers. The number of common axles of rotation of one or more wheels of a vehicle, whether power design or freely rotating.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfSeats;
/// Data element ID “RAD”. The number assigned to the registration decal in those jurisdictions that issue decals.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationDecalNumber;
/// Data element ID “RAF”. The registration enforcement date is the date that the current registration was enforced. This may or may not be the original registration date. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationEnforcementDate;
/// Data element ID “RAG”. The date in which the registration expired. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationExpirationDate;
/// Data element ID “IFJ”. The date in which the registration was issued. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationIssueDate;
/// Data element ID “RAM”. The characters assigned to a registration plate or tag affixed to the vehicle, assigned by the jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationPlateNumber;
/// Data element ID “RBT”. This field is the registration year assigned by the jurisdiction. The format is CCYY.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationYear;
/// Data element ID “VBB”. The type of vehicle operated for the transportation of persons or property in the furtherance of any commercial or industrial enterprise, for hire or not for hire. Not all states will use all values.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable typeOfVehicle;
/// Data element ID “IEG”. A number, assigned by the registrant of the commercial vehicle or trailer, to identify the vehicle or trailer in the fleet. No two units in a fleet can have the same number. A.K.A vehicle unit number or owner’s equipment number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable unitNumber;
/// Data element ID “VAD”. A unique combination of alphanumeric characters that identifies a specific vehicle or component. The VIN is affixed to the vehicle in specific locations and formulated by the manufacturer. State agencies under some controlled instances may assign a VIN to a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleIdentificationNumber;
/// Data element ID “VAK”. The distinctive (coded) name applied to a group of vehicles by a manufacturer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleMake;
/// Data element ID “RBM”. The ZIP or Postal code of the resident address of the registrant.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable zipCode;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Registration Data. File type “RG”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK41SBSDKBarcodeDocumentAAMVARegistrationData")
@interface SBSDKBarcodeDocumentAAMVARegistrationData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “RBK”. City portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressCity;
/// Data element ID “RBL”. Jurisdiction portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressJurisdictionCode;
/// Data element ID “RBI”. Street portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressStreet;
/// Data element ID “RBM”. The Zip code or Postal code of the vehicle owner’s residence address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressZipCode;
/// Data element ID “VBC”. The number of common axles of rotation of one or more wheels of a vehicle, whether power driven or freely rotating.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable axles;
/// Data element ID “BBC”. The business name of the first registrant of a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable businessName;
/// Data element ID “FUL”. The type of fuel used by the vehicle. In most cases, the fuel type would be diesel.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable fuel;
/// Data element ID “VAT”. The unladen weight of the vehicle (e.g., the single-unit truck, truck combination) plus the weight of the load being carried at a specific point in time.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable grossVehicleWeight;
/// Data element ID “RBD”. Family name (commonly called surname or last name) of the registered owner of a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrantFamilyName;
/// Data element ID “RBE”. Given name or names (includes all of what are commonly referred to as first and middle names) of the registered owner of a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrantGivenName;
/// Data element ID “RAG”. The date in which the registration expired. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationExpiryDate;
/// Data element ID “RBB”. The date in which the registration was issued. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationIssueDate;
/// Data element ID “RAM”. The characters assigned to a registration plate or tag affixed to the vehicle, assigned by the jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationPlateNumber;
/// Data element ID “RBU”. A unique number printed on the tab/decal and stored as part of the registration record.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationWindowStickerDecal;
/// Data element ID “RBT”. The year of registration.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationYear;
/// Data element ID “VAO”. The general configuration or shape of a vehicle distinguished by characteristics such as number of doors, seats, windows, roofline, and type of top. The vehicle body type is 2-character alphanumeric.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleBodyStyle;
/// Data element ID “VBD”. Where the vehicle is one color, this is the appropriate code describing that color. When the vehicle is two colors, this is the code for the top-most or front-most color.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleColor;
/// Data element ID “VAD”. A unique combination of alphanumeric characters that identifies a specific vehicle or component. The VIN is affixed to the vehicle in specific locations and formulated by the manufacturer. State agencies under some controlled instances my assign a VIN to a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleIdentificationNumber;
/// Data element ID “VAK”. The distinctive (coded) name applied to a group of vehicles by a manufacturer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleMake;
/// Data element ID “VAM”. A code denoting a family of vehicles (within a make), which has a degree of similarity in construction, such as body, chassis, etc. The field does not necessarily contain a standard code; it may contain a value provided by the originator of the field.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModel;
/// Data element ID “VAL”. The year which is assigned to a vehicle by the manufacturer. The format is CCYY.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModelYear;
/// Data element ID “VPC”. Indicates the use of the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleUse;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Title Data. File type “TD”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK34SBSDKBarcodeDocumentAAMVATitleData")
@interface SBSDKBarcodeDocumentAAMVATitleData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “NAT”. City portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressCity;
/// Data element ID “NAU”. Jurisdiction portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressJurisdictionCode;
/// Data element ID “NAR”. Street portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressStreet;
/// Data element ID “NAV”. The ZIP code or Postal code portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressZipCode;
/// Data element ID “BBC”. The name of business that owns the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable businessName;
/// Data element ID “NAA”. Family name (commonly called surname or last name) of the owner of the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable familyName;
/// Data element ID “LAF”. A code that uniquely identifies the first holder of a lien.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstLienHolderId;
/// Data element ID “LAA”. Name of the first lien holder of the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstLienHolderName;
/// Data element ID “NAE”. Given name or names (includes all of what are commonly referred to as first and middle names) of the owner of the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable givenName;
/// Data element ID “TAW”. This code represents whether the vehicle/vessel is new or used. Note: jurisdictions’ definitions of these classifications may vary a little due to state regulations on demo vehicles, slates between dealers, application of state taxes, etc. N = New, U = Used.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable newUsedIndicator;
/// Data element ID “TAH”. The date the odometer reading was recorded by the jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable odometerDate;
/// Data element ID “TAG”. This is the federal odometer mileage disclosure. The mandatory information is: (1) Actual vehicle mileage; (2) Mileage exceeds mechanical limitations; (3) Not actual mileage; (4) Mileage disclosure not required.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable odometerDisclosure;
/// Data element ID “TAI”. This is the odometer reading registered with the DMV either at the time of titling or registration renewal in kilometers.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable odometerReadingKilometers;
/// Data element ID “TAF”. This is the odometer reading registered with the DMV either at the time of titling or registration renewal.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable odometerReadingMileage;
/// Data element ID “TAZ”. The title number assigned to the vehicle by the previous titling jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable previousTitleNumber;
/// Data element ID “TPJ”. The code for the jurisdiction (U.S., Canadian, or Mexican) that titled the vehicle immediately prior to the current titling jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable previousTitlingJurisdiction;
/// Data element ID “TAY”. Code providing information about the brand applied to the title.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable titleBrand;
/// Data element ID “TAV”. The date the jurisdiction’s titling authority issued a title to the owner of the vehicle. The format is CCYYMMDD.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable titleIssueDate;
/// Data element ID “TAA”. The date the jurisdiction’s titling authority issued a title to the owner of the vehicle. The format is CCYYMMDD.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable titleNumber;
/// Data element ID “TAC”. A unique set of alphanumeric characters assigned by the titling jurisdiction to the certificate of title of a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable titlingJurisdiction;
/// Data element ID “VAO”. The general configuration or shape of a vehicle distinguished by characteristics such as number of doors, seats, windows, roofline, and type of top. The vehicle body type is 2-character alphanumeric.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleBodyStyle;
/// Data element ID “VBD”. Where the vehicle/vessel is one color, this is the appropriate code describing that color. When the vehicle is two colors, this is the code for the top-most or front-most color.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleColor;
/// Data element ID “VAD”. A unique combination of alphanumeric characters that identifies a specific vehicle or component. The VIN is affixed to the vehicle in specific locations and formulated by the manufacturer. State agencies under some controlled instances may assign a VIN to a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleIdentificationNumber;
/// Data element ID “VAK”. The distinctive (coded) name applied to a group of vehicles by a manufacturer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleMake;
/// Data element ID “VAM”. A code denoting a family of vehicles (within a make), which has a degree of similarity in construction, such as body, chassis, etc. The field does not necessarily contain a standard code; it may contain a value provided by the originator of the field.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModel;
/// Data element ID “VAL”. The year that is assigned to a vehicle by the manufacturer. The format is CCYY.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModelYear;
/// Data element ID “TAU”. The date a vehicle was purchased by the current owner. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehiclePurchaseDate;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Vehicle Data. File type “VH”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKBarcodeDocumentAAMVAVehicleData")
@interface SBSDKBarcodeDocumentAAMVAVehicleData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “VAO”. Vehicle manufacture body style.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable bodyStyle;
/// Data element ID “VAG”. Date vehicle reported junked. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateJunked;
/// Data element ID “VAJ”. Date vehicle reported recovered. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateRecovered;
/// Data element ID “VAI”. Date vehicle reported stolen. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateStolen;
/// Data element ID “VAW”. Manufacturer’s rated engine displacement.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable engineDisplacement;
/// Data element ID “VAR”. The size of a vehicle’s engine.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable engineSize;
/// Data element ID “VAN”. Type of fuel the vehicle utilizes.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable fuelType;
/// Data element ID “VAU”. Manufacturer’s rated horsepower.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable horsepower;
/// Data element ID “VAY”. International fuel tax indicator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable iftaIndicator;
/// Data element ID “VAX”. International registration plan indicator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable irpIndicator;
/// Data element ID “VAF”. Vehicle has been junked.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable junkedIndicator;
/// Data element ID “VAE”. Manufacturer’s Suggested Retail Price. No decimal places. Right Justified Zero or space fill.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable msrp;
/// Data element ID “VAA”. State to provide definition.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable majorCode;
/// Data element ID “VAL”. Vehicle manufacture year.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable makeYear;
/// Data element ID “VAT”. Manufacturer’s gross vehicle weight rating.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable manufactureGrossWeight;
/// Data element ID “VAB”. State to provide definition.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable minorCode;
/// Data element ID “VBC”. Number of axles the vehicle has.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfAxles;
/// Data element ID “VAQ”. Number of cylinders the vehicle has.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfCylinders;
/// Data element ID “VAP”. Number of doors on the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfDoors;
/// Data element ID “VAH”. Indicates stolen vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable stolenIndicator;
/// Data element ID “VAC”. Type of transmission the vehicle carries.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable transmissionCode;
/// Data element ID “VAV”. Gross weight of the vehicle unloaded.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable unladenWeight;
/// Data element ID “VAZ”. Vehicle license tax calculation from date of purchase.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vltClacFromDate;
/// Data element ID “VBA”. Unique number to identify the vehicle record.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleIdNumber;
/// Data element ID “VAD”. A unique combination of alphanumeric characters that identifies a specific vehicle or component. The VIN is affixed to the vehicle in specific locations and formulated by the manufacturer. State agencies under some controlled instances may assign a VIN to a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleIdentificationNumber;
/// Data element ID “VAK”. The distinctive (coded) name applied to a group of vehicles by a manufacturer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleMake;
/// Data element ID “VAM”. Vehicle manufacture model.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModel;
/// Data element ID “VAS”. This is the status of the vehicle (e.g., active, suspend, etc.)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleStatusCode;
/// Data element ID “VBB”. EPA vehicle classification.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleTypeCode;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Vehicle Owner Data. File type “OW”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK41SBSDKBarcodeDocumentAAMVAVehicleOwnerData")
@interface SBSDKBarcodeDocumentAAMVAVehicleOwnerData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “NAX”. The unique customer number/ID of the first vehicle owner.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerIdNumber;
/// Data element ID “NAB”. Last Name or Surname of the Owner. Hyphenated names acceptable, spaces between names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerLastName;
/// Data element ID “NBA”. The legal status of the first vehicle owner. This is only used when a vehicle has multiple owners. A legal status may be (“AND”, “OR”).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerLegalStatus;
/// Data element ID “NAD”. Middle Name(s) or Initial(s) of the Owner. Hyphenated names acceptable, spaces, between names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerMiddleName;
/// Data element ID “NAC”. First Name or Given Name of the Owner. Hyphenated names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerName;
/// Data element ID “NAA”. Name of the (or one of the) individual(s) who owns the Vehicle as defined in the ANSI D- 20 Data Element Dictionary. (Lastname@Firstname@MI@Suffix if any.)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerTotalName;
/// Data element ID “NAR”. Street address line 1. (Mailing)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable mailingAddress1;
/// Data element ID “NAS”. Street address line 2. (Mailing)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable mailingAddress2;
/// Data element ID “NAT”. Name of city for mailing address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable mailingCity;
/// Data element ID “NAU”. Jurisdiction code for mailing address. Conforms to Canadian, Mexican and US jurisdictions as appropriate. Codes for provinces (Canada) and states (US and Mexico).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable mailingJurisdictionCode;
/// Data element ID “NAV”. The ZIP code or Postal code used for mailing. (As used by Canadian, Mexican and US jurisdictions.)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable mailingZipCode;
/// Data element ID “NAM”. Street address line 1. (Mailing)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable residenceAddress1;
/// Data element ID “NAN”. Street address line 2. (Mailing)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable residenceAddress2;
/// Data element ID “NAO”. Name of city for mailing address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable residenceCity;
/// Data element ID “NAP”. Jurisdiction code for mailing address. Conforms to Canadian, Mexican and US jurisdictions as appropriate. Codes for provinces (Canada) and states (US and Mexico).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable residenceJurisdictionCode;
/// Data element ID “NAQ”. The ZIP code or Postal code used for mailing. (As used by Canadian, Mexican and US jurisdictions).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable residenceZipCode;
/// Data element ID “NAY”. The unique customer number/ID of the second vehicle owner.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerIdNumber;
/// Data element ID “NAF”. Last Name or Surname of the Owner. Hyphenated names acceptable, spaces between names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerLastName;
/// Data element ID “NBB”. The legal status of the second vehicle owner. This is only used when a vehicle has multiple owners. A legal status may be (“AND”, “OR”).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerLegalStatus;
/// Data element ID “NAH”. Middle Name(s) or Initial(s) of the Owner. Hyphenated names acceptable, spaces between names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerMiddleName;
/// Data element ID “NAG”. First Name or Given Name of the Owner. Hyphenated names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerName;
/// Data element ID “NAE”. Name of the (or one of the) individual(s) who owns the Vehicle as defined in the ANSI D- 20 Data Element Dictionary. (Lastname@Firstname@MI@Suffix if any.)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerTotalName;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Vehicle Safety Inspection Data. File type “VS”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK52SBSDKBarcodeDocumentAAMVAVehicleSafetyInspectionData")
@interface SBSDKBarcodeDocumentAAMVAVehicleSafetyInspectionData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “IAN”. The street name and number, city, state and zip code of the inspection facility.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionAddress;
/// Data element ID “IPD”. Identifies whether the pollution control devices meet the minimum inspection criteria.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionAirPollutionDeviceConditions;
/// Data element ID “IFI”. The unique number assigned to an inspection facility.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionFacilityIdentifier;
/// Data element ID “INC”. A unique number assigned to a current vehicle inspection form for identification purposes or a preprinted unique number on the motor vehicle inspection sticker currently issued to a motor vehicle which has passed inspection.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionFormOrStickerNumberCurrent;
/// Data element ID “INP”. The number of the last inspection form excluding the current inspection or the certification number of the last inspection sticker, excluding the current inspection.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionFormOrStickerNumberPrevious;
/// Data element ID “ISC”. An indicator that specifies whether or not the vehicle has a current smog certificate.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionSmogCertificateIndicator;
/// Data element ID “ISN”. Station number performing the inspection.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionStationNumber;
/// Data element ID “IIN”. A unique number assigned to each licensed vehicle inspector.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectorIdentificationNumber;
/// Data element ID “ORI”. The vehicle’s odometer reading (to the nearest mile or kilometer) at the time of inspection.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable odometerReadingAtInspection;
/// Data element ID “VAO”. The general configuration or shape of a vehicle distinguished by characteristics such as number of doors, seats, windows, roofline, and type of top. The vehicle body type is 2- character alphanumeric.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleBodyType;
/// Data element ID “VAK”. The distinctive (coded) name applied to a group of vehicles by a manufacturer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleMake;
/// Data element ID “VAL”. The year which is assigned to a vehicle by the manufacturer. The format is CCYY.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModelYear;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentBoardingPassLeg;

/// Boarding Pass.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK32SBSDKBarcodeDocumentBoardingPass")
@interface SBSDKBarcodeDocumentBoardingPass : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Electronic Ticket.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable electronicTicket;
/// Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable name;
/// Number Of Legs.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfLegs;
/// Security Data.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable securityData;
/// Leg.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentBoardingPassLeg *> * _Nullable legs;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Leg of the journey.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK35SBSDKBarcodeDocumentBoardingPassLeg")
@interface SBSDKBarcodeDocumentBoardingPassLeg : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Airline Designator Of Boarding Pass Issuer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable airlineDesignatorOfBoardingPassIssuer;
/// Airline Numeric Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable airlineNumericCode;
/// Baggage Tag License Plate Numbers.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable baggageTagLicensePlateNumbers;
/// Check In Sequence Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable checkInSequenceNumber;
/// Compartment Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable compartmentCode;
/// Date Of Boarding Pass Issuance Julian.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateOfBoardingPassIssuanceJulian;
/// Date Of Flight Julian.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateOfFlightJulian;
/// Departure Airport Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable departureAirportCode;
/// Destination Airport Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable destinationAirportCode;
/// Document Form Serial Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentFormSerialNumber;
/// Document Type.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentType;
/// Fast Track.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable fastTrack;
/// First Non Consecutive Baggage Tag License Plate Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstNonConsecutiveBaggageTagLicensePlateNumber;
/// Flight Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable flightNumber;
/// For Individual Airline Use.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable forIndividualAirlineUse;
/// Free Baggage Allowance.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable freeBaggageAllowance;
/// Frequent Flyer Airline Designator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable frequentFlyerAirlineDesignator;
/// Frequent Flyer Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable frequentFlyerNumber;
/// IDAD Indicator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable idadIndicator;
/// International Documentation Verification.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable internationalDocumentationVerification;
/// Marketing Carrier Designator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable marketingCarrierDesignator;
/// Operating Carrier Designator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable operatingCarrierDesignator;
/// Operating Carrier PNR Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable operatingCarrierPNRCode;
/// Passenger Description.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable passengerDescription;
/// Passenger Status.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable passengerStatus;
/// Seat Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable seatNumber;
/// Second Non Consecutive Baggage Tag License Plate Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondNonConsecutiveBaggageTagLicensePlateNumber;
/// Selectee Indicator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable selecteeIndicator;
/// Source Of Boarding Pass Issuance.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable sourceOfBoardingPassIssuance;
/// Source Of Check In.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable sourceOfCheckIn;
/// VersionNumber.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable versionNumber;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK29SBSDKBarcodeDocumentConstants")
@interface SBSDKBarcodeDocumentConstants : NSObject
/// Document type name of the “BoardingPass” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassDocumentType;)
+ (NSString * _Nonnull)boardingPassDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “BoardingPass.Leg” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull legDocumentType;)
+ (NSString * _Nonnull)legDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “SwissQR” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDocumentType;)
+ (NSString * _Nonnull)swissQRDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDocumentType;)
+ (NSString * _Nonnull)deMedicalPlanDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Patient” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull patientDocumentType;)
+ (NSString * _Nonnull)patientDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Doctor” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull doctorDocumentType;)
+ (NSString * _Nonnull)doctorDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Subheading” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull subheadingDocumentType;)
+ (NSString * _Nonnull)subheadingDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Subheading.Medicine” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicineDocumentType;)
+ (NSString * _Nonnull)medicineDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Subheading.Medicine.Substance” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull substanceDocumentType;)
+ (NSString * _Nonnull)substanceDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Subheading.Prescription” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull prescriptionDocumentType;)
+ (NSString * _Nonnull)prescriptionDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “IDCardPDF417” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417DocumentType;)
+ (NSString * _Nonnull)idCardPDF417DocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “GS1” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1DocumentType;)
+ (NSString * _Nonnull)gs1DocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “GS1.Element” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull elementDocumentType;)
+ (NSString * _Nonnull)elementDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “GS1.Element.ValidationError” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull validationErrorDocumentType;)
+ (NSString * _Nonnull)validationErrorDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “SEPA” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaDocumentType;)
+ (NSString * _Nonnull)sepaDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “MedicalCertificate” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateDocumentType;)
+ (NSString * _Nonnull)medicalCertificateDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vCardDocumentType;)
+ (NSString * _Nonnull)vCardDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Entry” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull entryDocumentType;)
+ (NSString * _Nonnull)entryDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Version” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionDocumentType;)
+ (NSString * _Nonnull)versionDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Source” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sourceDocumentType;)
+ (NSString * _Nonnull)sourceDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Kind” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kindDocumentType;)
+ (NSString * _Nonnull)kindDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.XML” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull xmlDocumentType;)
+ (NSString * _Nonnull)xmlDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Name” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull nameDocumentType;)
+ (NSString * _Nonnull)nameDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.FirstName” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull firstNameDocumentType;)
+ (NSString * _Nonnull)firstNameDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Nickname” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull nicknameDocumentType;)
+ (NSString * _Nonnull)nicknameDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Birthday” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull birthdayDocumentType;)
+ (NSString * _Nonnull)birthdayDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Anniversary” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull anniversaryDocumentType;)
+ (NSString * _Nonnull)anniversaryDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Gender” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genderDocumentType;)
+ (NSString * _Nonnull)genderDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.DeliveryAddress” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deliveryAddressDocumentType;)
+ (NSString * _Nonnull)deliveryAddressDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Photo” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull photoDocumentType;)
+ (NSString * _Nonnull)photoDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.TelephoneNumber” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull telephoneNumberDocumentType;)
+ (NSString * _Nonnull)telephoneNumberDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Email” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull emailDocumentType;)
+ (NSString * _Nonnull)emailDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.IMPP” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull imppDocumentType;)
+ (NSString * _Nonnull)imppDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Languages” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull languagesDocumentType;)
+ (NSString * _Nonnull)languagesDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.TimeZone” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull timeZoneDocumentType;)
+ (NSString * _Nonnull)timeZoneDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.GeoLocation” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull geoLocationDocumentType;)
+ (NSString * _Nonnull)geoLocationDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Title” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull titleDocumentType;)
+ (NSString * _Nonnull)titleDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Role” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull roleDocumentType;)
+ (NSString * _Nonnull)roleDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Logo” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull logoDocumentType;)
+ (NSString * _Nonnull)logoDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Organisation” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull organisationDocumentType;)
+ (NSString * _Nonnull)organisationDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Member” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull memberDocumentType;)
+ (NSString * _Nonnull)memberDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Related” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull relatedDocumentType;)
+ (NSString * _Nonnull)relatedDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Categories” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull categoriesDocumentType;)
+ (NSString * _Nonnull)categoriesDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Note” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull noteDocumentType;)
+ (NSString * _Nonnull)noteDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.ProductId” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productIdDocumentType;)
+ (NSString * _Nonnull)productIdDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Revision” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull revisionDocumentType;)
+ (NSString * _Nonnull)revisionDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Sound” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull soundDocumentType;)
+ (NSString * _Nonnull)soundDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.UID” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uidDocumentType;)
+ (NSString * _Nonnull)uidDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.ClientPIDMap” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientPIDMapDocumentType;)
+ (NSString * _Nonnull)clientPIDMapDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.URL” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull urlDocumentType;)
+ (NSString * _Nonnull)urlDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.PublicKey” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull publicKeyDocumentType;)
+ (NSString * _Nonnull)publicKeyDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.BusyTimeURL” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull busyTimeURLDocumentType;)
+ (NSString * _Nonnull)busyTimeURLDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.CalendarURIForRequests” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull calendarURIForRequestsDocumentType;)
+ (NSString * _Nonnull)calendarURIForRequestsDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.CalendarURI” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull calendarURIDocumentType;)
+ (NSString * _Nonnull)calendarURIDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Custom” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customDocumentType;)
+ (NSString * _Nonnull)customDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaDocumentType;)
+ (NSString * _Nonnull)aamvaDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.TitleData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull titleDataDocumentType;)
+ (NSString * _Nonnull)titleDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.RegistrationData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull registrationDataDocumentType;)
+ (NSString * _Nonnull)registrationDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.MotorCarrierData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull motorCarrierDataDocumentType;)
+ (NSString * _Nonnull)motorCarrierDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.RegistrantAndVehicleData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull registrantAndVehicleDataDocumentType;)
+ (NSString * _Nonnull)registrantAndVehicleDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.VehicleOwnerData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vehicleOwnerDataDocumentType;)
+ (NSString * _Nonnull)vehicleOwnerDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.VehicleData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vehicleDataDocumentType;)
+ (NSString * _Nonnull)vehicleDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.VehicleSafetyInspectionData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vehicleSafetyInspectionDataDocumentType;)
+ (NSString * _Nonnull)vehicleSafetyInspectionDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.DLID” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dlidDocumentType;)
+ (NSString * _Nonnull)dlidDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.DriverLicense” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull driverLicenseDocumentType;)
+ (NSString * _Nonnull)driverLicenseDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.IDCard” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardDocumentType;)
+ (NSString * _Nonnull)idCardDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.EnhancedDriverLicense” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull enhancedDriverLicenseDocumentType;)
+ (NSString * _Nonnull)enhancedDriverLicenseDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.RawDocument” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rawDocumentDocumentType;)
+ (NSString * _Nonnull)rawDocumentDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ElectronicTicket” field type in document type “BoardingPass”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassElectronicTicketFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassElectronicTicketFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Name” field type in document type “BoardingPass”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassNameFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfLegs” field type in document type “BoardingPass”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassNumberOfLegsFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassNumberOfLegsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecurityData” field type in document type “BoardingPass”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassSecurityDataFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassSecurityDataFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AirlineDesignatorOfBoardingPassIssuer” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegAirlineDesignatorOfBoardingPassIssuerFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegAirlineDesignatorOfBoardingPassIssuerFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AirlineNumericCode” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegAirlineNumericCodeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegAirlineNumericCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BaggageTagLicensePlateNumbers” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegBaggageTagLicensePlateNumbersFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegBaggageTagLicensePlateNumbersFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CheckInSequenceNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegCheckInSequenceNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegCheckInSequenceNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CompartmentCode” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegCompartmentCodeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegCompartmentCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateOfBoardingPassIssuanceJulian” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDateOfBoardingPassIssuanceJulianFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDateOfBoardingPassIssuanceJulianFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateOfFlightJulian” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDateOfFlightJulianFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDateOfFlightJulianFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DepartureAirportCode” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDepartureAirportCodeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDepartureAirportCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DestinationAirportCode” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDestinationAirportCodeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDestinationAirportCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentFormSerialNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDocumentFormSerialNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDocumentFormSerialNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentType” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDocumentTypeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDocumentTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FastTrack” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFastTrackFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFastTrackFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstNonConsecutiveBaggageTagLicensePlateNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFirstNonConsecutiveBaggageTagLicensePlateNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFirstNonConsecutiveBaggageTagLicensePlateNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FlightNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFlightNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFlightNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ForIndividualAirlineUse” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegForIndividualAirlineUseFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegForIndividualAirlineUseFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FreeBaggageAllowance” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFreeBaggageAllowanceFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFreeBaggageAllowanceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FrequentFlyerAirlineDesignator” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFrequentFlyerAirlineDesignatorFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFrequentFlyerAirlineDesignatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FrequentFlyerNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFrequentFlyerNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFrequentFlyerNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IDADIndicator” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegIDADIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegIDADIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InternationalDocumentationVerification” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegInternationalDocumentationVerificationFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegInternationalDocumentationVerificationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MarketingCarrierDesignator” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegMarketingCarrierDesignatorFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegMarketingCarrierDesignatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OperatingCarrierDesignator” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegOperatingCarrierDesignatorFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegOperatingCarrierDesignatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OperatingCarrierPNRCode” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegOperatingCarrierPNRCodeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegOperatingCarrierPNRCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PassengerDescription” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegPassengerDescriptionFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegPassengerDescriptionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PassengerStatus” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegPassengerStatusFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegPassengerStatusFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SeatNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegSeatNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegSeatNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondNonConsecutiveBaggageTagLicensePlateNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegSecondNonConsecutiveBaggageTagLicensePlateNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegSecondNonConsecutiveBaggageTagLicensePlateNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SelecteeIndicator” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegSelecteeIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegSelecteeIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SourceOfBoardingPassIssuance” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegSourceOfBoardingPassIssuanceFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegSourceOfBoardingPassIssuanceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SourceOfCheckIn” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegSourceOfCheckInFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegSourceOfCheckInFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VersionNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegVersionNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegVersionNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AdditionalBillingInformation” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRAdditionalBillingInformationFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRAdditionalBillingInformationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AdditionalInfoTrailer” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRAdditionalInfoTrailerFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRAdditionalInfoTrailerFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AdditionalInfoUnstructured” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRAdditionalInfoUnstructuredFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRAdditionalInfoUnstructuredFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AlternativeProcedureParameter” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRAlternativeProcedureParameterFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRAlternativeProcedureParameterFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Amount” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRAmountFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRAmountFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Currency” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRCurrencyFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRCurrencyFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorAddressType” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorAddressTypeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorAddressTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorBuildingOrAddressLine2” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorBuildingOrAddressLine2FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorBuildingOrAddressLine2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorCountry” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorCountryFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorCountryFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorName” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorNameFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorPlace” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorPlaceFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorPlaceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorPostalCode” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorPostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorPostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorStreetOrAddressLine1” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorStreetOrAddressLine1FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorStreetOrAddressLine1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DueDate” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDueDateFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Encoding” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQREncodingFieldNormalizedName;)
+ (NSString * _Nonnull)swissQREncodingFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeeAddressType” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeeAddressTypeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeeAddressTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeeBuildingOrAddressLine2” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeeBuildingOrAddressLine2FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeeBuildingOrAddressLine2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeeCountry” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeeCountryFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeeCountryFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeeName” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeeNameFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeeNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeePlace” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeePlaceFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeePlaceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeePostalCode” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeePostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeePostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeeStreetOrAddressLine1” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeeStreetOrAddressLine1FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeeStreetOrAddressLine1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IBAN” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRIBANFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRIBANFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeeAddressType” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeeAddressTypeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeeAddressTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeeBuildingOrAddressLine2” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeeBuildingOrAddressLine2FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeeBuildingOrAddressLine2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeeCountry” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeeCountryFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeeCountryFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeeName” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeeNameFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeeNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeePlace” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeePlaceFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeePlaceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeePostalCode” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeePostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeePostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeeStreetOrAddressLine1” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeeStreetOrAddressLine1FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeeStreetOrAddressLine1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PaymentReference” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPaymentReferenceFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPaymentReferenceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PaymentReferenceType” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPaymentReferenceTypeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPaymentReferenceTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Version” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRVersionFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRVersionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CurrentPage” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanCurrentPageFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanCurrentPageFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentVersionNumber” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDocumentVersionNumberFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDocumentVersionNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GUID” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanGUIDFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanGUIDFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “LanguageCountryCode” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanLanguageCountryCodeFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanLanguageCountryCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PatchVersionNumber” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatchVersionNumberFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatchVersionNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TotalNumberOfPages” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanTotalNumberOfPagesFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanTotalNumberOfPagesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AllergiesAndIntolerances” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientAllergiesAndIntolerancesFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientAllergiesAndIntolerancesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BirthDate” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientBirthDateFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientBirthDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BreastFeeding” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientBreastFeedingFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientBreastFeedingFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CreatinineValue” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientCreatinineValueFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientCreatinineValueFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstName” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientFirstNameFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientFirstNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Gender” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientGenderFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientGenderFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Height” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientHeightFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientHeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “LastName” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PatientFreeText” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientPatientFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientPatientFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PatientID” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientPatientIDFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientPatientIDFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PreName” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientPreNameFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientPreNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Pregnant” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientPregnantFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientPregnantFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Suffix” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientSuffixFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientSuffixFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Title” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientTitleFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientTitleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Weight” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientWeightFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DoctorNumber” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorDoctorNumberFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorDoctorNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Email” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorEmailFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorEmailFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “HospitalID” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorHospitalIDFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorHospitalIDFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IssuerName” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorIssuerNameFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorIssuerNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IssuingDateAndTime” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorIssuingDateAndTimeFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorIssuingDateAndTimeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PharmacyID” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorPharmacyIDFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorPharmacyIDFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Place” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorPlaceFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorPlaceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PostalCode” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorPostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorPostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Street” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorStreetFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorStreetFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TelephoneNumber” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorTelephoneNumberFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorTelephoneNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GeneralNote” field type in document type “DEMedicalPlan.Subheading”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingGeneralNoteFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingGeneralNoteFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “KeyWords” field type in document type “DEMedicalPlan.Subheading”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingKeyWordsFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingKeyWordsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SubheadingFreeText” field type in document type “DEMedicalPlan.Subheading”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingSubheadingFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingSubheadingFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DosageForm” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDosageFormFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDosageFormFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DosageFormFreeText” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDosageFormFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDosageFormFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DosageFreeText” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDosageFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDosageFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DosingUnit” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDosingUnitFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDosingUnitFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DosingUnitFreeText” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDosingUnitFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDosingUnitFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DrugName” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDrugNameFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDrugNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Evening” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineEveningFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineEveningFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GeneralNotes” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineGeneralNotesFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineGeneralNotesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Midday” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineMiddayFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineMiddayFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Morning” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineMorningFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineMorningFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Night” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineNightFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineNightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PharmaceuticalNumber” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicinePharmaceuticalNumberFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicinePharmaceuticalNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ReasonForTreatment” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineReasonForTreatmentFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineReasonForTreatmentFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RelevantInfo” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineRelevantInfoFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineRelevantInfoFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ActiveSubstance” field type in document type “DEMedicalPlan.Subheading.Medicine.Substance”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineSubstanceActiveSubstanceFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineSubstanceActiveSubstanceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Potency” field type in document type “DEMedicalPlan.Subheading.Medicine.Substance”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineSubstancePotencyFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineSubstancePotencyFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GeneralInformation” field type in document type “DEMedicalPlan.Subheading.Prescription”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingPrescriptionGeneralInformationFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingPrescriptionGeneralInformationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PrescriptionFreeText” field type in document type “DEMedicalPlan.Subheading.Prescription”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingPrescriptionPrescriptionFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingPrescriptionPrescriptionFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BirthDate” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417BirthDateFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417BirthDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateExpired” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417DateExpiredFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417DateExpiredFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateIssued” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417DateIssuedFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417DateIssuedFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentCode” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417DocumentCodeFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417DocumentCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstName” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417FirstNameFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417FirstNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “LastName” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417LastNameFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417LastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Optional” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417OptionalFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417OptionalFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ApplicationIdentifier” field type in document type “GS1.Element”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementApplicationIdentifierFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementApplicationIdentifierFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DataTitle” field type in document type “GS1.Element”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementDataTitleFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementDataTitleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ElementDescription” field type in document type “GS1.Element”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementElementDescriptionFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementElementDescriptionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RawValue” field type in document type “GS1.Element”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementRawValueFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementRawValueFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Code” field type in document type “GS1.Element.ValidationError”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementValidationErrorCodeFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementValidationErrorCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Reason” field type in document type “GS1.Element.ValidationError”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementValidationErrorReasonFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementValidationErrorReasonFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Amount” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaAmountFieldNormalizedName;)
+ (NSString * _Nonnull)sepaAmountFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CharacterSet” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaCharacterSetFieldNormalizedName;)
+ (NSString * _Nonnull)sepaCharacterSetFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Identification” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaIdentificationFieldNormalizedName;)
+ (NSString * _Nonnull)sepaIdentificationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Information” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaInformationFieldNormalizedName;)
+ (NSString * _Nonnull)sepaInformationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Purpose” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaPurposeFieldNormalizedName;)
+ (NSString * _Nonnull)sepaPurposeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ReceiverBIC” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaReceiverBICFieldNormalizedName;)
+ (NSString * _Nonnull)sepaReceiverBICFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ReceiverIBAN” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaReceiverIBANFieldNormalizedName;)
+ (NSString * _Nonnull)sepaReceiverIBANFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ReceiverName” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaReceiverNameFieldNormalizedName;)
+ (NSString * _Nonnull)sepaReceiverNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Remittance” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaRemittanceFieldNormalizedName;)
+ (NSString * _Nonnull)sepaRemittanceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ServiceTag” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaServiceTagFieldNormalizedName;)
+ (NSString * _Nonnull)sepaServiceTagFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Version” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaVersionFieldNormalizedName;)
+ (NSString * _Nonnull)sepaVersionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Accident” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateAccidentFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateAccidentFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AssignedToAccidentInsuranceDoctor” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateAssignedToAccidentInsuranceDoctorFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateAssignedToAccidentInsuranceDoctorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BirthDate” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateBirthDateFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateBirthDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ChildNeedsCareFrom” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateChildNeedsCareFromFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateChildNeedsCareFromFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ChildNeedsCareUntil” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateChildNeedsCareUntilFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateChildNeedsCareUntilFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Diagnose” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateDiagnoseFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateDiagnoseFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DiagnosedOn” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateDiagnosedOnFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateDiagnosedOnFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DoctorNumber” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateDoctorNumberFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateDoctorNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentDate” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateDocumentDateFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateDocumentDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstName” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateFirstNameFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateFirstNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “HealthInsuranceNumber” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateHealthInsuranceNumberFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateHealthInsuranceNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IncapableOfWorkSince” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateIncapableOfWorkSinceFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateIncapableOfWorkSinceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IncapableOfWorkUntil” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateIncapableOfWorkUntilFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateIncapableOfWorkUntilFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InitialCertificate” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateInitialCertificateFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateInitialCertificateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InsuredPersonNumber” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateInsuredPersonNumberFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateInsuredPersonNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “LastName” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PlaceOfOperationNumber” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificatePlaceOfOperationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificatePlaceOfOperationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RenewedCertificate” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateRenewedCertificateFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateRenewedCertificateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RequiresCare” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateRequiresCareFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateRequiresCareFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Status” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateStatusFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateStatusFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “WorkAccident” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateWorkAccidentFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateWorkAccidentFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RawValue” field type in document type “VCard.Entry”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vCardEntryRawValueFieldNormalizedName;)
+ (NSString * _Nonnull)vCardEntryRawValueFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TypeModifier” field type in document type “VCard.Entry”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vCardEntryTypeModifierFieldNormalizedName;)
+ (NSString * _Nonnull)vCardEntryTypeModifierFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Value” field type in document type “VCard.Entry”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vCardEntryValueFieldNormalizedName;)
+ (NSString * _Nonnull)vCardEntryValueFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IssuerIdentificationNumber” field type in document type “AAMVA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaIssuerIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaIssuerIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionVersionNumber” field type in document type “AAMVA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaJurisdictionVersionNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaJurisdictionVersionNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Version” field type in document type “AAMVA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVersionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVersionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressCity” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataAddressCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataAddressCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressJurisdictionCode” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataAddressJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataAddressJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressStreet” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataAddressStreetFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataAddressStreetFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressZipCode” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataAddressZipCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataAddressZipCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BusinessName” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataBusinessNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataBusinessNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FamilyName” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataFamilyNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataFamilyNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstLienHolderId” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataFirstLienHolderIdFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataFirstLienHolderIdFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstLienHolderName” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataFirstLienHolderNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataFirstLienHolderNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GivenName” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataGivenNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataGivenNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NewUsedIndicator” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataNewUsedIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataNewUsedIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OdometerDate” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataOdometerDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataOdometerDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OdometerDisclosure” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataOdometerDisclosureFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataOdometerDisclosureFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OdometerReadingKilometers” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataOdometerReadingKilometersFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataOdometerReadingKilometersFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OdometerReadingMileage” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataOdometerReadingMileageFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataOdometerReadingMileageFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PreviousTitleNumber” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataPreviousTitleNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataPreviousTitleNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PreviousTitlingJurisdiction” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataPreviousTitlingJurisdictionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataPreviousTitlingJurisdictionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TitleBrand” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataTitleBrandFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataTitleBrandFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TitleIssueDate” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataTitleIssueDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataTitleIssueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TitleNumber” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataTitleNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataTitleNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TitlingJurisdiction” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataTitlingJurisdictionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataTitlingJurisdictionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleBodyStyle” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleBodyStyleFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleBodyStyleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleColor” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleColorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleColorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleIdentificationNumber” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleMake” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleMakeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleMakeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModel” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleModelFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleModelFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModelYear” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleModelYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleModelYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehiclePurchaseDate” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehiclePurchaseDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehiclePurchaseDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressCity” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataAddressCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataAddressCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressJurisdictionCode” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataAddressJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataAddressJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressStreet” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataAddressStreetFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataAddressStreetFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressZipCode” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataAddressZipCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataAddressZipCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Axles” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataAxlesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataAxlesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BusinessName” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataBusinessNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataBusinessNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Fuel” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataFuelFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataFuelFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GrossVehicleWeight” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataGrossVehicleWeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataGrossVehicleWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrantFamilyName” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrantFamilyNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrantFamilyNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrantGivenName” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrantGivenNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrantGivenNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationExpiryDate” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrationExpiryDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrationExpiryDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationIssueDate” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrationIssueDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrationIssueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationPlateNumber” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrationPlateNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrationPlateNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationWindowStickerDecal” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrationWindowStickerDecalFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrationWindowStickerDecalFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationYear” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrationYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrationYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleBodyStyle” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleBodyStyleFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleBodyStyleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleColor” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleColorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleColorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleIdentificationNumber” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleMake” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleMakeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleMakeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModel” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleModelFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleModelFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModelYear” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleModelYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleModelYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleUse” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleUseFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleUseFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CarrierName” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataCarrierNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataCarrierNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “City” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Jurisdiction” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataJurisdictionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataJurisdictionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “StreetAddress” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataStreetAddressFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataStreetAddressFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “USDOTNumber” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataUSDOTNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataUSDOTNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Zip” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataZipFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataZipFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Address” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataAddressFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataAddressFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BaseJurisdictionRegisteredWeight” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataBaseJurisdictionRegisteredWeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataBaseJurisdictionRegisteredWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CarrierNameRegistrant” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataCarrierNameRegistrantFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataCarrierNameRegistrantFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “City” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GrossVehicleWeight” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataGrossVehicleWeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataGrossVehicleWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Jurisdiction” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataJurisdictionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataJurisdictionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ModelYear” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataModelYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataModelYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfSeats” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataNumberOfSeatsFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataNumberOfSeatsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationDecalNumber” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationDecalNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationDecalNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationEnforcementDate” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationEnforcementDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationEnforcementDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationExpirationDate” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationExpirationDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationExpirationDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationIssueDate” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationIssueDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationIssueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationPlateNumber” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationPlateNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationPlateNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationYear” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TypeOfVehicle” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataTypeOfVehicleFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataTypeOfVehicleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “UnitNumber” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataUnitNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataUnitNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleIdentificationNumber” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataVehicleIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataVehicleIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleMake” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataVehicleMakeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataVehicleMakeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ZipCode” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataZipCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataZipCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerIdNumber” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerIdNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerIdNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerLastName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerLegalStatus” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerLegalStatusFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerLegalStatusFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerMiddleName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerMiddleNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerMiddleNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerTotalName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerTotalNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerTotalNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MailingAddress1” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataMailingAddress1FieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataMailingAddress1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MailingAddress2” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataMailingAddress2FieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataMailingAddress2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MailingCity” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataMailingCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataMailingCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MailingJurisdictionCode” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataMailingJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataMailingJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MailingZipCode” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataMailingZipCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataMailingZipCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ResidenceAddress1” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataResidenceAddress1FieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataResidenceAddress1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ResidenceAddress2” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataResidenceAddress2FieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataResidenceAddress2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ResidenceCity” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataResidenceCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataResidenceCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ResidenceJurisdictionCode” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataResidenceJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataResidenceJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ResidenceZipCode” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataResidenceZipCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataResidenceZipCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerIdNumber” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerIdNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerIdNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerLastName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerLegalStatus” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerLegalStatusFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerLegalStatusFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerMiddleName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerMiddleNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerMiddleNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerTotalName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerTotalNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerTotalNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BodyStyle” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataBodyStyleFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataBodyStyleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateJunked” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataDateJunkedFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataDateJunkedFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateRecovered” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataDateRecoveredFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataDateRecoveredFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateStolen” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataDateStolenFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataDateStolenFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “EngineDisplacement” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataEngineDisplacementFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataEngineDisplacementFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “EngineSize” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataEngineSizeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataEngineSizeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FuelType” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataFuelTypeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataFuelTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Horsepower” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataHorsepowerFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataHorsepowerFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IFTAIndicator” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataIFTAIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataIFTAIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IRPIndicator” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataIRPIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataIRPIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JunkedIndicator” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataJunkedIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataJunkedIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MSRP” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataMSRPFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataMSRPFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MajorCode” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataMajorCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataMajorCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MakeYear” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataMakeYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataMakeYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ManufactureGrossWeight” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataManufactureGrossWeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataManufactureGrossWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MinorCode” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataMinorCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataMinorCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfAxles” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataNumberOfAxlesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataNumberOfAxlesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfCylinders” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataNumberOfCylindersFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataNumberOfCylindersFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfDoors” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataNumberOfDoorsFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataNumberOfDoorsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “StolenIndicator” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataStolenIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataStolenIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TransmissionCode” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataTransmissionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataTransmissionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “UnladenWeight” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataUnladenWeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataUnladenWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VLTClacFromDate” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVLTClacFromDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVLTClacFromDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleIdNumber” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleIdNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleIdNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleIdentificationNumber” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleMake” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleMakeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleMakeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModel” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleModelFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleModelFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleStatusCode” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleStatusCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleStatusCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleTypeCode” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleTypeCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleTypeCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionAddress” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionAddressFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionAddressFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionAirPollutionDeviceConditions” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionAirPollutionDeviceConditionsFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionAirPollutionDeviceConditionsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionFacilityIdentifier” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionFacilityIdentifierFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionFacilityIdentifierFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionFormOrStickerNumberCurrent” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionFormOrStickerNumberCurrentFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionFormOrStickerNumberCurrentFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionFormOrStickerNumberPrevious” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionFormOrStickerNumberPreviousFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionFormOrStickerNumberPreviousFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionSmogCertificateIndicator” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionSmogCertificateIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionSmogCertificateIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionStationNumber” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionStationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionStationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectorIdentificationNumber” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectorIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectorIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OdometerReadingAtInspection” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataOdometerReadingAtInspectionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataOdometerReadingAtInspectionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleBodyType” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataVehicleBodyTypeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataVehicleBodyTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleMake” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataVehicleMakeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataVehicleMakeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModelYear” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataVehicleModelYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataVehicleModelYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressCity” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAddressCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAddressCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressJurisdictionCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAddressJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAddressJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressPostalCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAddressPostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAddressPostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressStreet1” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAddressStreet1FieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAddressStreet1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressStreet2” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAddressStreet2FieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAddressStreet2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AdultInformation” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAdultInformationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAdultInformationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AliasFamilyName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAliasFamilyNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAliasFamilyNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AliasGivenName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAliasGivenNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAliasGivenNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AliasMiddleName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAliasMiddleNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAliasMiddleNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AliasPrefixName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAliasPrefixNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAliasPrefixNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AliasSuffixName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAliasSuffixNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAliasSuffixNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CardRevisionDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCardRevisionDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCardRevisionDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ComplianceType” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidComplianceTypeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidComplianceTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CountryIdentification” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCountryIdentificationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCountryIdentificationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CustomerFamilyName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCustomerFamilyNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCustomerFamilyNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CustomerFirstName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCustomerFirstNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCustomerFirstNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CustomerGivenNames” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCustomerGivenNamesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCustomerGivenNamesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CustomerIdNumber” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCustomerIdNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCustomerIdNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CustomerMiddleName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCustomerMiddleNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCustomerMiddleNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateOfBirth” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDateOfBirthFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDateOfBirthFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentDiscriminator” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDocumentDiscriminatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDocumentDiscriminatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentExpirationDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDocumentExpirationDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDocumentExpirationDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentIssueDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDocumentIssueDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDocumentIssueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverAliasDateOfBirthField” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverAliasDateOfBirthFieldFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverAliasDateOfBirthFieldFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverAliasFirstName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverAliasFirstNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverAliasFirstNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverAliasLastName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverAliasLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverAliasLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverAliasSocialSecurityNumber” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverAliasSocialSecurityNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverAliasSocialSecurityNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverLastName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverLicenseClassificationCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverLicenseClassificationCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverLicenseClassificationCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverLicenseEndorsementsCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverLicenseEndorsementsCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverLicenseEndorsementsCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverLicenseName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverLicenseNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverLicenseNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverLicenseRestrictionCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverLicenseRestrictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverLicenseRestrictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverNamePrefix” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverNamePrefixFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverNamePrefixFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverNameSuffix” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverNameSuffixFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverNameSuffixFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverPermitClassificationCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverPermitClassificationCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverPermitClassificationCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverPermitEndorsementCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverPermitEndorsementCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverPermitEndorsementCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverPermitIssueDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverPermitIssueDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverPermitIssueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverPermitRestrictionCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverPermitRestrictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverPermitRestrictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverResidenceCity” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverResidenceCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverResidenceCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverResidenceJurisdictionCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverResidenceJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverResidenceJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverResidencePostalCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverResidencePostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverResidencePostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverResidenceStreetAddress1” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverResidenceStreetAddress1FieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverResidenceStreetAddress1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverResidenceStreetAddress2” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverResidenceStreetAddress2FieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverResidenceStreetAddress2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FamilyNameTruncation” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidFamilyNameTruncationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidFamilyNameTruncationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FederalCommercialVehicleCodes” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidFederalCommercialVehicleCodesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidFederalCommercialVehicleCodesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstNameTruncation” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidFirstNameTruncationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidFirstNameTruncationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “HAZMATEndorsementExpirationDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidHAZMATEndorsementExpirationDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidHAZMATEndorsementExpirationDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “HairColor” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidHairColorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidHairColorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Height” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidHeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidHeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InventoryControlNumber” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidInventoryControlNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidInventoryControlNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IssueTimeStamp” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidIssueTimeStampFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidIssueTimeStampFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificEndorsementCodeDescription” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificEndorsementCodeDescriptionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificEndorsementCodeDescriptionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificEndorsementCodes” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificEndorsementCodesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificEndorsementCodesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificRestrictionCodeDescription” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificRestrictionCodeDescriptionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificRestrictionCodeDescriptionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificRestrictionCodes” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificRestrictionCodesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificRestrictionCodesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificVehicleClass” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificVehicleClassFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificVehicleClassFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificVehicleClassificationDescription” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificVehicleClassificationDescriptionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificVehicleClassificationDescriptionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “LimitedDurationDocumentIndicator” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidLimitedDurationDocumentIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidLimitedDurationDocumentIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MiddleNameTruncation” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidMiddleNameTruncationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidMiddleNameTruncationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NameSuffix” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidNameSuffixFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidNameSuffixFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NonResidentIndicator” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidNonResidentIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidNonResidentIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfDuplicates” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidNumberOfDuplicatesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidNumberOfDuplicatesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OrganDonor” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidOrganDonorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidOrganDonorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OrganDonorIndicator” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidOrganDonorIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidOrganDonorIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PermitExpirationDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPermitExpirationDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPermitExpirationDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PermitIdentifier” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPermitIdentifierFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPermitIdentifierFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PhysicalDescriptionEyeColor” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPhysicalDescriptionEyeColorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPhysicalDescriptionEyeColorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PhysicalDescriptionHeight” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPhysicalDescriptionHeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPhysicalDescriptionHeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PhysicalDescriptionSex” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPhysicalDescriptionSexFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPhysicalDescriptionSexFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PhysicalDescriptionWeightRange” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPhysicalDescriptionWeightRangeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPhysicalDescriptionWeightRangeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PlaceOfBirth” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPlaceOfBirthFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPlaceOfBirthFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RaceEthnicity” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidRaceEthnicityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidRaceEthnicityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SocialSecurityNumber” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidSocialSecurityNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidSocialSecurityNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “StandardEndorsementCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidStandardEndorsementCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidStandardEndorsementCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “StandardRestrictionCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidStandardRestrictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidStandardRestrictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “StandardVehicleClassification” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidStandardVehicleClassificationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidStandardVehicleClassificationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Under18Until” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidUnder18UntilFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidUnder18UntilFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Under19Until” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidUnder19UntilFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidUnder19UntilFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Under21Until” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidUnder21UntilFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidUnder21UntilFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “UniqueCustomerIdentifier” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidUniqueCustomerIdentifierFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidUniqueCustomerIdentifierFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VeteranIndicator” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidVeteranIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidVeteranIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “WeightKilograms” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidWeightKilogramsFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidWeightKilogramsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “WeightPounds” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidWeightPoundsFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidWeightPoundsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentDEMedicalPlanPatient;
@class SBSDKBarcodeDocumentDEMedicalPlanDoctor;
@class SBSDKBarcodeDocumentDEMedicalPlanSubheading;

/// Medical Plan.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK33SBSDKBarcodeDocumentDEMedicalPlan")
@interface SBSDKBarcodeDocumentDEMedicalPlan : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Current Page.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable currentPage;
/// Document Version Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentVersionNumber;
/// GUID.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable guid;
/// Language Country Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable languageCountryCode;
/// Patch Version Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable patchVersionNumber;
/// Total Number Of Pages.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable totalNumberOfPages;
/// Patient.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentDEMedicalPlanPatient * _Nullable patient;
/// Doctor.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentDEMedicalPlanDoctor * _Nullable doctor;
/// Subheading.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentDEMedicalPlanSubheading *> * _Nullable subheadings;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Doctor.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK39SBSDKBarcodeDocumentDEMedicalPlanDoctor")
@interface SBSDKBarcodeDocumentDEMedicalPlanDoctor : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Doctor Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable doctorNumber;
/// Email.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable email;
/// Hospital ID.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable hospitalID;
/// Issuer Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable issuerName;
/// Issuing Date And Time.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable issuingDateAndTime;
/// Pharmacy ID.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable pharmacyID;
/// Place.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable place;
/// Postal Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable postalCode;
/// Street.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable street;
/// Telephone Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable telephoneNumber;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Patient.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK40SBSDKBarcodeDocumentDEMedicalPlanPatient")
@interface SBSDKBarcodeDocumentDEMedicalPlanPatient : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Allergies And Intolerances.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable allergiesAndIntolerances;
/// Birth Date.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable birthDate;
/// Breast Feeding.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable breastFeeding;
/// Creatinine Value.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable creatinineValue;
/// First Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstName;
/// Gender.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable gender;
/// Height.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable height;
/// Last Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable lastName;
/// Patient Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable patientFreeText;
/// Patient ID.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable patientID;
/// Pre Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable preName;
/// Pregnant.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable pregnant;
/// Name Suffix.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable suffix;
/// Title.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable title;
/// Weight.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable weight;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicine;
@class SBSDKBarcodeDocumentDEMedicalPlanSubheadingPrescription;

/// Subheading.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK43SBSDKBarcodeDocumentDEMedicalPlanSubheading")
@interface SBSDKBarcodeDocumentDEMedicalPlanSubheading : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// General Note.
@property (nonatomic, readonly, copy) NSArray<SBSDKGenericDocumentField *> * _Nullable generalNotes;
/// Key Words.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable keyWords;
/// Subheading Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable subheadingFreeText;
/// Medicine.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicine *> * _Nullable medicines;
/// Prescription.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentDEMedicalPlanSubheadingPrescription *> * _Nullable prescriptions;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicineSubstance;

/// Medicine.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK51SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicine")
@interface SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicine : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Dosage Form.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dosageForm;
/// Dosage Form Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dosageFormFreeText;
/// Dosage Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dosageFreeText;
/// Dosing Unit.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dosingUnit;
/// Dosing Unit Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dosingUnitFreeText;
/// Drug Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable drugName;
/// Evening Intake Dose.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable evening;
/// General Notes.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable generalNotes;
/// Midday Intake Dose.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable midday;
/// Morning Intake Dose.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable morning;
/// Night Intake Dose.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable night;
/// Pharmaceutical Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable pharmaceuticalNumber;
/// Reason For Treatment.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable reasonForTreatment;
/// Relevant Info.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable relevantInfo;
/// Substance.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicineSubstance *> * _Nullable substances;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Substance.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK60SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicineSubstance")
@interface SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicineSubstance : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Active Substance.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable activeSubstance;
/// Potency.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable potency;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Prescription.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK55SBSDKBarcodeDocumentDEMedicalPlanSubheadingPrescription")
@interface SBSDKBarcodeDocumentDEMedicalPlanSubheadingPrescription : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// General Information.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable generalInformation;
/// Prescription Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable prescriptionFreeText;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentGS1Element;

/// GS1.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK23SBSDKBarcodeDocumentGS1")
@interface SBSDKBarcodeDocumentGS1 : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Element.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentGS1Element *> * _Nullable elements;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentGS1ElementValidationError;

/// GS1 Element.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK30SBSDKBarcodeDocumentGS1Element")
@interface SBSDKBarcodeDocumentGS1Element : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Application Identifier.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable applicationIdentifier;
/// Data Title.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dataTitle;
/// Description.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable elementDescription;
/// Raw Value.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable rawValue;
/// ValidationError.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentGS1ElementValidationError *> * _Nullable validationErrors;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Validation Errors.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK45SBSDKBarcodeDocumentGS1ElementValidationError")
@interface SBSDKBarcodeDocumentGS1ElementValidationError : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Error Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable code;
/// Reason.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable reason;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// ID Card.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK32SBSDKBarcodeDocumentIDCardPDF417")
@interface SBSDKBarcodeDocumentIDCardPDF417 : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Birth Date. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable birthDate;
/// Date Expired. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateExpired;
/// Date Issued. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateIssued;
/// Document Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentCode;
/// First Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstName;
/// Last Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable lastName;
/// Optional.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable optional;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Medical Certificate.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK38SBSDKBarcodeDocumentMedicalCertificate")
@interface SBSDKBarcodeDocumentMedicalCertificate : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Accident.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable accident;
/// Assigned To Accident Insurance Doctor.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable assignedToAccidentInsuranceDoctor;
/// Birth Date. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable birthDate;
/// Child Needs Care From.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable childNeedsCareFrom;
/// Child Needs Care Until.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable childNeedsCareUntil;
/// Diagnose.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable diagnose;
/// Diagnosed On. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable diagnosedOn;
/// Doctor Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable doctorNumber;
/// Document Date. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentDate;
/// First Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstName;
/// Health Insurance Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable healthInsuranceNumber;
/// Incapable Of Work Since. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable incapableOfWorkSince;
/// Incapable Of Work Until. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable incapableOfWorkUntil;
/// Initial Certificate.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable initialCertificate;
/// Insured Person Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable insuredPersonNumber;
/// Last Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable lastName;
/// Place Of Operation Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable placeOfOperationNumber;
/// Renewed Certificate.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable renewedCertificate;
/// Requires Care.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable requiresCare;
/// Status.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable status;
/// Work Accident.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable workAccident;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// A class to parse a raw string value (usually taken from the barcode) into a formatted document of the supported type.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK26SBSDKBarcodeDocumentParser")
@interface SBSDKBarcodeDocumentParser : NSObject
/// Parses the string into one of the supported document type or returns nil if none of the supported document types was detected.
/// \param inputString The string to be parsed.
///
///
/// returns:
/// Generic document or nil.
- (SBSDKGenericDocument * _Nullable)parseDocumentWithInputString:(NSString * _Nonnull)inputString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

/// A generic documents type.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK24SBSDKGenericDocumentType")
@interface SBSDKGenericDocumentType : NSObject
/// A dictionary of the default display strings for generic document types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nonnull userDocumentTypeDisplayTexts;)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)userDocumentTypeDisplayTexts SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserDocumentTypeDisplayTexts:(NSDictionary<NSString *, NSString *> * _Nonnull)value;
/// A dictionary of the default display strings for generic document types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull defaultDocumentTypeDisplayTexts;)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)defaultDocumentTypeDisplayTexts SWIFT_WARN_UNUSED_RESULT;
/// The local document type name.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The unique global document type name prefixed with the document types of all containing documents.
@property (nonatomic, copy) NSString * _Nonnull fullName;
/// The normalized global document type name.
/// Common document types appearing as child documents in different places will often have the same normalized type name.
@property (nonatomic, copy) NSString * _Nonnull normalizedName;
/// The friendly, human-readable display name of this document type in English.
@property (nonatomic, readonly, copy) NSString * _Nullable displayText;
@property (nonatomic, strong) NSNumber * _Nullable listIndex;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name fullName:(NSString * _Nonnull)fullName normalizedName:(NSString * _Nonnull)normalizedName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Root document type.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK28SBSDKBarcodeDocumentRootType")
@interface SBSDKBarcodeDocumentRootType : SBSDKGenericDocumentType
/// Array of all available document root types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull allDocumentTypes;)
+ (NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull)allDocumentTypes SWIFT_WARN_UNUSED_RESULT;
/// Creates a strongly-typed wrapper of the given document.
/// Returns nil if the document type is not part of this document schema.
+ (SBSDKGenericDocumentWrapper * _Nullable)wrap:(SBSDKGenericDocument * _Nonnull)document SWIFT_WARN_UNUSED_RESULT;
/// Returns root type corresponding to the given document.
+ (SBSDKBarcodeDocumentRootType * _Nullable)rootTypeFrom:(SBSDKGenericDocument * _Nonnull)document SWIFT_WARN_UNUSED_RESULT;
/// BoardingPass document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull boardingPass;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)boardingPass SWIFT_WARN_UNUSED_RESULT;
/// SwissQR document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull swissQR;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)swissQR SWIFT_WARN_UNUSED_RESULT;
/// DEMedicalPlan document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull deMedicalPlan;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)deMedicalPlan SWIFT_WARN_UNUSED_RESULT;
/// IDCardPDF417 document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull idCardPDF417;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)idCardPDF417 SWIFT_WARN_UNUSED_RESULT;
/// GS1 document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull gs1;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)gs1 SWIFT_WARN_UNUSED_RESULT;
/// SEPA document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull sepa;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)sepa SWIFT_WARN_UNUSED_RESULT;
/// MedicalCertificate document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull medicalCertificate;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)medicalCertificate SWIFT_WARN_UNUSED_RESULT;
/// VCard document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull vCard;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)vCard SWIFT_WARN_UNUSED_RESULT;
/// AAMVA document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull aamva;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)aamva SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name fullName:(NSString * _Nonnull)fullName normalizedName:(NSString * _Nonnull)normalizedName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class SBSDKBarcodeType;

@interface SBSDKBarcodeDocumentRootType (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Retrieves the supported barcode types for a given array of barcode document formats.
/// \param documentFormats An array of barcode document formats.
///
///
/// returns:
/// An array of supported barcode types.
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)supportedBarcodeTypesFor:(NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull)documentFormats SWIFT_WARN_UNUSED_RESULT;
@end


/// SEPA.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK24SBSDKBarcodeDocumentSEPA")
@interface SBSDKBarcodeDocumentSEPA : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Amount.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable amount;
/// Character Set.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable characterSet;
/// Identification.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable identification;
/// Information.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable information;
/// Amount.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable purpose;
/// Receiver BIC.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable receiverBIC;
/// Receiver IBAN.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable receiverIBAN;
/// Receiver Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable receiverName;
/// Remittance.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable remittance;
/// Service Tag.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable serviceTag;
/// Version.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable version;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// SwissQR.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKBarcodeDocumentSwissQR")
@interface SBSDKBarcodeDocumentSwissQR : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Additional Billing Information.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable additionalBillingInformation;
/// Additional Info Trailer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable additionalInfoTrailer;
/// Additional Info Unstructured.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable additionalInfoUnstructured;
/// Alternative Procedure Parameter.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable alternativeProcedureParameter;
/// Amount.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable amount;
/// Currency.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable currency;
/// Debtor Address Type.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorAddressType;
/// Debtor Building Or Address Line 2.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorBuildingOrAddressLine2;
/// Debtor Country.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorCountry;
/// Debtor Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorName;
/// Debtor Place.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorPlace;
/// Debtor Postal Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorPostalCode;
/// Debtor Street Or Address Line 1.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorStreetOrAddressLine1;
/// Due Date.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dueDate;
/// Encoding.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable encoding;
/// Final Payee Address Type.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeeAddressType;
/// Final Payee Building Or Address Line 2.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeeBuildingOrAddressLine2;
/// Final Payee Country.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeeCountry;
/// Final Payee Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeeName;
/// Final Payee Place.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeePlace;
/// Final Payee Postal Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeePostalCode;
/// Final Payee Street Or Address Line 1.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeeStreetOrAddressLine1;
/// IBAN.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable iban;
/// Payee Address Type.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeeAddressType;
/// Payee Building Or Address Line 2.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeeBuildingOrAddressLine2;
/// Payee Country.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeeCountry;
/// Payee Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeeName;
/// Payee Place.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeePlace;
/// Payee Postal Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeePostalCode;
/// Payee Street Or Address Line 1.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeeStreetOrAddressLine1;
/// Payment Reference.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable paymentReference;
/// Payment Reference Type.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable paymentReferenceType;
/// Version.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable version;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentVCardEntry;

/// VCard.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK25SBSDKBarcodeDocumentVCard")
@interface SBSDKBarcodeDocumentVCard : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Version.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable version;
/// Source.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable source;
/// Kind.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable kind;
/// XML.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable xml;
/// Name.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable name;
/// FirstName.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable firstName;
/// Nickname.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable nickname;
/// Birthday.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable birthday;
/// Anniversary.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable anniversary;
/// Gender.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable gender;
/// DeliveryAddress.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable deliveryAddress;
/// Photo.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable photo;
/// TelephoneNumber.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable telephoneNumber;
/// Email.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable email;
/// IMPP.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable impp;
/// Languages.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable languages;
/// TimeZone.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable timeZone;
/// GeoLocation.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable geoLocation;
/// Title.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable title;
/// Role.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable role;
/// Logo.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable logo;
/// Organisation.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable organisation;
/// Member.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable member;
/// Related.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable related;
/// Categories.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable categories;
/// Note.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable note;
/// ProductId.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable productId;
/// Revision.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable revision;
/// Sound.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable sound;
/// UID.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable uid;
/// ClientPIDMap.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable clientPIDMap;
/// URL.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable url;
/// PublicKey.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable publicKey;
/// BusyTimeURL.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable busyTimeURL;
/// CalendarURIForRequests.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable calendarURIForRequests;
/// CalendarURI.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable calendarURI;
/// Custom.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentVCardEntry *> * _Nullable customs;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// VCard Entry.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK30SBSDKBarcodeDocumentVCardEntry")
@interface SBSDKBarcodeDocumentVCardEntry : SBSDKGenericDocumentWrapper
/// Raw Value.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable rawValue;
/// Type Modifier.
@property (nonatomic, readonly, copy) NSArray<SBSDKGenericDocumentField *> * _Nullable typeModifiers;
/// Value.
@property (nonatomic, readonly, copy) NSArray<SBSDKGenericDocumentField *> * _Nullable values;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

/// The engine mode of the barcode recognizer.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeEngineMode, open) {
/// Legacy mode.
  SBSDKBarcodeEngineModeLegacy = 0,
/// Next generation engine mode based on machine learning.
  SBSDKBarcodeEngineModeNextGen = 1,
};

/// The type of the barcode image generation.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeImageGenerationType, open) {
/// No barcode image generation.
  SBSDKBarcodeImageGenerationTypeNone = 0,
/// Generating a barcode image from the last video frame. Faster, but has lower resolution.
  SBSDKBarcodeImageGenerationTypeFromVideoFrame = 1,
/// Generating a barcode image from separately captured frame. Higher resolution, but might have a slight delay.
  SBSDKBarcodeImageGenerationTypeCapturedImage = 2,
};

/// The checksum algorithm for MSI-Plessey type barcodes.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeMSIPlesseyChecksumAlgorithm, open) {
/// None.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmNone = 0,
/// Mod10.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod10 = 0x1,
/// Mod11IBM.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod11IBM = 0x2,
/// Mod11NCR.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod11NCR = 0x4,
/// Mod1010.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod1010 = 0x8,
/// Mod1110IBM.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod1110IBM = 0x10,
/// Mod1110NCR.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod1110NCR = 0x20,
};

/// The barcode overlay text format.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeOverlayFormat, open) {
/// Shows the barcode overlay frame only.
  SBSDKBarcodeOverlayFormatNone = 0,
/// Shows the barcode value.
  SBSDKBarcodeOverlayFormatCode = 1,
/// Shows the barcode value with the barcode format.
  SBSDKBarcodeOverlayFormatCodeAndType = 2,
};

/// The capture mode of the barcode scan and count.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeScanAndCountCaptureMode, open) {
/// Uses the last frame form the camera input to detect barcodes on.
  SBSDKBarcodeScanAndCountCaptureModeVideoFrame = 0,
/// Captures a still image and detects barcodes on it.
  SBSDKBarcodeScanAndCountCaptureModeCapturedImage = 1,
};

@class SBSDKBaseScannerGeneralConfiguration;
@class SBSDKBaseScannerZoomConfiguration;
@class SBSDKBaseScannerEnergyConfiguration;
@class SBSDKBaseScannerViewFinderConfiguration;
@class SBSDKCameraDevice;
enum SBSDKFinderViewStyle : NSInteger;
@class UIView;
@class UIColor;
@class UIImage;
@class NSBundle;
@class NSCoder;
@class UITraitCollection;
@protocol UIViewControllerTransitionCoordinator;

/// A highly customizable camera view controller that delivers a basic camera functionality along with video
/// frame extraction and preprocessing, orientation correction and still image capturing.
/// Additionally you can opt-in several features using the SBSDKBaseScannerXXXConfiguration classes, e.g. zooming,
/// energy management and view finder.
/// This class provides functions to be used and overwritten by subclasses to implement different detectors and recognizers.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK30SBSDKBaseScannerViewController")
@interface SBSDKBaseScannerViewController : UIViewController
/// The general configuration of the receiver. Lets you customize some of the basic behavior.
/// It is copied on setting, so mutating the configuration after setting will not change the behavior.
/// Instead, re-configure your instance and set it again.
@property (nonatomic, strong) SBSDKBaseScannerGeneralConfiguration * _Nonnull generalConfiguration;
/// The zoom configuration of the receiver. Lets you enable customize the zooming behavior.
/// It is copied on setting, so mutating the configuration after setting will not change the behavior.
/// Instead, re-configure your instance and set it again.
@property (nonatomic, strong) SBSDKBaseScannerZoomConfiguration * _Nonnull zoomConfiguration;
/// The energy configuration of the receiver. Lets you enable and customize the energy management.
/// It is copied on setting, so mutating the configuration after setting will not change the behavior.
/// Instead, re-configure your instance and set it again.
@property (nonatomic, strong) SBSDKBaseScannerEnergyConfiguration * _Nonnull energyConfiguration;
/// The view finder configuration of the receiver. Lets you enable and customize the view finder.
/// It is copied on setting, so mutating the configuration after setting will not change the behavior.
/// Instead, re-configure your instance and set it again.
@property (nonatomic, strong) SBSDKBaseScannerViewFinderConfiguration * _Nonnull viewFinderConfiguration;
/// Sets or gets the used camera device. Can be used to toggle between the front and back cameras, tele and wide lens.
@property (nonatomic, strong) SBSDKCameraDevice * _Nonnull cameraDevice;
/// Whether the camera permission status is accepted or not. Readonly.
@property (nonatomic, readonly) BOOL isCameraUsageAuthorized;
/// Returns <code>True</code>, after the receivers viewDidAppear method was called and <code>False</code> after viewWillDisappear was called. Readonly.
@property (nonatomic, readonly) BOOL isVisible;
/// Set to <code>False</code>, if you want to stop the recognition. Set to <code>True</code> otherwise.
@property (nonatomic) BOOL isRecognitionEnabled;
/// Returns <code>True</code>, if the camera session is currently being interrupted, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isSessionInterrupted;
/// Whether the receiver is currently capturing a still image or not. Readonly.
@property (nonatomic, readonly) BOOL isCapturingStillImage;
/// Returns <code>True</code>, if the video light is available on the device, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isFlashLightAvailable;
/// Enables or disables the video light on the device.
@property (nonatomic) BOOL isFlashLightEnabled;
/// Returns <code>True</code>, if energy saving currently is active and the recognition runs at a very low rate, <code>False</code> otherwise.
@property (nonatomic, readonly) BOOL isEnergySavingActive;
/// The current camera zoom factor: a value between 0.0 (the minimum value of the zoom range)
/// and 1.0 (the maximum value of the zoom range). Readonly.
@property (nonatomic, readonly) CGFloat cameraZoomFactor;
/// The current absolute camera zoom factor: a value between 1.0x and the maximum video zoom factor of the camera device. Readonly.
@property (nonatomic, readonly) CGFloat cameraZoomFactorAbsolute;
/// Returns <code>True</code>, if focus lock is enabled, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isFocusLockEnabled;
/// Returns <code>True</code> if the camera is currently frozen, <code>False</code> otherwise.
@property (nonatomic, readonly) BOOL isCameraFrozen;
/// The time interval since the last successful recognition.
@property (nonatomic, readonly) NSTimeInterval timeIntervalSinceLastSuccessfulRecognition;
/// A block being called when the flashlight is toggled. Defaults to <code>nil</code>.
@property (nonatomic, copy) void (^ _Nullable flashLightDidChangeHandler)(void);
/// A block being called when the application status was changed. Defaults to <code>nil</code>.
@property (nonatomic, copy) void (^ _Nullable applicationStateDidChangeHandler)(enum SBSDKApplicationState);
/// A block being executed when the zoom factor has changed. The new absolute zoom factor is provided as parameter.
@property (nonatomic, copy) void (^ _Nullable zoomFactorDidChangeHandler)(CGFloat);
/// A block being called whenever the view finder rectangle changes.
/// Can be uses to layout UI elements with respect to the view finder position. Defaults to <code>nil</code>.
/// Equals to CGRectZero, if the view finder is not active.
@property (nonatomic, copy) void (^ _Nullable viewFinderRectDidChangeHandler)(CGRect);
/// The drawing style of the finder view.
/// Defaults to <code>SBSDKFinderView/Style/stroke</code>.
@property (nonatomic) enum SBSDKFinderViewStyle viewFinderStyle;
/// The area where the finder should be placed in the coordinate system of the receiver.
/// Is ignored if finder safe area is empty (zero height or width).
/// Defaults to the zero rectangle.
@property (nonatomic) CGRect finderSafeArea;
/// A transparent view sitting on top of the camera layer being automatically layouted to match the camera layer.
/// Can be used to render additional contents above the camera layer.
@property (nonatomic, readonly, strong) UIView * _Nonnull overlayView;
/// The background color of the receivers view.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Disables auto-focus and locks the lens at the specified lens position.
/// \param lensPosition The position of the lens. Values can be between 0.0f (minimum focusing distance) and
/// 1.0f (maximum focusing distance). The value will be clamped to [0.0f, 1.0f].
///
///
/// returns:
/// <code>True</code>, if the attempt to lock the focus was successful, <code>False</code> if the attempt failed or if focus lock is
/// not available.
- (BOOL)beginFocusLockAtLensPosition:(CGFloat)lensPosition;
/// Ends the focus lock and returns to standard continuous auto-focus.
- (void)endFocusLock;
/// Sets the zoom factor to the specified value.
/// The zoom range must be specified in the receivers zoomConfigurations zoomRange property.
/// A zoom animation will be played if the receivers zoomConfigurations shouldAnimateZooming property is set to <code>True</code>.
/// \param factor A value between 0.0 (the minimum value of the zoom range) and 1.0
/// (the maximum value of the zoom range). Values outside the (0.0 - 1.0) range will be clipped.
///
- (void)setCameraZoomFactor:(CGFloat)factor;
/// Sets the zoom factor to the specified value, optionally animated.
/// The zoom range must be specified in the receivers zoomConfigurations zoomRange property.
/// A zoom animation will be played if the receivers zoomConfigurations shouldAnimateZooming property is set to <code>True</code>.
/// \param factor A value between 0.0 (the minimum value of the zoom range) and 1.0
/// (the maximum value of the zoom range). Values outside the (0.0 - 1.0) range will be clipped.
///
/// \param animated <code>True</code>, if the zoom should be animated. <code>False</code> otherwise.
///
- (void)setCameraZoomFactor:(CGFloat)factor animated:(BOOL)animated;
/// Resets the zoom factor to the value 0.0: the minimum value of the zoom range
/// specified in the receivers zoomConfigurations zoomRange property.
- (void)resetZoom;
/// Manually starts energy saving mode.
- (void)startEnergySaving;
/// Manually ends energy saving mode.
- (void)endEnergySaving;
/// Plays standard bleep sound.
- (void)playBleepSound;
///
/// returns:
/// The current rect of the view finder in the coordinate system of the receivers view.
/// If no view finder is active CGRectZero is returned.
- (CGRect)currentViewFinderRect SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The current rect of the secondary view finder in the coordinate system of the receivers view.
/// If no secondary view finder is active CGRectZero is returned.
- (CGRect)currentSecondaryViewFinderRect SWIFT_WARN_UNUSED_RESULT;
/// Captures a still image asynchronously and passes either the UIImage or an error to the completion handler.
/// \param completion The completion handler that is called when the still image has been captured.
///
- (void)captureStillImageWithCompletionHandler:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completion;
/// Freezes the cameras preview layer by stopping the camera session.
- (void)freezeCamera;
/// Unfreezes the previously frozen cameras preview layer by restarting the camera session.
- (void)unfreezeCamera;
/// Embeds the receiver as a child view controller of the parent view controller.
/// The scanner controller view is added to the parent view, which must be an adjacent view of the receivers view.
/// \param parentViewController The UIViewController that the receiver will be embedded into.
///
/// \param parentView The UIView that holds and layouts the receivers view. 
///
///
/// returns:
/// <code>True</code>, if embedding the receiver was successful, <code>False</code> otherwise.
- (BOOL)attachWithParentViewController:(UIViewController * _Nonnull)parentViewController parentView:(UIView * _Nonnull)parentView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end

@protocol SBSDKBarcodeScanAndCountViewControllerDelegate;
enum SBSDKBarcodesExtensionFilter : NSInteger;
@class SBSDKScanAndCountPolygonStyle;
@class SBSDKBarcodeScannerAccumulatingResult;

/// A <code>UIViewController</code> subclass to show a camera screen with the barcode detector.
/// Screen also shows snap, scan more and reset buttons.
/// The snap button starts the scanning when tapped.
/// The snap button resets the scanning when tapped again.
/// Instead it is installing itself as a child view controller onto a given parent view controller.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK38SBSDKBarcodeScanAndCountViewController")
@interface SBSDKBarcodeScanAndCountViewController : SBSDKBaseScannerViewController
/// The delegate of the receiver. Weak.
@property (nonatomic, weak) id <SBSDKBarcodeScanAndCountViewControllerDelegate> _Nullable delegate;
/// Barcode types (EAN, DataMatrix, Aztec, QR, etc) that can be returned in <code>didDetectBarcodes</code> delegate method.
/// If you pass an empty array, it will be initialized with <code>SBSDKBarcodeType/commonTypes</code>.
/// Defaults to <code>SBSDKBarcodeType/commonTypes</code>.
@property (nonatomic, copy) NSArray<SBSDKBarcodeType *> * _Nonnull acceptedBarcodeTypes;
/// Filter for extended EAN and UPC barcodes.
/// Defaults to disabled <code>SBSDKBarcodesExtensionFilter/noFilter</code>.
@property (nonatomic) enum SBSDKBarcodesExtensionFilter extensionFilter;
/// Additional parameters for tweaking the detection of barcodes.
@property (nonatomic, strong) SBSDKBarcodeAdditionalParameters * _Nonnull additionalDetectionParameters;
/// The barcode detector engine mode.
/// Defaults to <code>SBSDKBarcodeEngineMode/nextGen</code>.
@property (nonatomic) enum SBSDKBarcodeEngineMode engineMode;
/// The barcode scan and count capture mode.
/// Defaults to <code>SBSDKBarcodeScanAndCountCaptureMode/videoFrame</code>.
@property (nonatomic) enum SBSDKBarcodeScanAndCountCaptureMode captureMode;
/// Whether the shutter button is hidden or not.
/// Defaults to <code>False</code>.
@property (nonatomic) BOOL shutterButtonHidden;
/// The default style for the polygon around the barcodes.
/// Defaults to blueish-green style.
@property (nonatomic, strong) SBSDKScanAndCountPolygonStyle * _Nonnull polygonStyle;
/// Stores all the scanned barcode results accumulated through multiple scans.
/// The storage is cleared only after the reset method has been called.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeScannerAccumulatingResult *> * _Nonnull countedBarcodes;
/// Installs the receiver as child view controller onto the parent view controllers view using its entire bounds area.
/// If <code>parentViewController</code> conforms to <code>SBSDKBarcodeScanAndCountViewControllerDelegate</code>, it is automatically set as delegate.
/// \param parentViewController The view controller the newly created instance is embedded into.
///
/// \param parentView The view the newly created instance is embedded into.
///
- (nullable instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController parentView:(UIView * _Nonnull)parentView;
/// Installs the receiver as child view controller onto the parent view controllers view using its entire bounds area.
/// If <code>parentViewController</code> conforms to <code>SBSDKBarcodeScanAndCountViewControllerDelegate</code> and if the delegate is <code>nil</code>, it is
/// automatically set as delegate.
/// \param parentViewController The view controller the newly created instance is embedded into.
///
/// \param parentView The view the newly created instance is embedded into.
///
/// \param delegate The delegate for the receiver.
///
- (nullable instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController parentView:(UIView * _Nonnull)parentView delegate:(id <SBSDKBarcodeScanAndCountViewControllerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of this class with the default configuration.
/// note:
/// It’s recommended to use the <code>init(parentViewController:parentView:delegate:)</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Clears the <code>countedBarcodes</code> property.
- (void)clearCountedBarcodes;
/// Extracts the image, freezes the camera and scans the image for barcodes.
- (void)scanAndCount;
/// Resumes the camera and prepares the receiver for another scan.
- (void)continueScanning;
- (void)viewDidLoad;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end

@class SBSDKBarcodeScannerResult;

/// A delegate protocol to handle the barcode results from <code>SBSDKBarcodeScanAndCountViewController</code>.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK46SBSDKBarcodeScanAndCountViewControllerDelegate_")
@protocol SBSDKBarcodeScanAndCountViewControllerDelegate
/// Informs the delegate that the receiver has detected some barcodes.
/// \param controller The calling <code>SBSDKBarcodeScanAndCountViewController</code>.
///
/// \param codes Array of <code>SBSDKBarcodeScannerResult</code> containing the detected barcodes.
///
- (void)barcodeScanAndCountController:(SBSDKBarcodeScanAndCountViewController * _Nonnull)controller didDetectBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes;
@optional
/// Asks the delegate to filter the detected barcodes.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScanAndCountViewController</code>.
///
/// \param codes Array of <code>SBSDKBarcodeScannerResult</code> containing the detected barcodes.
///
///
/// returns:
/// The filtered array of barcodes to be delivered to the post-processing.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)barcodeScanAndCountController:(SBSDKBarcodeScanAndCountViewController * _Nonnull)controller filterResults:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to provide a custom barcode overlay polygon style for the given barcode.
/// If not implemented, the default style is used.
/// Is not called if a custom overlay is used.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScanAndCountViewController</code>.
///
/// \param code Instance of <code>SBSDKBarcodeScannerResult</code> containing the detected barcode.
///
///
/// returns:
/// The style to draw the polygon.
- (SBSDKScanAndCountPolygonStyle * _Nonnull)barcodeScanAndCountController:(SBSDKBarcodeScanAndCountViewController * _Nonnull)controller polygonStyleForBarcode:(SBSDKBarcodeScannerResult * _Nonnull)code SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to provide the overlay view for a given code.
/// If not implemented, a default green checkmark is drawn as an overlay.
/// If implemented, but <code>nil</code> is returned for the given code, no overlay is drawn for that code.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScanAndCountViewController</code>.
///
/// \param code Instance of <code>SBSDKBarcodeScannerResult</code> containing the detected barcode.
///
///
/// returns:
/// Overlay for the barcode as a <code>UIView</code>.
- (UIView * _Nullable)barcodeScanAndCountController:(SBSDKBarcodeScanAndCountViewController * _Nonnull)controller overlayForBarcode:(SBSDKBarcodeScannerResult * _Nonnull)code SWIFT_WARN_UNUSED_RESULT;
/// Informs the delegate when it starts scanning.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScanAndCountViewController</code>.
///
- (void)barcodeScanAndCountControllerDidStartScanning:(SBSDKBarcodeScanAndCountViewController * _Nonnull)controller;
@end


/// Creates an <code>SBSDKBarcodeScanner</code> with no frame accumulator for detecting all supported barcode types.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK19SBSDKBarcodeScanner")
@interface SBSDKBarcodeScanner : NSObject
/// Barcode types to limit detection results to.
/// If you pass an empty array, it will be initialized with <code>SBSDKBarcodeType/commonTypes</code>.
/// Defaults to <code>SBSDKBarcodeType/commonTypes</code>.
@property (nonatomic, copy) NSArray<SBSDKBarcodeType *> * _Nonnull acceptedBarcodeTypes;
/// Barcode document types to limit detection results to.
/// When it’s empty - all documents can be returned.
/// Defaults to an empty array.
@property (nonatomic, copy) NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull acceptedDocumentTypes;
/// Filter for extended EAN and UPC barcodes.
/// By default the filter is disabled <code>SBSDKBarcodesExtensionFilter/noFilter</code>.
@property (nonatomic) enum SBSDKBarcodesExtensionFilter extensionFilter;
/// Regular expression pattern to limit detection results.
/// Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable regularExpressionPattern;
/// Additional parameters for tweaking the detection of barcodes.
@property (nonatomic, strong) SBSDKBarcodeAdditionalParameters * _Nonnull additionalParameters;
/// The barcode detectors engine mode.
/// Defaults to <code>SBSDKBarcodeEngineMode/nextGen</code>.
@property (nonatomic) enum SBSDKBarcodeEngineMode engineMode;
/// Set to <code>True</code>, if you want to recognize barcodes on consecutive video frames.
/// Otherwise, if you want to recognize on a single image, set to <code>False</code>.
/// Defaults to <code>False</code>.
@property (nonatomic) BOOL useLiveMode;
/// Creates an <code>SBSDKBarcodeScanner</code> with no frame accumulator for detecting all <code>SBSDKBarcodeType/commonTypes</code> barcode types.
- (nonnull instancetype)init;
/// Creates an <code>SBSDKBarcodeScanner</code> with no frame accumulator for detecting only the given barcode types.
/// \param barCodeTypes Barcode types to limit detection results to.
///
- (nonnull instancetype)initWithTypes:(NSArray<SBSDKBarcodeType *> * _Nonnull)barCodeTypes;
/// Creates an <code>SBSDKBarcodeScanner</code> that accumulates multiple frames before returning a detection result.
/// The barcode scanner’s detect methods will return empty results until they’ve been called the
/// given number of times. Then, they will perform detection on the frame with the least
/// amount of blur. Intended for using with live detection.
/// \param barCodeTypes Barcode types to limit detection results to.
///
/// \param useLiveMode Whether you want to recognize in live mode or not.
///
- (nonnull instancetype)initWithTypes:(NSArray<SBSDKBarcodeType *> * _Nonnull)barCodeTypes liveMode:(BOOL)useLiveMode OBJC_DESIGNATED_INITIALIZER;
/// Search and decode specified types of barcodes on given image.
/// Strong recommendation is to use this method with static image barcode detection and not live detection.
/// The reason is that video stream returns rotated image, so for example for portrait device orientation, every frame returned will be in landscape left orientation.
/// \param image The image where search is to be done.
///
///
/// returns:
/// List of found barcodes.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nullable)detectBarCodesOnImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Search and decode specified types of barcodes on given image.
/// The reason is that video stream returns rotated image, so for example for portrait device orientation, every frame returned will be in landscape left orientation.
/// Strong recommendation is to use this method with static image barcode detection and not live detection.
/// This method does not handle this orientation difference.
/// For live detection using  <code>detectBarCodes(on:orientation:in:)-9qxu2</code>  or <code>detectBarCodes(on:orientation:in:)-7ue2l</code>  is more preferable.
/// \param image The image where search is to be done.
///
/// \param rect Rectangle in image coordinates in which to perform the search. Must be inside the image.
///
///
/// returns:
/// List of found barcodes.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nullable)detectBarCodesOnImage:(UIImage * _Nonnull)image inRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Search and decode specified types of barcodes on given image.
/// This function is intended to be used use with live detection.
/// Video stream from device returns a rotated image, so for example for portrait device orientation, every frame returned will be in landscape left orientation.
/// This function handles these orientation differences, so you shouldn’t fix or rotate the input image.
/// \param image The image where search is to be done.
///
/// \param videoOrientation Video frame orientation. Should be the orientation that the device currently has, not actual image orientation.
///
/// \param rect Rectangle in image coordinates in which to perform the search. Must be within the image frame.
///
///
/// returns:
/// List of found barcodes.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nullable)detectBarCodesOnImage:(UIImage * _Nonnull)image orientation:(AVCaptureVideoOrientation)videoOrientation inRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Search and decode specified types of barcodes from sample buffer reference.
/// This function is intended to be used with live detection.
/// Video stream from device returns a rotated image, so for example for portrait device orientation, every frame returned will be in landscape left orientation.
/// This function handles these orientation differences, so you shouldn’t fix or rotate the input buffer.
/// Keep in mind, that the buffer received from the video stream is handled by the system. So in some cases it might be cleaned or changed by the system
/// before recognition occurs. You may convert the buffer to UIImage upon receiving it and use <code>detectBarCodesOnImage:orientation:inRect:</code>
/// function, if that is an issue.
/// \param sampleBuffer The sample buffer reference.
///
/// \param videoOrientation Video frame orientation. Should be the orientation that the device currently has, not actual image orientation.
///
///
/// returns:
/// List of found barcodes.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nullable)detectBarCodesOnSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer orientation:(AVCaptureVideoOrientation)videoOrientation SWIFT_WARN_UNUSED_RESULT;
/// Search and decode specified types of barcodes from sample buffer reference.
/// This function is intended to be used with live detection.
/// Video stream from device returns a rotated image, so for example for portrait device orientation, every frame returned will be in landscape left orientation.
/// This function handles these orientation differences, so you shouldn’t fix or rotate the input buffer.
/// Keep in mind, that the buffer received from the video stream is handled by the system. So in some cases it might be cleaned or changed by the system
/// before recognition occurs. You may convert the buffer to UIImage upon receiving it and use <code>detectBarCodesOnImage:orientation:inRect:</code>
/// function, if that is an issue.
/// \param sampleBuffer The sample buffer reference.
///
/// \param videoOrientation Video frame orientation. Should be the orientation that the device currently has, not actual image orientation.
///
/// \param rect Rectangle in image coordinates in which to perform the search. Must be inside the image.
///
///
/// returns:
/// List of found barcodes.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nullable)detectBarCodesOnSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer orientation:(AVCaptureVideoOrientation)videoOrientation inRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
@end


/// A class to keep track of a detected barcode and the number of times it is scanned.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK37SBSDKBarcodeScannerAccumulatingResult")
@interface SBSDKBarcodeScannerAccumulatingResult : NSObject
/// The detected barcode.
@property (nonatomic, readonly, strong) SBSDKBarcodeScannerResult * _Nonnull code;
/// The number of times the code has been scanned.
/// Defaults to 1.
@property (nonatomic) NSInteger scanCount;
/// Designated initializer.
/// \param barcodeResult An instance of the barcode scanner result object.
///
- (nonnull instancetype)initWithBarcodeResult:(SBSDKBarcodeScannerResult * _Nonnull)barcodeResult OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBSDKPolygon;
@class NSDate;

/// This class encapsulates the result of a barcode detection.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK25SBSDKBarcodeScannerResult")
@interface SBSDKBarcodeScannerResult : NSObject
/// The barcode metadata key for the EAN/UPC extensions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKBarcodeMetadataEANUPCExtensionKey;)
+ (NSString * _Nonnull)SBSDKBarcodeMetadataEANUPCExtensionKey SWIFT_WARN_UNUSED_RESULT;
/// The barcode metadata key for the GS1 messages.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKBarcodeMetadataIsGS1MessageKey;)
+ (NSString * _Nonnull)SBSDKBarcodeMetadataIsGS1MessageKey SWIFT_WARN_UNUSED_RESULT;
/// The barcode metadata key for the GS1 Composite 2D type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKBarcodeMetadataGS1Composite2DTypeKey;)
+ (NSString * _Nonnull)SBSDKBarcodeMetadataGS1Composite2DTypeKey SWIFT_WARN_UNUSED_RESULT;
/// The barcode metadata key for the Databar stack size.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKBarcodeMetadataDatabarStacksizeKey;)
+ (NSString * _Nonnull)SBSDKBarcodeMetadataDatabarStacksizeKey SWIFT_WARN_UNUSED_RESULT;
/// SBSDKPolygon instance where the barcode was found.
@property (nonatomic, strong) SBSDKPolygon * _Nonnull polygon;
/// The barcodes type.
@property (nonatomic, readonly, strong) SBSDKBarcodeType * _Nonnull type;
/// The barcodes extension string or nil.
@property (nonatomic, readonly, copy) NSString * _Nullable extension;
/// A perspective corrected image of the barcode.
@property (nonatomic, readonly, strong) UIImage * _Nonnull barcodeImage;
/// The source image where the barcode has been detected on.
@property (nonatomic, readonly, strong) UIImage * _Nullable sourceImage;
/// The raw content value of the found barcode.
@property (nonatomic, readonly, copy) NSString * _Nonnull rawTextString;
/// The raw content value of the found barcode including an eventual extension from the metadata.
@property (nonatomic, readonly, copy) NSString * _Nonnull rawTextStringWithExtension;
/// The raw content bytes of the found barcode.
@property (nonatomic, readonly, copy) NSData * _Nonnull rawBytes;
/// The parsed known document format (if parsed successfully).
@property (nonatomic, readonly, strong) SBSDKGenericDocument * _Nullable parsedDocument;
/// The date when this barcode has been detected the last time.
@property (nonatomic, copy) NSDate * _Nonnull dateOfDetection;
/// Time interval since the last detection.
@property (nonatomic, readonly) NSTimeInterval age;
/// The metadata of the found barcode.
/// Accessible via public keys e.g. metadata[SBSDKBarcodeScannerResult.SBSDKBarcodeMetadataEANUPCExtensionKey].
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull metadata;
/// Initializer.
- (nonnull instancetype)initWithPolygon:(SBSDKPolygon * _Nonnull)polygon type:(SBSDKBarcodeType * _Nonnull)type barcodeImage:(UIImage * _Nonnull)barcodeImage sourceImage:(UIImage * _Nullable)sourceImage rawTextString:(NSString * _Nonnull)rawTextString rawBytes:(NSData * _Nonnull)rawBytes metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol SBSDKBarcodeScannerViewControllerDelegate;
@class SBSDKBarcodeTrackingOverlayController;

/// A <code>UIViewController</code> subclass to show a camera screen with the barcode detector.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK33SBSDKBarcodeScannerViewController")
@interface SBSDKBarcodeScannerViewController : SBSDKBaseScannerViewController
/// The weak delegate. See <code>SBSDKBarcodeScannerViewControllerDelegate</code> protocol.
@property (nonatomic, weak) id <SBSDKBarcodeScannerViewControllerDelegate> _Nullable delegate;
/// Machine code types (EAN, DataMatrix, Aztec, QR, etc) that can be returned in <code>SBSDKBarcodeScannerViewControllerDelegate/barcodeScannerController(_:didDetectBarcodes:)</code> delegate method.
/// If you pass an empty array, it will be initialized with <code>SBSDKBarcodeType/commonTypes</code>.
/// Defaults to <code>SBSDKBarcodeType/commonTypes</code>.
@property (nonatomic, copy) NSArray<SBSDKBarcodeType *> * _Nonnull acceptedBarcodeTypes;
/// Filter for extended EAN and UPC barcodes.
/// Defaults to disabled <code>SBSDKBarcodesExtensionFilter/noFilter</code>.
@property (nonatomic) enum SBSDKBarcodesExtensionFilter extensionFilter;
/// Additional parameters for tweaking the detection of barcodes.
@property (nonatomic, strong) SBSDKBarcodeAdditionalParameters * _Nonnull additionalDetectionParameters;
/// Barcode document types to limit detection results to.
/// When it’s empty - all documents can be returned.
/// Defaults to an empty array.
@property (nonatomic, copy) NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull acceptedDocumentTypes;
/// Regular expression pattern to limit detection results.
/// Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable regularExpressionPattern;
/// The barcode detectors engine mode.
/// Defaults to <code>SBSDKBarcodeEngineMode/nextGen</code>.
@property (nonatomic) enum SBSDKBarcodeEngineMode engineMode;
/// Specifies the way of barcode images generation or disables this generation at all.
/// Use, if you want to receive a full sized image with barcodes.
/// Defaults to <code>SBSDKBarcodeImageGenerationType/none</code>.
/// note:
/// This property has no effect if <code>SBSDKBarcodeScannerViewController/isTrackingOverlayEnabled</code> is set to <code>True</code>.
/// With the tracking overlay enabled, barcode images cannot be generated.
@property (nonatomic) enum SBSDKBarcodeImageGenerationType barcodeImageGenerationType;
/// Displays an augmented reality view that draws the frames, content and type text of the found barcodes when it finds them.
/// Defaults to <code>False</code>.
@property (nonatomic) BOOL isTrackingOverlayEnabled;
/// The barcode tracking overlay controller that shows the detected barcodes.
/// Assign its delegate or set a new instance to take over control of the tracked barcode overlay.
@property (nonatomic, readonly, strong) SBSDKBarcodeTrackingOverlayController * _Null_unspecified trackingOverlayController;
@property (nonatomic) BOOL isRecognitionEnabled;
/// Installs the receiver as child view controller onto the parent view controllers view using its entire bounds area.
/// If parentViewController conforms to <code>SBSDKBarcodeScannerViewControllerDelegate</code>, it is automatically set as delegate.
/// \param parentViewController The view controller, the newly created instance is embedded into.
///
/// \param parentView The view, the newly created instance is embedded into.
///
- (nullable instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController parentView:(UIView * _Nonnull)parentView;
/// Installs the receiver as child view controller onto the parent view controllers view using its entire bounds area.
/// If <code>parentViewController</code> conforms to <code>SBSDKBarcodeScannerViewControllerDelegate</code> and if the delegate is <code>nil</code>, it is
/// automatically set as delegate.
/// \param parentViewController The view controller the newly created instance is embedded into.
///
/// \param parentView The view, the newly created instance is embedded into.
///
/// \param delegate The delegate for the receiver.
///
- (nullable instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController parentView:(UIView * _Nonnull)parentView delegate:(id <SBSDKBarcodeScannerViewControllerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of this class with the default configuration.
/// note:
/// It’s recommended to use the <code>init(parentViewController:parentView:delegate:)</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
/// Resets the barcode results accumulator that is used for smoother results.
/// It is recommended to explicitly reset it, when there is the intention to scan for another barcode.
- (void)resetAccumulation;
@end


/// The delegate protocol of <code>SBSDKBarcodeScannerViewController</code> that provides methods for
/// enabling/disabling detection and managing detected barcodes.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK41SBSDKBarcodeScannerViewControllerDelegate_")
@protocol SBSDKBarcodeScannerViewControllerDelegate
/// Informs the delegate that the receiver has detected some barcodes.
/// \param controller The calling <code>SBSDKBarcodeScannerViewController</code>.
///
/// \param codes Array of <code>SBSDKBarcodeScannerResult</code> containing the detected barcodes.
///
- (void)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller didDetectBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes;
@optional
/// Asks the delegate if the receiver should detect barcodes on the next video frame.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScannerViewController</code>.
///
///
/// returns:
/// <code>True</code>, if barcodes should be detected on the next video frame. <code>False</code> otherwise.
- (BOOL)barcodeScannerControllerShouldDetectBarcodes:(SBSDKBarcodeScannerViewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to filter the detected barcodes.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScannerViewController</code>.
///
/// \param codes Array of <code>SBSDKBarcodeScannerResult</code> containing the detected barcodes.
///
///
/// returns:
/// The filtered array of barcodes to be delivered to the post-processing.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller filterResults:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes SWIFT_WARN_UNUSED_RESULT;
@end


/// A class that represents the style of the polygon rendered around a barcode in <code>SBSDKBarcodeTrackingOverlayController</code>.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK35SBSDKBarcodeTrackedViewPolygonStyle")
@interface SBSDKBarcodeTrackedViewPolygonStyle : NSObject
/// Turns polygon drawing on or off.
@property (nonatomic) BOOL polygonDrawingEnabled;
/// The color of the barcode polygon when not selected.
@property (nonatomic, strong) UIColor * _Nonnull polygonColor;
/// The color of the barcode polygon when selected.
@property (nonatomic, strong) UIColor * _Nonnull polygonSelectedColor;
/// The color of the barcode polygon’s background when not selected.
@property (nonatomic, strong) UIColor * _Nonnull polygonBackgroundColor;
/// The color of the barcode polygon’s background when selected.
@property (nonatomic, strong) UIColor * _Nonnull polygonBackgroundSelectedColor;
/// The width of the border around the barcode polygon.
@property (nonatomic) CGFloat borderWidth;
/// The corner radius of the border around the barcode polygon.
@property (nonatomic) CGFloat cornerRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIFont;

/// A class that represents the style and kind of the text rendered below a barcode in <code>SBSDKBarcodeTrackingOverlayController</code>.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK32SBSDKBarcodeTrackedViewTextStyle")
@interface SBSDKBarcodeTrackedViewTextStyle : NSObject
/// Turns text drawing on or off.
@property (nonatomic) BOOL textDrawingEnabled;
/// Determines the format of the text displayed on the barcode overlay.
/// Default: <code>SBSDKBarcodeOverlayFormat.codeAndType</code>
@property (nonatomic) enum SBSDKBarcodeOverlayFormat trackingOverlayTextFormat;
/// The font used for displaying barcode information.
@property (nonatomic, strong) UIFont * _Nonnull textFont;
/// The color of the barcode text.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The color of the barcode text when highlighted.
@property (nonatomic, strong) UIColor * _Nonnull selectedTextColor;
/// The background color of the barcode text.
@property (nonatomic, strong) UIColor * _Nonnull textBackgroundColor;
/// The background color of the barcode text when highlighted.
@property (nonatomic, strong) UIColor * _Nonnull textBackgroundSelectedColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBSDKTrackedBarcodeInfoViewable;

/// A class that represents the configuration options for a <code>SBSDKBarcodeTrackingOverlayController</code>.
/// This overlay is used to visualize the detected barcodes on the screen.
/// The class provides various customization options for the appearance and behavior of the overlay.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK40SBSDKBarcodeTrackingOverlayConfiguration")
@interface SBSDKBarcodeTrackingOverlayConfiguration : NSObject
/// Determines the default style of the polygon rendered around the barcode.
@property (nonatomic, strong) SBSDKBarcodeTrackedViewPolygonStyle * _Nonnull polygonStyle;
/// Determines the default style and kind of the text rendered around the barcode when not using a custom tracked view.
@property (nonatomic, strong) SBSDKBarcodeTrackedViewTextStyle * _Nonnull textStyle;
/// Determines whether the barcode polygons should be automatically selected and highlighted if tapped.
/// Default: <code>True</code>
@property (nonatomic) BOOL isSelectable;
/// Determines whether automatic barcode selection is enabled. When enabled, the detected barcodes will be automatically selected.
/// Default: <code>False</code>
@property (nonatomic) BOOL isAutomaticSelectionEnabled;
/// A custom view that can be displayed over the barcode. Must conform to <code>SBSDKTrackedBarcodeInfoView</code>.
@property (nonatomic, strong) UIView <SBSDKTrackedBarcodeInfoViewable> * _Nullable customView;
/// A custom view type that can be displayed over the barcode. Must conform to <code>SBSDKTrackedBarcodeInfoView</code>.
@property (nonatomic) SWIFT_METATYPE(UIView) <SBSDKTrackedBarcodeInfoViewable> _Nullable customViewType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBSDKBarcodeTrackingOverlayControllerDelegate;

/// A class that represents an overlay used for visualizing detected barcodes.
/// It provides a customizable user interface for displaying barcodes and supports interaction with them.
/// The overlay can be used to highlight and select barcodes based on user input.
/// note:
/// To use the barcode tracking overlay, you should set its <code>configuration</code> property to customize the appearance and behavior of the overlay.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK37SBSDKBarcodeTrackingOverlayController")
@interface SBSDKBarcodeTrackingOverlayController : NSObject
/// The configuration object that controls the appearance and behavior of the barcode tracking overlay.
@property (nonatomic, strong) SBSDKBarcodeTrackingOverlayConfiguration * _Nonnull configuration;
/// The delegate for the tracking overlay controller.
@property (nonatomic, weak) id <SBSDKBarcodeTrackingOverlayControllerDelegate> _Nullable delegate;
/// Wether the tracking overlay is hidden or not.
@property (nonatomic) BOOL isHidden;
/// Initializes and returns a barcode tracking overlay controller with the default configuration and no delegate.
///
/// returns:
/// An initialized <code>SBSDKBarcodeTrackingOverlay</code> instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Resets the tracking overlay, removes all tracked barcode views and clears the selected barcodes.
- (void)reset;
@end


/// The delegation protocol for the barcode tracking overlay controller.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK45SBSDKBarcodeTrackingOverlayControllerDelegate_")
@protocol SBSDKBarcodeTrackingOverlayControllerDelegate
@optional
/// Called when a barcode is being tapped on.
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param barcode The barcode the user tapped on.
///
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didTapOnBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode;
/// Called when the barcode selection has changed.
/// Only called if the barcode tracking overlay controllers configuration has its isSelectable property set to <code>True</code>.
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param selectedBarcodes The barcodes that are currently selected.
///
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didChangeSelectedBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)selectedBarcodes;
/// Asks the delegate to provide a custom style for a tracked barcodes polygon. Is called when drawing the polygon
/// view for the tracked barcode.
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param barcode The barcode that should be drawn on the overlay.
///
///
/// returns:
/// The polygon style to be used when drawing the polygon for the tracked barcode.
- (SBSDKBarcodeTrackedViewPolygonStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller polygonStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to provide a custom style for a tracked barcodes info view. Is called when drawing the
/// info view for the tracked barcode.
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param barcode The barcode that should be drawn on the overlay.
///
///
/// returns:
/// The text style to be used when drawing the polygon for the tracked barcode.
- (SBSDKBarcodeTrackedViewTextStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller textStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to create a custom tracking view for the given barcode,
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param barcode The barcode the custom tracking view should represent.
///
///
/// returns:
/// The custom view.
- (UIView * _Nonnull)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller customViewFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
/// Informs the delegate that a custom tracked barcode view has been generated.
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param view The custom view object that has been created. Can be used to perform additional configuration.
///
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didCreateCustomView:(UIView * _Nonnull)view;
/// Informs the delegate to update the custom tracking view for the given barcode.
/// \param controller The barcode tracking overlay controller that the tracking view belongs to.
///
/// \param view The custom tracking view.
///
/// \param barcode The barcode that is represented by the custom tracking view.
///
/// \param barcodeFrame The bounding rectangle of the barcode in view coordinates.
///
/// \param selected Whether the barcode is selected or not.
///
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller updateCustomView:(UIView * _Nonnull)view for:(SBSDKBarcodeScannerResult * _Nonnull)barcode barcodeFrame:(CGRect)barcodeFrame selected:(BOOL)selected;
@end


/// Class that represents a barcode type.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK16SBSDKBarcodeType")
@interface SBSDKBarcodeType : NSObject
/// The barcode type Aztec.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull aztec;)
+ (SBSDKBarcodeType * _Nonnull)aztec SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Codabar.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull codaBar;)
+ (SBSDKBarcodeType * _Nonnull)codaBar SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code25.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code25;)
+ (SBSDKBarcodeType * _Nonnull)code25 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code39.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code39;)
+ (SBSDKBarcodeType * _Nonnull)code39 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code93.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code93;)
+ (SBSDKBarcodeType * _Nonnull)code93 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code128.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code128;)
+ (SBSDKBarcodeType * _Nonnull)code128 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type DataMatrix.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull dataMatrix;)
+ (SBSDKBarcodeType * _Nonnull)dataMatrix SWIFT_WARN_UNUSED_RESULT;
/// The barcode type EAN-8.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull ean8;)
+ (SBSDKBarcodeType * _Nonnull)ean8 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type EAN-13.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull ean13;)
+ (SBSDKBarcodeType * _Nonnull)ean13 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Interleaved two-of-five (ITF).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull itf;)
+ (SBSDKBarcodeType * _Nonnull)itf SWIFT_WARN_UNUSED_RESULT;
/// The barcode type PDF-417.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull pdf417;)
+ (SBSDKBarcodeType * _Nonnull)pdf417 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type QR.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull qrCode;)
+ (SBSDKBarcodeType * _Nonnull)qrCode SWIFT_WARN_UNUSED_RESULT;
/// The barcode type MicroQR.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull microQrCode;)
+ (SBSDKBarcodeType * _Nonnull)microQrCode SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Databar.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull databar;)
+ (SBSDKBarcodeType * _Nonnull)databar SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Databar Expanded.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull databarExpanded;)
+ (SBSDKBarcodeType * _Nonnull)databarExpanded SWIFT_WARN_UNUSED_RESULT;
/// The barcode type UPC-A.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull upcA;)
+ (SBSDKBarcodeType * _Nonnull)upcA SWIFT_WARN_UNUSED_RESULT;
/// The barcode type UPC-E.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull upcE;)
+ (SBSDKBarcodeType * _Nonnull)upcE SWIFT_WARN_UNUSED_RESULT;
/// The barcode type MSI-PLESSEY.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull msiPlessey;)
+ (SBSDKBarcodeType * _Nonnull)msiPlessey SWIFT_WARN_UNUSED_RESULT;
/// The barcode type IATA_2_OF_5.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull iata2Of5;)
+ (SBSDKBarcodeType * _Nonnull)iata2Of5 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type INDUSTRIAL_2_OF_5.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull industrial2Of5;)
+ (SBSDKBarcodeType * _Nonnull)industrial2Of5 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type USPS Intelligent Mail, a.k.a. USPS OneCode, USPS-STD-11.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull uspsIntelligentMail;)
+ (SBSDKBarcodeType * _Nonnull)uspsIntelligentMail SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Royal Mail Four-State Customer Code, a.k.a. RM4SCC, CBC, BPO 4 State Code.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull royalMail;)
+ (SBSDKBarcodeType * _Nonnull)royalMail SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Japan Post Four-State.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull japanPost;)
+ (SBSDKBarcodeType * _Nonnull)japanPost SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Royal TNT Post Four-State Barcode, a.k.a. KIX, Klant IndeX.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull royalTNTPpost;)
+ (SBSDKBarcodeType * _Nonnull)royalTNTPpost SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Australia Post Four-State Customer Code.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull australiaPost;)
+ (SBSDKBarcodeType * _Nonnull)australiaPost SWIFT_WARN_UNUSED_RESULT;
/// The barcode type GS1 DataBar Limited.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull databarLimited;)
+ (SBSDKBarcodeType * _Nonnull)databarLimited SWIFT_WARN_UNUSED_RESULT;
/// The barcode type GS1 Composite.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull gs1Composite;)
+ (SBSDKBarcodeType * _Nonnull)gs1Composite SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Micro PDF 417.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull microPdf417;)
+ (SBSDKBarcodeType * _Nonnull)microPdf417 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type MAXI_CODE.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull maxiCode;)
+ (SBSDKBarcodeType * _Nonnull)maxiCode SWIFT_WARN_UNUSED_RESULT;
/// The barcode type RMQR Code.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull rmqrCode;)
+ (SBSDKBarcodeType * _Nonnull)rmqrCode SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code11.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code11;)
+ (SBSDKBarcodeType * _Nonnull)code11 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code32.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code32;)
+ (SBSDKBarcodeType * _Nonnull)code32 SWIFT_WARN_UNUSED_RESULT;
/// Name of the barcode type.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSInteger value;
/// Whether the barcode type can have extensions or not.
@property (nonatomic, readonly) BOOL isExtendedType;
/// Returns an array of all valid barcode types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeType *> * _Nonnull allTypes;)
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)allTypes SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of all commonly-used barcode types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeType *> * _Nonnull commonTypes;)
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)commonTypes SWIFT_WARN_UNUSED_RESULT;
/// Returns an array containing all 1-D barcode types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeType *> * _Nonnull oneDTypes;)
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)oneDTypes SWIFT_WARN_UNUSED_RESULT;
/// Returns an array containing all 2-D barcode types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeType *> * _Nonnull twoDTypes;)
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)twoDTypes SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of postal barcode types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeType *> * _Nonnull postalTypes;)
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)postalTypes SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKBarcodeType * _Nullable)typeWith:(NSUInteger)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBSDKUI2BarcodeFormat;

@interface SBSDKBarcodeType (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Converts from <code>SBSDKBarcodeType</code> to <code>SBSDKUI2BarcodeFormat</code>.
- (SBSDKUI2BarcodeFormat * _Nonnull)fromSDKType SWIFT_WARN_UNUSED_RESULT;
@end

/// Filter for extended EAN and UPC barcodes.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodesExtensionFilter, open) {
/// EAN and UPC barcoded with or without extensions will be returned.
  SBSDKBarcodesExtensionFilterNoFilter = 0,
/// Only EAN and UPC barcoded with extensions will be returned.
  SBSDKBarcodesExtensionFilterOnlyWithExtensions = 1,
/// Only EAN and UPC barcoded without extensions will be returned.
  SBSDKBarcodesExtensionFilterOnlyWithoutExtensions = 2,
};


/// The energy management configuration object for a ‘SBSDKBaseScannerViewController’ and its subclasses.
/// ‘SBSDKBaseScannerViewController’ and subclasses sport a customizable energy management system.
/// Since detectors and recognizers running on a live video feed can put a lot of load onto the CPU and/or GPU
/// of the device, causing the battery to drain quickly and running the device hot, you can customize the energy
/// consumption using this class by configuring the rate of detections/recognitions per second in performance mode as
/// well as in energy saving mode.
/// In performance mode the detectors/recognizers will be fed with a higher, configurable rate of
/// video frames per second.
/// After a certain, configurable period of inactivity the energy save mode will be engaged and the rate
/// of detections/recognitions will be reduced to a lower (configurable) rate.
/// You can also configure the time of inactivity before the automatic mode switches from performance to energy save mode.
/// Inactivity here means that both of the following conditions are met:
/// <ol>
///   <li>
///     The device did not register significant motion for this period.
///   </li>
///   <li>
///     No positive detector/recognizer results have been registered during this period.
///     Once in energy save mode the device can only return to performance mode if it is moved significantly or a positive
///     detection/recognition result was registered.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK35SBSDKBaseScannerEnergyConfiguration")
@interface SBSDKBaseScannerEnergyConfiguration : NSObject
/// Set to <code>True</code>, if automatic energy saving should be enabled. With automatic energy saving enabled the
/// base scanner view controller will, after a certain time of inactivity, enter the energy save mode by lowering the
/// detection/recognition rate.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isEnergySavingEnabled;
/// The rate of detections/recognitions per second in normal performance mode.
/// Defaults to 20, meaning that 20 frames per second are detected/recognized, equally distributed over one second.
/// When the video frame rate is 30, 10 frames will be skipped and 20 frames will be detected/recognized.
/// Note: if you set the detection rate greater to or equal to the video frame rate, no frames will be skipped,
/// the actual detection rate is limited by the video frame rate.
@property (nonatomic) NSUInteger detectionRate;
/// The rate of detections/recognitions per second in energy save mode.
/// Defaults to 1, meaning that 1 frame per second is detected/recognized.
/// When the video frame rate is 30, 29 frames will be skipped, 1 frame is detected/recognized.
/// Note: if you set the detection rate greater to or equal to the video frame rate, no frames will be skipped,
/// the actual detection rate is limited by the video frame rate.
/// Note: Usually you set a much lower value here as for the detectionRate property to save energy.
@property (nonatomic) NSUInteger energySaveDetectionRate;
/// The amount of time in seconds of no activity in performance mode before the energy save mode will be engaged.
/// Defaults to 4 seconds.
@property (nonatomic) NSTimeInterval inactivityTimeout;
/// The sensitivity to device motion. The lower the value the less motion of the device is required to prevent the scanner from entering energy save mode.
/// Defaults to 4.0
@property (nonatomic) CGFloat motionSensitivity;
/// This is the default configuration with the properties initialized as mentioned in their description.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBaseScannerEnergyConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKBaseScannerEnergyConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A wrapper class for video frames.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK21SBSDKBaseScannerFrame")
@interface SBSDKBaseScannerFrame : NSObject
/// The <code>UIImage</code>representation of the receiver.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// The JPEG-data representation of the receiver.
@property (nonatomic, readonly, copy) NSData * _Nullable imageData;
/// Initializes a frame from a sample buffer as it is typically aquired from the camera.
/// \param sampleBuffer The sample buffer to initialize the receiver from.
///
- (nonnull instancetype)initWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer OBJC_DESIGNATED_INITIALIZER;
/// Initializes a frame from a sample buffer as it is typically aquired from the camera and rotates it according to the given orientation.
/// \param sampleBuffer The sample buffer to initialize the receiver from.
///
/// \param orientation The orientation of the sample buffer.
///
- (nonnull instancetype)initWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer orientation:(AVCaptureVideoOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
/// Initializes a frame from an image.
/// \param image The <code>UIImage</code> to initialize the frame with.
///
/// \param ignoreOrientation If set to <code>True</code>, the orientation of the images metadata is ignored. Set to ‘False’ to rotate the image data according to its metadata.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image ignoreOrientation:(BOOL)ignoreOrientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SBSDKVideoFrameResolution : NSInteger;
enum SBSDKVideoContentMode : NSInteger;
enum SBSDKVideoFlipMode : NSInteger;
enum SBSDKCapturePhotoQualityPrioritization : NSInteger;

/// The general configuration object for a ‘SBSDKBaseScannerViewController’ and its subclasses.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKBaseScannerGeneralConfiguration")
@interface SBSDKBaseScannerGeneralConfiguration : NSObject
/// The video frame resolution of the preview layer.
/// Defaults to <code>SBSDKVideoFrameResolution/auto</code>.
/// Higher resolutions may improve scanning results but slow down the scanning performance.
/// In some cases a higher resolution may even decrease the scanning quality.
/// It is therefore recommended to keep this setting at <code>SBSDKVideoFrameResolution/auto</code>.
@property (nonatomic) enum SBSDKVideoFrameResolution videoFrameResolution;
/// The content mode of the video preview layer: fit-in or fill-in. Defaults to <code>SBSDKVideoContentMode/fillIn</code>.
@property (nonatomic) enum SBSDKVideoContentMode videoContentMode;
/// Defines how video frames, still images and the camera previer layer are flipped.
/// Defaults to <code>SBSDKVideoFlipMode/none</code>.
@property (nonatomic) enum SBSDKVideoFlipMode videoFlipMode;
/// The prioritization of still image quality and capturing speed.
/// Defaults to <code>SBSDKCapturePhotoQualityPrioritization/balanced</code>.
/// If you experience lots of blurry still images try to set this property to SBSDKCapturePhotoQualityPrioritization.
@property (nonatomic) enum SBSDKCapturePhotoQualityPrioritization photoQualityPrioritization;
/// If set to <code>True</code>, the camera session will be stopped entirely, when the base scanner view controller disappears and restarts when it reappears.
/// The base scanner view controller will cause no CPU load after it disappeared.
/// Setting it to <code>False</code> will NOT stop the camera session, but pauses the delivery of video frames from the camera session to the base scanner view controller.
/// There is some low CPU activity while the base scanner view controller is not on screen, but there is also no delay when the receiver returns to the screen.
@property (nonatomic) BOOL stopsCameraSessionWhenDisappeared;
/// The delay of recognition after appearance in seconds. Defaults to 0 seconds.
@property (nonatomic) NSTimeInterval initialScanDelay;
/// Disables auto-focus and locks the lens at the specified focus lens position. The default value is <code>False</code>.
@property (nonatomic) BOOL isFocusLockEnabled;
/// The position of the lens. Values can be between 0.0 (minimum focusing distance) and 1.0 (maximum focusing distance). The value will be clamped to [0.0, 1.0].
/// Defaults to 0.0.
@property (nonatomic) CGFloat focusLockPosition;
/// Whether the receiver plays a flash-light animation when capturing images or not. Defaults to <code>False</code>. */
@property (nonatomic) BOOL playFlashAnimation;
/// To prevent blurred images before the video frame is sent to the detector, the device must have registered no significant motion for a certain amount of time.
/// This property defines this amount of time.
/// By default it is set to 0.0 seconds for the most scanners.
@property (nonatomic) NSTimeInterval minimumTimeWithoutDeviceMotionBeforeDetection;
/// This is the default configuration with the properties initialized as mentioned in their description.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBaseScannerGeneralConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKBaseScannerGeneralConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@class SBSDKCameraSession;

/// The  delegate protocol for <code>SBSDKCameraSession</code>.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK26SBSDKCameraSessionDelegate_")
@protocol SBSDKCameraSessionDelegate
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didOutput:(SBSDKBaseScannerFrame * _Nonnull)frame;
@end


@interface SBSDKBaseScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKCameraSessionDelegate>
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didOutput:(SBSDKBaseScannerFrame * _Nonnull)frame;
@end




/// A multicast-oberserver protocol that informs its oberservers about state changes of a camera session.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK27SBSDKCameraSessionObserving_")
@protocol SBSDKCameraSessionObserving
@optional
/// Informs the observer that the camera device has been changed.
/// \param session The camera session that changed the camera device.
///
/// \param device The new camera device of the camera session.
///
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didChangeDevice:(SBSDKCameraDevice * _Nonnull)device;
/// Informs the observer that the torch light has been toggled on or off.
/// \param session The camera session that toggled the torch light.
///
/// \param enabled Whether the light was turned on or off.
///
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didToggleTorchlight:(BOOL)enabled;
/// Informs the observer that the zoom value has changed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     session: The camera session that changed the zoom.
///   </li>
///   <li>
///     zoomValue: The new zoom value of the camera session.
///   </li>
/// </ul>
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didChangeZoom:(CGFloat)zoomValue;
@end


@interface SBSDKBaseScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKCameraSessionObserving>
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didToggleTorchlight:(BOOL)enabled;
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didChangeZoom:(CGFloat)zoomValue;
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didChangeDevice:(SBSDKCameraDevice * _Nonnull)device;
@end

@class SBSDKFinderView;

/// The delegate protocol for the <code>SBSDKFinderView</code> class.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK23SBSDKFinderViewDelegate_")
@protocol SBSDKFinderViewDelegate
@optional
/// Informs the delegate, that the finder view has changed its finder rectangle.
/// Optional.
/// \param view The finder view that changed its finder viewport rectangle. Can be <code>nil</code>, if it has been removed.
///
/// \param rect The new rectangle of the finder viewport.
///
- (void)finderView:(SBSDKFinderView * _Nonnull)view didChangeRect:(CGRect)rect;
@end


@interface SBSDKBaseScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKFinderViewDelegate>
- (void)finderView:(SBSDKFinderView * _Nonnull)view didChangeRect:(CGRect)didChangeRect;
@end



@class UIVisualEffect;

/// The view finder configuration object for a ‘SBSDKBaseScannerViewController’ and its subclasses.
/// Sometimes it is necessary to limit a live video frame detection or recognition to a certain rectangular area with
/// a specific aspect ratio: the region or rectangle of interest. This is where a view finder comes in.
/// It crops the video frame to that region of interest before passing it to any detector or recognizer. Usually
/// the performance of detectors/recognizers gain a benefit from it because less pixels must be processed.
/// Additionally, to guide the user, the view finder visualizes the region of interest by drawing a rectangle around
/// on the user interface.
/// Since the display resp. the camera view size differs from device to device specifying the region of interest
/// in absolute screen points would require some additional calculations and therefore be inconvenient.
/// Instead a combination of aspect ratio and minimum distances to the view(screen) edges is used.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK39SBSDKBaseScannerViewFinderConfiguration")
@interface SBSDKBaseScannerViewFinderConfiguration : NSObject
/// Set to <code>True</code> to enable and display the region of interest, to <code>False</code> otherwise.
/// Defaults to <code>False</code>.
@property (nonatomic) BOOL isViewFinderEnabled;
/// The drawing style of the finder view.
/// Defaults to <code>SBSDKFinderView/Style/stroke</code>.
@property (nonatomic) enum SBSDKFinderViewStyle style;
/// The aspect ratio of the region of interest. Defaults to 4:3.
@property (nonatomic, strong) SBSDKAspectRatio * _Nonnull aspectRatio;
/// The minimum space from view finders outer edges to the view/screen edges.
/// Defaults to {20, 20, 20, 20}.
@property (nonatomic) UIEdgeInsets minimumInset;
/// If positive, the receiver will try to maintain the preferred height and the aspect ratio for the finder by dynamically
/// changing the inset. If negative this property will be ignored.
/// Defaults to -1;
@property (nonatomic) CGFloat preferredHeight;
/// The offset of the view finder.
/// Defaults to {0, 0}.
@property (nonatomic) CGPoint offset;
/// The area where the finder should be placed in the coordinate system of the receiver.
/// Is ignored if finder safe area is empty (zero height or width).
/// Defaults to the zero rectangle.
@property (nonatomic) CGRect finderSafeArea;
/// If set to <code>False</code>, the finder is inset by the safe area insets. Otherwise the safe area inset is ignored.
/// Defaults to <code>False</code>;
@property (nonatomic) BOOL ignoresSafeAreaInsets;
/// The aspect ratio of the secondary view finder that is displayed with dashed lines.
/// If set to <code>nil</code> no secondary view finder is drawn.
/// Defaults to <code>nil</code>.
@property (nonatomic, strong) SBSDKAspectRatio * _Nullable secondaryAspectRatio;
/// The minimum space from the primary view finder to the secondary view finder for each edge.
/// Defaults to {10, 10, 10, 10}.
@property (nonatomic) UIEdgeInsets secondaryMinimumInset;
/// The line color of the view finders outline. Can be <code>nil</code> to not display the outline.
/// Defaults to a fully opaque white color.
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// The color of the background outside the view finders outline. Use this color to mask the region
/// that is not of interest.
/// Defaults to a black color with an opacity of 0.66, slightly darkening the non-interest area of the screen.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// The corner radius of the view finders outline.
/// Defaults to 8 points.
@property (nonatomic) CGFloat lineCornerRadius;
/// The line width of the view finders outline.
/// Defaults to 2 points.
@property (nonatomic) CGFloat lineWidth;
/// Set to <code>True</code> to animate the view finder when changing the aspect ratio or minimum insets, to <code>False</code> if changes should not be animated.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isAnimatingChanges;
/// The visual effect applied to the area outside the view finder. If <code>nil</code>, no effect is applied.
/// Defaults to <code>nil</code>.
@property (nonatomic, strong) UIVisualEffect * _Nullable backgroundEffect;
/// This is the default configuration with the properties initialized as mentioned in their description.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBaseScannerViewFinderConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKBaseScannerViewFinderConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKZoomRange;

/// The zoom configuration object for a ‘SBSDKBaseScannerViewController’ and its subclasses.
/// ‘SBSDKBaseScannerViewController’ and subclasses allow the user to zoom the camera.
/// This class lets you customize the zooming user experience.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK33SBSDKBaseScannerZoomConfiguration")
@interface SBSDKBaseScannerZoomConfiguration : NSObject
/// Wether zooming is enabled or disabled at all. Defaults to <code>True</code>.
@property (nonatomic) BOOL isZoomingEnabled;
/// The range (min and max factor) of the cameras zoom factor. Default value is (1.0; 12.0).
@property (nonatomic, strong) SBSDKZoomRange * _Nonnull zoomRange;
/// The initial zoom factor. Must be in the range of (0.0 - 1.0), where 0.0 equals to the lower limit of zoomRange and 1.0 equals to the upper limit of zoomRange.
/// Defaults to 0.0.
@property (nonatomic) CGFloat initialZoomFactor;
/// When this property is set to YES, the zoom can be toggled between the minimum and maximum zoom factor, defined in the zoomRange property, by just double-tapping anywhere in the base scanner view controllers view.
/// If set to <code>False</code>, zooming by double-tapping will be disabled.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isDoubleTapToZoomEnabled;
/// When this property is set to YES, the camera zoom can be controlled by a pinch gesture anywhere in the base scannner view controllers view.
/// If set to <code>False</code>, zooming by pinching will be disabled.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isPinchToZoomEnabled;
/// Defines, if zooming in or out should be animated. This applies to double-tap zooming as well as to programmatically triggered zooms.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL shouldAnimateZooming;
/// This is the default configuration with the properties initialized as mentioned in their description.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBaseScannerZoomConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKBaseScannerZoomConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum SBSDKCameraDeviceType : NSInteger;
enum SBSDKCameraDevicePosition : NSInteger;
@class AVCaptureDevice;

/// The camera device to be used with a <code>SBSDKCameraSession</code>.
/// To retrieve a list of available devices you can pass to many of SDKs classic or RTU-UI component please use
/// the class functions starting with availableDevices…
/// note:
/// On iOS simulators fake devices are returned to allow your code to be tested.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK17SBSDKCameraDevice")
@interface SBSDKCameraDevice : NSObject
/// The type of the camera: triple, dual, dual-wide, wide angle, telephoto, ultra-wide, etc. Readonly.
@property (nonatomic, readonly) enum SBSDKCameraDeviceType deviceType;
/// The position of the camera: front side or back side of the device. Readonly.
@property (nonatomic, readonly) enum SBSDKCameraDevicePosition devicePosition;
/// The name of the camera, e.g. “Front camera - Wide”.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The AVFoundation capture device.
/// warning:
/// Do not use or manipulate directly, as this might lead to an unstable or undefined state of the camera!
/// note:
/// On iOS simulators this is <code>nil</code>.
@property (nonatomic, readonly, strong) AVCaptureDevice * _Nullable device;
/// Returns the default back side camera, which in most cases is the triple or dual camera.
/// Returns <code>nil</code>, if there is no back facing camera available (iOS simulator).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKCameraDevice * _Nullable defaultBackFacingCamera;)
+ (SBSDKCameraDevice * _Nullable)defaultBackFacingCamera SWIFT_WARN_UNUSED_RESULT;
/// Returns the default front side camera, which in most cases is the frontside, wide angle camera.
/// Returns <code>nil</code>, if there is no front facing camera available (iOS simulator).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKCameraDevice * _Nullable defaultFrontFacingCamera;)
+ (SBSDKCameraDevice * _Nullable)defaultFrontFacingCamera SWIFT_WARN_UNUSED_RESULT;
/// Returns the back side camera with the widest lens available.
/// Use this camera when you want to focus very close or on tiny objects.
/// Returns <code>nil</code>, if there is no back facing camera available (iOS simulator).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKCameraDevice * _Nullable widestAvailableBackFacingCamera;)
+ (SBSDKCameraDevice * _Nullable)widestAvailableBackFacingCamera SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of all available and supported cameras of the device.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKCameraDevice *> * _Nonnull availableDevices;)
+ (NSArray<SBSDKCameraDevice *> * _Nonnull)availableDevices SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of all available and supported cameras of the device at the given position.
/// \param position The position of the requested cameras: front or back.
///
///
/// returns:
/// A list of the supported available cameras of the current device for the given position.
+ (NSArray<SBSDKCameraDevice *> * _Nonnull)availableDevicesForPosition:(enum SBSDKCameraDevicePosition)position SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of all available and supported cameras of the device of the given type.
/// \param type The type of the requested cameras: wide, ultra-wide, tele, etc.
///
///
/// returns:
/// A list of the supported available cameras of the current device for the given type.
+ (NSArray<SBSDKCameraDevice *> * _Nonnull)availableDevicesForType:(enum SBSDKCameraDeviceType)type SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of all available and supported cameras of the device of the given type and position.
/// \param type The type of the requested cameras: wide, ultra-wide, tele, etc.
///
/// \param position The position of the requested cameras: front or back.
///
///
/// returns:
/// A list of the supported available cameras of the current device for the given type and position.
+ (NSArray<SBSDKCameraDevice *> * _Nonnull)availableDevicesForType:(enum SBSDKCameraDeviceType)type andPosition:(enum SBSDKCameraDevicePosition)position SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enum to describe the physical position of a camera device.
typedef SWIFT_ENUM(NSInteger, SBSDKCameraDevicePosition, open) {
/// The camera is located on the back side of the device.
  SBSDKCameraDevicePositionBack = 0,
/// The camera is located on the front side of the device.
  SBSDKCameraDevicePositionFront = 1,
};

/// An enum to describe the different types of camera lenses/devices.
typedef SWIFT_ENUM(NSInteger, SBSDKCameraDeviceType, open) {
/// The wide angle lens/device.
  SBSDKCameraDeviceTypeWide = 0,
/// The telephoto lens/device.
  SBSDKCameraDeviceTypeTele = 1,
/// The ultra-wide lens/device.
  SBSDKCameraDeviceTypeUltraWide = 2,
/// The dual-wide lens/device (wide + ultra-wide).
  SBSDKCameraDeviceTypeDualWide = 3,
/// The dual lens/device (wide + tele).
  SBSDKCameraDeviceTypeDual = 4,
/// The triple lens/device (ultra-wide + wide + tele).
  SBSDKCameraDeviceTypeTriple = 5,
/// A simulated camera that can simulate a video stream by looping a video or a single image.
/// Also used on iPhone/iPad simulators without providing a video stream.
  SBSDKCameraDeviceTypeSimulated = 6,
};


/// This class provides information about the current cameras exposure settings.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKCameraExposureSettings")
@interface SBSDKCameraExposureSettings : NSObject
/// The exposure duration of the camera in milliseconds.
@property (nonatomic, readonly) double exposureDuration;
/// The exposure target offset in EV.
/// Negative values mean the image is too dark, positive values mean the image is too bright.
/// Usually the camera automatically tries to adapt its exposure parameters to keep the exposure target offset at a
/// value of 0 resulting in a proper exposure of the image.
/// If this value is not close to 0 the camera cannot adjust its exposure parameters properly, the image is either
/// way too dark or too bright.
@property (nonatomic, readonly) float exposureTargetOffset;
/// The ISO (or amplification) value of the camera.
/// The higher the value the more noise and less detail the image will have.
@property (nonatomic, readonly) float ISOValue;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVCaptureVideoPreviewLayer;
@class AVCaptureSession;
enum SBSDKFeature : NSInteger;

/// An easy-to-use wrapper around the AVFoundations video capture session. Sets up and configures the
/// camera device and the preview layer. Provides functionality to capture still images.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK18SBSDKCameraSession")
@interface SBSDKCameraSession : NSObject
/// The camera device to be used.
@property (nonatomic, strong) SBSDKCameraDevice * _Nonnull device;
/// The preview layer that the camera device uses to output the current video frames.
/// Can be added to any superlayer.
/// important:
/// Initially the preview layer is hidden.
@property (nonatomic, strong) AVCaptureVideoPreviewLayer * _Nonnull previewLayer;
/// The AVCaptureSession object.
@property (nonatomic, strong) AVCaptureSession * _Nullable captureSession;
/// Returns the video resolution of the current video output. Orientation is taken into account.
/// Returns CGSizeZero, if the capture session is not running.
@property (nonatomic, readonly) CGSize videoResolution;
/// Sets or gets the current video orientation.
@property (nonatomic) AVCaptureVideoOrientation videoOrientation;
/// Sets or gets the current video frame resolution.
@property (nonatomic) enum SBSDKVideoFrameResolution videoFrameResolution;
/// The delegate object for camera output.
/// Its receives the video frames and does still image captures.
/// Delegates can implement all functions from <code>AVCaptureVideoDataOutputSampleBufferDelegate</code>.
@property (nonatomic, weak) id <SBSDKCameraSessionDelegate> _Nullable videoDelegate;
/// Returns <code>True</code> if the camera is currently in the process of taking a still image, <code>False</code> otherwise.
@property (nonatomic, readonly) BOOL isCapturingStillImage;
/// Returns <code>True</code> if the camera device has a torch light and the torch light is available, <code>False</code> otherwise.
@property (nonatomic, readonly) BOOL isTorchLightAvailable;
/// Turns the torch light on or off.
@property (nonatomic) BOOL isTorchLightEnabled;
/// A block being executed when the torch light status changes (mode or availability).
@property (nonatomic, copy) void (^ _Nullable updateTorchlightBlock)(void);
/// A block being executed when the zoom factor has changed. The new zoom factor is provided as parameter.
@property (nonatomic, copy) void (^ _Nullable updateZoomBlock)(CGFloat);
/// The camera devices minimum zoom factor. Readonly.
@property (nonatomic, readonly) CGFloat minZoom;
/// The camera devices maximum zoom factor. Readonly.
@property (nonatomic, readonly) CGFloat maxZoom;
/// The camera devices maximum optical zoom factor. Readonly.
/// Setting higher zoom factor will result in digital zooming and degraded image quality.
@property (nonatomic, readonly) CGFloat maxOpticalZoom;
/// Sets or gets the camera devices current zoom factor. Zooming is done without animation.
/// If the new value exceeds the minimum or maximum value for zooming it is clamped.
@property (nonatomic) CGFloat zoomValue;
/// Returns <code>True</code> if the camera session mirrors its video, <code>False</code> otherwise.
@property (nonatomic, readonly) BOOL isMirrored;
/// Returns <code>True</code>, if the camera currently is zooming, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isZooming;
/// Returns <code>True</code>, if the camera zoom is available, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isZoomAvailable;
/// Returns <code>True</code>, if the cameras focus is locked, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isFocusLockEnabled;
/// The prioritization of still image quality and capturing speed.
/// Defaults to <code>SBSDKCapturePhotoQualityPrioritization/balanced</code>.
@property (nonatomic) enum SBSDKCapturePhotoQualityPrioritization photoQualityPrioritization;
/// The content mode of the video preview layer: fit-in or fill-in. Defaults to <code>SBSDKVideoContentMode/fillIn</code>.
@property (nonatomic) enum SBSDKVideoContentMode videoContentMode;
/// Returns the current cameras exposure settings.
@property (nonatomic, readonly, strong) SBSDKCameraExposureSettings * _Nullable exposureSettings;
/// Returns <code>True</code>, if the front side camera is used, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isFrontCameraUsed;
/// Returns <code>True</code>, if the live detection is paused, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isDetectionPaused;
/// Returns <code>True</code>, if the camera is currently adjusting autofocus, exposure or white balance,
/// false otherwise. Readonly.
@property (nonatomic, readonly) BOOL isCameraAdjusting;
/// Returns <code>True</code> if the camera session is running, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isSessionRunning;
/// The designated initializer of the class. Does not start the capture session.
/// \param feature The feature you want to use the camera for.
///
- (nullable instancetype)initWithFeature:(enum SBSDKFeature)feature;
/// Convenience initializer of the class. Does not start the capture session.
/// \param feature The feature you want to use the camera for.
///
/// \param device The camera device to be used.
///
- (nullable instancetype)initWithFeature:(enum SBSDKFeature)feature device:(SBSDKCameraDevice * _Nonnull)device OBJC_DESIGNATED_INITIALIZER;
/// Starts the camera capture session asynchronously and calls the completion block when finished.
/// \param completion Completion handler with boolean flag, indicating if the session is running or not.
///
- (void)startSession:(void (^ _Nullable)(BOOL))completion;
/// Stops the camera capture session. Does nothing if the session is already stopped.
- (void)stopSession;
/// Pauses the delivery of frames to the delegate.
- (void)pauseDetection;
/// Resumes the delivery of frames to the delegate.
- (void)resumeDetection;
/// Freezes the camera session.
- (void)freezeSession;
/// Unfreezes the camera session.
- (void)unfreezeSession;
/// Sets the camera devices current zoom factor.
/// If the new value exceeds the minimum or maximum value for zooming it is clamped.
/// \param value The new zoom factor to be set.
///
/// \param animated If <code>True</code>, the zooming is animated, otherwise the change is applied without an animation.
///
- (void)setZoomValue:(CGFloat)value animated:(BOOL)animated;
/// Resets the zoom factor to the minimum zoom value.
/// \param animated If <code>True</code>, the zooming is animated, otherwise the change is applied without an animation.
///
- (void)resetZoomAnimated:(BOOL)animated;
/// Disables auto-focus and locks the lens at the specified lens position.
/// \param lensPosition The position of the lens. Values can be between 0.0 (minimum focusing distance) and
/// 1.0 (maximum focusing distance). The value will be clamped into the range [0.0, 1.0].
///
///
/// returns:
/// <code>True</code>, if the attempt to lock the focus was successful,
/// false if the attempt failed or if focus lock is not available.
- (BOOL)beginFocusLockAtLensPosition:(CGFloat)lensPosition SWIFT_WARN_UNUSED_RESULT;
/// Ends the focus lock and returns to standard continous auto-focus.
- (void)endFocusLock;
/// Captures a still image asynchronously and passes the image data or an error to the completion handler.
/// \param completion The completion handler.
///
- (void)captureStillImageWithCompletionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
/// Toggles the visibility of the camera preview.
/// \param visible <code>True</code>, if the camera preview should be visible, <code>False</code> otherwise.
///
/// \param animated <code>True</code>, if the change of visibility should be animated, <code>False</code> otherwise.
///
- (void)setPreviewLayerVisible:(BOOL)visible animated:(BOOL)animated;
/// Adds a new observer to the list of observers.
/// \param observer The new observer that listens to state changes.
///
- (void)addSessionObserver:(id <SBSDKCameraSessionObserving> _Nonnull)observer;
/// Removes an observer from the list of observers.
/// \param observer The observer that should no longer listen to state changes.
///
- (void)removeSessionObserver:(id <SBSDKCameraSessionObserving> _Nonnull)observer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@class AVCaptureOutput;
@class AVCaptureConnection;

@interface SBSDKCameraSession (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end



/// The prioritization of still image quality and capturing speed.
typedef SWIFT_ENUM(NSInteger, SBSDKCapturePhotoQualityPrioritization, open) {
/// Captures a still image at the highest possible speed. The quality of the image may be degraded.
  SBSDKCapturePhotoQualityPrioritizationSpeed = 0,
/// Balances capturing speed and image quality equally. This is the default value.
  SBSDKCapturePhotoQualityPrioritizationBalanced = 1,
/// Captures a still image with the best possible quality in terms of noise, frozen motion and detail in low light.
/// The speed of the capturing might be significantly reduced.
  SBSDKCapturePhotoQualityPrioritizationQuality = 2,
};


/// A <code>UILabel</code> subclass with rounded corners and content insets to display the status of the current document detection result.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK25SBSDKDetectionStatusLabel")
@interface SBSDKDetectionStatusLabel : UILabel
/// The text insets for the receiver.
/// Defaults to (6, 12, 6, 12).
@property (nonatomic) UIEdgeInsets textInsets;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines SWIFT_WARN_UNUSED_RESULT;
- (void)drawTextInRect:(CGRect)rect;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// Helper class that delivers information about the used iOS device.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK22SBSDKDeviceInformation")
@interface SBSDKDeviceInformation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// The name of the device, e.g. “iPhone15,2”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceName;)
+ (NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
/// The full name of the device including the iOS version, e.g. “iPhone15,2 (16.0.1)”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fullDeviceName;)
+ (NSString * _Nonnull)fullDeviceName SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>True</code> if the current device is a simulator, <code>False</code> otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isSimulatorDevice;)
+ (BOOL)isSimulatorDevice SWIFT_WARN_UNUSED_RESULT;
/// Returns the maximum recommended image size for this device.
/// warning:
/// Processing larger images may lead to memory pressure and crashes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGSize maximumRecommendedImageSize;)
+ (CGSize)maximumRecommendedImageSize SWIFT_WARN_UNUSED_RESULT;
/// The total amount of disk space of the device in bytes.
///
/// returns:
/// The total amount of disk space of the device in bytes. In case of error the return value is -1.
+ (int64_t)totalDiskSpaceInBytes SWIFT_WARN_UNUSED_RESULT;
/// The amount of unused disk space of the device in bytes.
///
/// returns:
/// The amount of unused disk space of the device in bytes. In case of error the return value is -1.
+ (int64_t)freeDiskSpaceInBytes SWIFT_WARN_UNUSED_RESULT;
/// The amount of used disk space of the device in bytes.
///
/// returns:
/// The amount of used disk space of the device in bytes. In case of error the return value is -1.
+ (int64_t)usedDiskSpaceInBytes SWIFT_WARN_UNUSED_RESULT;
/// The total amount of disk space of the device as a formatted and localized string.
///
/// returns:
/// The total amount of disk space of the device as a formatted and localized string.
+ (NSString * _Nonnull)totalDiskSpace SWIFT_WARN_UNUSED_RESULT;
/// The amount of unused disk space of the device as a formatted and localized string.
///
/// returns:
/// The amount of unused disk space of the device as a formatted and localized string.
+ (NSString * _Nonnull)freeDiskSpace SWIFT_WARN_UNUSED_RESULT;
/// The amount of used disk space of the device as a formatted and localized string.
///
/// returns:
/// The amount of used disk space of the device as a formatted and localized string.
+ (NSString * _Nonnull)usedDiskSpace SWIFT_WARN_UNUSED_RESULT;
@end

/// The error codes in the SBSDKErrorDomain.
typedef SWIFT_ENUM(NSInteger, SBSDKErrorCode, open) {
/// The operation was cancelled.
  SBSDKErrorCodeCancelled = 1,
/// The image storage was invalid or nil.
  SBSDKErrorCodeInvalidImageStorage = 2,
/// The image storage was invalid or nil.
  SBSDKErrorCodeImageStorageCopyingFailed = 3,
/// The image file did not contain valid image data.
  SBSDKErrorCodeInvalidImageData = 4,
/// The file does not exist.
  SBSDKErrorCodeInvalidFileURL = 5,
/// There was an unknown error while rendering a PDF page.
  SBSDKErrorCodePDFCreation = 6,
/// Optical text recognition failed.
  SBSDKErrorCodeTextRecognition = 7,
/// Page analysis failed.
  SBSDKErrorCodePageAnalysis = 8,
/// Language data for text recognition is missing.
  SBSDKErrorCodeOCRLanguageMissing = 9,
/// There was an unknown error while rendering pdf metadata.*/
  SBSDKErrorCodePDFMetadataCreation = 10,
/// Some other error.
  SBSDKErrorCodeUnknown = 999,
};

/// The features that are activated in the ScanbotSDK license.
typedef SWIFT_ENUM(NSInteger, SBSDKFeature, open) {
/// Payform detection is enabled in the license. Currently unused.
  SBSDKFeaturePayformDetection = 0,
/// Document detection is enabled in the license.
  SBSDKFeatureEdgeDetection = 1,
/// Document detection user interface is enabled in the license.
  SBSDKFeatureEdgeDetectionUI = 2,
/// Image processing is enabled in the license.
  SBSDKFeatureImageProcessing = 3,
/// Optical character recognition is enabled in the license.
  SBSDKFeatureOCR = 4,
/// Data intelligence is enabled in the licence. Currently unused.
  SBSDKFeatureDataIntelligence = 5,
/// PDF creation is enabled in the licence.
  SBSDKFeaturePDFCreation = 6,
/// Cloud upload is enabled in the licence. Currently unused.
  SBSDKFeatureCloudUpload = 7,
/// Credit card recognition is enabled in the licence. Currently unused.
  SBSDKFeatureCreditCardRecognition = 8,
/// Barcode detection is enabled in the licence.
  SBSDKFeatureBarcodeDetection = 9,
/// W2 document detection is enabled in the licence. Currently unused.
  SBSDKFeatureW2Detection = 10,
/// Check recognition is enabled in the licence.
  SBSDKFeatureCheckRecognition = 11,
/// Invoice recognition is enabled in the licence. Currently unused.
  SBSDKFeatureInvoiceDetection = 12,
/// Machine-readable-zone detection is enabled in the licence.
  SBSDKFeatureMRZRecognition = 13,
/// Medical certificate recognition is enabled in the licence.
  SBSDKFeatureMedicalCertRecognition = 14,
/// Multiple objects detection is enabled in the licence. Currently unused.
  SBSDKFeatureMultipleObjectsDetection = 15,
/// Text layout recognition is enabled in the licence.
  SBSDKFeatureTextOrientationDetection = 16,
/// European health insurance card recognition is enabled in the licence.
  SBSDKFeatureEHICRecognition = 17,
/// ID card and passport recognition is enabled in the licence.
  SBSDKFeatureIDCardRecognition = 18,
/// NFC scanning is enabled in the license. Currently unused.
  SBSDKFeatureNFCScanning = 19,
/// Text line recognition is enabled in the licence.
  SBSDKFeatureTextLineRecognition = 20,
/// License plate scanning is enabled in the licence.
  SBSDKFeatureLicensePlateScanning = 21,
/// Driver license recognition is enabled in the licence.
  SBSDKFeatureDriverLicenseRecognition = 22,
  SBSDKFeatureNone = 31,
};

@class UIBezierPath;

/// A <code>UIView</code> subclass to display a view finder with colored background and transparent cutout with the given aspect ratio.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK15SBSDKFinderView")
@interface SBSDKFinderView : UIView
/// The drawing style of the finder view.
/// Defaults to <code>SBSDKFinderView/Style/stroke</code>.
@property (nonatomic) enum SBSDKFinderViewStyle style;
/// The receivers delegate.
/// Weak, optional.
@property (nonatomic, weak) id <SBSDKFinderViewDelegate> _Nullable finderDelegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The area where the finder should be placed in the coordinate system of the receiver.
/// Is ignored if finder safe area is empty (zero height or width).
/// Defaults to <code>CGRect.zero</code>.
@property (nonatomic) CGRect finderSafeArea;
/// The aspect ratio of the viewport (cutout), if set to -1.0, no cutout is drawn.
/// Defaults to -1.0.
@property (nonatomic) double displayedAspectRatio;
/// The secondary aspect ratio of the viewport (cutout), if set to -1.0, no cutout is drawn.
/// Defaults to -1.0.
@property (nonatomic) double secondaryAspectRatio;
/// Parameter that defines minimum inset of viewport from edge of the screen.
/// Defaults to {20, 20, 20, 20}.
@property (nonatomic) UIEdgeInsets minimumInset;
/// Minimum inset of the secondary viewport, related to the primary viewport.
/// Defaults to {10, 10, 10, 10}.
@property (nonatomic) UIEdgeInsets secondaryMinimumInset;
/// If positive, the receiver will try to maintain the preferred height and the aspect ratio for the finder by dynamically
/// changing the inset. If negative this property will be ignored.
/// Defaults to -1.0.
@property (nonatomic) CGFloat preferredHeight;
/// The offset when drawing the finder.
/// Defaults to {0, 0}.
@property (nonatomic) CGPoint offset;
/// The color of the receivers border line.
/// Defaults to white.
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// The corner radius of the receivers border line.
/// Defaults to 8.0.
@property (nonatomic) CGFloat lineCornerRadius;
/// The line width of the receivers border line.
/// Defaults to 2.0.
@property (nonatomic) CGFloat lineWidth;
/// If set to <code>False</code>, the finder is inset by the safe area insets.
/// Otherwise the safe area inset is ignored.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL ignoresSafeAreaInsets;
/// If set to <code>True</code> finder changes will be animated, otherwise no animations will happen.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isAnimatingChanges;
/// The current rect of the finders viewport in the local coordinate system.
/// Returns <code>CGRect.zero</code> if the viewport is disabled.
@property (nonatomic, readonly) CGRect finderRect;
/// The current rect of the finders secondary viewport in the local coordinate system.
/// Returns <code>CGRect.zero</code> if the secondary viewport is disabled.
@property (nonatomic, readonly) CGRect secondaryFinderRect;
/// Creates a bezier path describing the view finders rectangle in the specified views coordinate system.
/// \param view The view to convert the coordinates of the returned path to. If <code>nil</code>, the coordinates are not converted.
///
///
/// returns:
/// The requested bezier path for the view finder rect. If the finder rects size is CGRectZero, <code>nil</code> is returned.
- (UIBezierPath * _Nullable)bezierPathConvertedToView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
/// A function, that returns a rect of a finder, if it will be placed in view with certain bounds, with given aspect ratio and insets. Useful for pre-calculations in some animation cases
/// \param bounds The bounds of the view, where potential view will be placed.
///
/// \param aspectRatio An expected aspect ratio.
///
/// \param minimumInsets Minimal insets of the view finder.
///
///
/// returns:
/// A calculated rectangle of a potential view finder.
+ (CGRect)potentialViewFinderRectWithBounds:(CGRect)bounds finderSafeArea:(CGRect)finderSafeArea aspectRatio:(double)aspectRatio minimumInsets:(UIEdgeInsets)minimumInsets offset:(CGPoint)offset SWIFT_WARN_UNUSED_RESULT;
- (void)safeAreaInsetsDidChange;
- (void)layoutSubviews;
- (void)drawRect:(CGRect)rect;
@end

/// The enum that defines the drawing styles of the finder view.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKFinderViewStyle, "Style", open) {
/// The full line around the finder view.
  SBSDKFinderViewStyleStroke = 0,
/// Only draw the corners of the finder view.
  SBSDKFinderViewStyleCorners = 1,
/// Draw the corners and the cross in the center of the finder view.
  SBSDKFinderViewStyleCornersAndCross = 2,
};



/// A frame limiter class. An object can use this class to limit the number of events fired per second.
/// For example: a camera device captures video frames with 60 frames per second and passes them to a detector.
/// Use this class to limit the number of detector runs to a smaller value, like 20 frames per second,
/// ignoring the other 40 frames per second. The frames to be detected are evenly distributed over time.
/// As the detector needs lots of CPU power, this limiter can drastically
/// reduce CPU usage and therefore save battery.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK17SBSDKFrameLimiter")
@interface SBSDKFrameLimiter : NSObject
/// The desired frame rate in frames per second.
@property (nonatomic) NSUInteger fpsCount;
/// The total number of frames the receiver registered since it started.
@property (nonatomic, readonly) NSUInteger framesTotal;
/// The total number of frames the receiver skipped since it started.
@property (nonatomic, readonly) NSUInteger framesSkipped;
/// The minimum time in seconds that must pass by before processing the next frame (1.0 / fpsCount).
@property (nonatomic, readonly) NSTimeInterval frameDuration;
/// The percentual ratio of skipped frames to total frames since the receivers start.
@property (nonatomic, readonly) double throttleRate;
/// Creates a new instance of the frame limiter.
/// \param fpsCount The desired frame rate in frames per second.
///
- (nonnull instancetype)initWithFPSCount:(NSUInteger)fpsCount OBJC_DESIGNATED_INITIALIZER;
/// Returns wether the next frame should be processed or not. Call this method consecutively each frame and process the frame if the result was <code>True</code>. Otherwise skip the frame processing.
///
/// returns:
/// <code>True</code>, if since the last call enough time passed by to process the next frame, <code>False</code> otherwise.
- (BOOL)isReadyForNextFrame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// GS1 message handling options. The GS1 standard defines a
/// a key-value format for business-centric data
/// that can be encoded into many 1D and 2D barcode types.
/// https://ref.gs1.org/standards/genspecs/
/// GS1 messages have two representations or formats: a human-readable format and a
/// machine-readable format. The human-readable format uses parentheses to wrap the keys in each
/// pair. For example, the string “(01)012345678901(37)02(3922)00278” contains three AI keys:
/// 01, 37, and 3922. The corresponding values are 012345678901, 02, and 00278.
/// The machine-readable format uses the special ASCII \x1D character to terminate key-value
/// pairs in the string in cases where the given key implies that the value is variable-length.
/// The equivalent machine-readable string for the above example is
/// “010123456789013702\x1D392200278”.
/// In the above example, the 01 AI key is fixed-length, so the \x1D character is not necessary.
/// The 37 AI keys is variable-length, so the \x1D character is necessary after the value in the
/// pair. The 3922 AI key is also variable-length, but it is the last pair in the message, so
/// the \x1D character is not necessary at the end.
/// The character \x1D is UNPRINTABLE - this means that if you try to print or otherwise
/// visualize a GS1 message containing the \x1D character, you may see a number of different
/// results, depending on how the system handles unprintable characters. You may see a question
/// mark, a box, an escape sequence, a space or nothing at all.
typedef SWIFT_ENUM(NSInteger, SBSDKGS1Handling, open) {
/// The (FNC1) character is simply stripped from the result in barcodes that implement this
/// mode.
/// Do not use. Will be removed in a future release.
  SBSDKGS1HandlingNone = 0,
/// This is the default. GS1 messages are converted to the machine-readable format per
/// the GS1 spec (the special FNC1 character is converted to ASCII \x1D).
/// The implied 01 AI key is prepended to DataBar results.
/// No validation is performed.
  SBSDKGS1HandlingParse = 1,
/// Same as <code>SBSDKGS1Handling/parse</code>. Additionally, messages containing unknown AI keys, or containing values
/// of incorrect format for known keys, are not returned.
  SBSDKGS1HandlingValidateStructure = 2,
/// Same as <code>SBSDKGS1Handling/validateStructure</code>, except that GS1 strings are converted to the human-readable
/// format, instead (with parentheses used to wrap AI keys, e.g. “(01)123456789”).
/// The \x1D character is never used in this representation.
  SBSDKGS1HandlingDecodeStructure = 3,
/// Full validation including linting and checksums. This is the most strict mode.
  SBSDKGS1HandlingValidateFull = 4,
/// Same as <code>SBSDKGS1Handling/decodeStructure</code>, but with full validation.
  SBSDKGS1HandlingDecodeFull = 5,
};


/// Represents a generic document with fields and sub-documents used for document recognition.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK20SBSDKGenericDocument")
@interface SBSDKGenericDocument : NSObject
/// The documents type.
@property (nonatomic, strong) SBSDKGenericDocumentType * _Nonnull type;
/// A list of the documents fields.
@property (nonatomic, copy) NSArray<SBSDKGenericDocumentField *> * _Nonnull fields;
/// A list of the documents sub-documents.
@property (nonatomic, copy) NSArray<SBSDKGenericDocument *> * _Nonnull children;
/// The average confidence in the accuracy of the document recognition result.
@property (nonatomic) float confidence;
/// The cropped image of the document.
@property (nonatomic, strong) UIImage * _Nullable crop;
/// The weight of the confidence.
/// Can be used to calculate the weighted average confidence of two or more documents.
@property (nonatomic) float confidenceWeight;
- (nonnull instancetype)initWithType:(SBSDKGenericDocumentType * _Nonnull)type fields:(NSArray<SBSDKGenericDocumentField *> * _Nonnull)fields children:(NSArray<SBSDKGenericDocument *> * _Nonnull)children confidence:(float)confidence confidenceWeight:(float)confidenceWeight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns a specific document field within the generic document by its field type name.
/// \param typeName The name of the field type to search for.
///
///
/// returns:
/// An optional <code>SBSDKGenericDocumentField</code> matching the specified field type name, or <code>nil</code> if not found.
- (SBSDKGenericDocumentField * _Nullable)fieldByTypeName:(NSString * _Nonnull)typeName SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of document fields within the generic document with a specific field type name.
/// \param typeName The name of the field type to search for.
///
///
/// returns:
/// An array of <code>SBSDKGenericDocumentField</code> objects matching the specified field type name.
- (NSArray<SBSDKGenericDocumentField *> * _Nonnull)fieldsByTypeName:(NSString * _Nonnull)typeName SWIFT_WARN_UNUSED_RESULT;
/// Returns a specific child document within the generic document by its document type name.
/// \param typeName The name of the document type to search for.
///
///
/// returns:
/// An optional <code>SBSDKGenericDocument</code> matching the specified document type name, or <code>nil</code> if not found.
- (SBSDKGenericDocument * _Nullable)childByDocumentType:(NSString * _Nonnull)typeName SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of child document within the generic document with a specific document type name.
/// \param typeName The name of the document type to search for.
///
///
/// returns:
/// An array of <code>SBSDKGenericDocument</code> objects matching the specified document type name.
- (NSArray<SBSDKGenericDocument *> * _Nonnull)childrenBy:(NSString * _Nonnull)typeName SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBSDKGenericDocument (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// The generic document wrapper for the receiver.
///
/// returns:
/// The instance of the wrapper.
- (SBSDKGenericDocumentWrapper * _Nullable)wrap SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBSDKGenericDocument (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Generates a flat array of the document and its child documents recursively.
/// Can be used for displaying the documents fields in a table view.
/// \param includeEmptyChildren If set to <code>True</code>, child documents without fields are included, otherwise <code>False</code>.
///
/// \param includeEmptyFields If set to <code>True</code>, fields with no values are included, otherwise <code>False</code>.
///
///
/// returns:
/// An array of the child documents with the main document in the first position.
- (NSArray<SBSDKGenericDocument *> * _Nullable)flatDocumentWithIncludeEmptyChildren:(BOOL)includeEmptyChildren includeEmptyFields:(BOOL)includeEmptyFields SWIFT_WARN_UNUSED_RESULT;
/// Generates a flat array of the document fields and its child documents fields recursively.
/// Can be used for displaying the documents fields in a table view.
/// \param includeEmptyFields If set to <code>True</code>, child documents without fields are included, otherwise <code>False</code>.
///
///
/// returns:
/// An array of all the fields in the document.
- (NSArray<SBSDKGenericDocumentField *> * _Nullable)allFieldsWithIncludeEmptyFields:(BOOL)includeEmptyFields SWIFT_WARN_UNUSED_RESULT;
@end

/// Common field types.
typedef SWIFT_ENUM(NSInteger, SBSDKGenericDocumentCommonFieldType, open) {
/// Document ID.
  SBSDKGenericDocumentCommonFieldTypeId = 0,
/// Person surname field.
  SBSDKGenericDocumentCommonFieldTypeSurname = 1,
/// Person maiden name field.
  SBSDKGenericDocumentCommonFieldTypeMaidenName = 2,
/// Person given names field.
  SBSDKGenericDocumentCommonFieldTypeGivenNames = 3,
/// Person birth date field.
  SBSDKGenericDocumentCommonFieldTypeBirthDate = 4,
/// Person nationality field.
  SBSDKGenericDocumentCommonFieldTypeNationality = 5,
/// Person birthplace field.
  SBSDKGenericDocumentCommonFieldTypeBirthplace = 6,
/// Document expiry date field.
  SBSDKGenericDocumentCommonFieldTypeExpiryDate = 7,
/// Person eye color field.
  SBSDKGenericDocumentCommonFieldTypeEyeColor = 8,
/// Person height field.
  SBSDKGenericDocumentCommonFieldTypeHeight = 9,
/// Document issue date field.
  SBSDKGenericDocumentCommonFieldTypeIssueDate = 10,
/// Document issuing authority field.
  SBSDKGenericDocumentCommonFieldTypeIssuingAuthority = 11,
/// Address field.
  SBSDKGenericDocumentCommonFieldTypeAddress = 12,
/// Pseudonym field.
  SBSDKGenericDocumentCommonFieldTypePseudonym = 13,
/// MRZ field.
  SBSDKGenericDocumentCommonFieldTypeMrz = 14,
/// Country code (ISO-3166 Alpha-3) field.
  SBSDKGenericDocumentCommonFieldTypeCountryCode = 15,
/// Gender field.
  SBSDKGenericDocumentCommonFieldTypeGender = 16,
/// Signature field.
  SBSDKGenericDocumentCommonFieldTypeSignature = 17,
/// Photo field.
  SBSDKGenericDocumentCommonFieldTypePhoto = 18,
/// Date of start of validity field.
  SBSDKGenericDocumentCommonFieldTypeValidFromDate = 19,
/// Check routing number.
  SBSDKGenericDocumentCommonFieldTypeRoutingNumber = 20,
/// Check account number.
  SBSDKGenericDocumentCommonFieldTypeAccountNumber = 21,
/// Place of issue for the identity card.
  SBSDKGenericDocumentCommonFieldTypePlaceOfIssue = 22,
/// Type of the title field in the identity document.
  SBSDKGenericDocumentCommonFieldTypeTitleType = 23,
/// Remarks field in the identity document.
  SBSDKGenericDocumentCommonFieldTypeRemarks = 24,
/// Full name field.
  SBSDKGenericDocumentCommonFieldTypeName = 25,
/// Card access number field.
  SBSDKGenericDocumentCommonFieldTypeCardAccessNumber = 26,
/// Not valid type.
  SBSDKGenericDocumentCommonFieldTypeNone = -1,
};

@class SBSDKGenericDocumentFieldType;
@class SBSDKGenericDocumentOcrResult;
enum SBSDKGenericDocumentFieldValidationStatus : NSInteger;

/// A generic document field.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK25SBSDKGenericDocumentField")
@interface SBSDKGenericDocumentField : NSObject
/// The type of the field.
@property (nonatomic, strong) SBSDKGenericDocumentFieldType * _Nonnull type;
/// Optional value of the field.
/// Applicable only to text fields.
@property (nonatomic, strong) SBSDKGenericDocumentOcrResult * _Nullable value;
/// Image crop of the field.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Field validation status.
/// Applicable only to fields that support some kind of validation.
@property (nonatomic) enum SBSDKGenericDocumentFieldValidationStatus validationStatus;
- (nonnull instancetype)initWithType:(SBSDKGenericDocumentFieldType * _Nonnull)type value:(SBSDKGenericDocumentOcrResult * _Nullable)value image:(UIImage * _Nullable)image validationStatus:(enum SBSDKGenericDocumentFieldValidationStatus)validationStatus OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The fields validation status. Applicable only to fields that support some kind of validation, e.g. using check digits.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKGenericDocumentFieldValidationStatus, "ValidationStatus", open) {
/// Field value failed validation
  SBSDKGenericDocumentFieldValidationStatusInvalid = 0,
/// Field value passed validation
  SBSDKGenericDocumentFieldValidationStatusValid = 1,
/// Field does not support validation
  SBSDKGenericDocumentFieldValidationStatusUndefined = -1,
};

enum SBSDKGenericDocumentFieldDisplayStateValue : NSInteger;

/// The generic document fields display status. Whether a field is shown or hidden in the user interface.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK37SBSDKGenericDocumentFieldDisplayState")
@interface SBSDKGenericDocumentFieldDisplayState : NSObject
/// The field will not be shown in the user interface.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKGenericDocumentFieldDisplayState * _Nonnull hidden;)
+ (SBSDKGenericDocumentFieldDisplayState * _Nonnull)hidden SWIFT_WARN_UNUSED_RESULT;
/// The field will be shown in the user interface if its text value isn’t an empty string.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKGenericDocumentFieldDisplayState * _Nonnull visibleIfNotEmpty;)
+ (SBSDKGenericDocumentFieldDisplayState * _Nonnull)visibleIfNotEmpty SWIFT_WARN_UNUSED_RESULT;
/// The field will be shown in the user interface.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKGenericDocumentFieldDisplayState * _Nonnull alwaysVisible;)
+ (SBSDKGenericDocumentFieldDisplayState * _Nonnull)alwaysVisible SWIFT_WARN_UNUSED_RESULT;
/// The value of the state.
@property (nonatomic, readonly) enum SBSDKGenericDocumentFieldDisplayStateValue value;
- (nonnull instancetype)initWithValue:(enum SBSDKGenericDocumentFieldDisplayStateValue)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKGenericDocumentFieldDisplayStateValue, "Value", open) {
  SBSDKGenericDocumentFieldDisplayStateValueHidden = 0,
  SBSDKGenericDocumentFieldDisplayStateValueVisibleIfNotEmpty = 1,
  SBSDKGenericDocumentFieldDisplayStateValueAlwaysVisible = 2,
};


/// A generic document field type.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK29SBSDKGenericDocumentFieldType")
@interface SBSDKGenericDocumentFieldType : NSObject
/// A dictionary of user-defined visibility states for generic document field types.
/// Defaults to <code>nil</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, SBSDKGenericDocumentFieldDisplayState *> * _Nullable userFieldTypeVisibilities;)
+ (NSDictionary<NSString *, SBSDKGenericDocumentFieldDisplayState *> * _Nullable)userFieldTypeVisibilities SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserFieldTypeVisibilities:(NSDictionary<NSString *, SBSDKGenericDocumentFieldDisplayState *> * _Nullable)value;
/// A dictionary of user-defined display strings for generic document field types.
/// Defaults to <code>nil</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable userFieldTypeDisplayTexts;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)userFieldTypeDisplayTexts SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserFieldTypeDisplayTexts:(NSDictionary<NSString *, NSString *> * _Nullable)value;
/// A dictionary of the default display strings for generic document field types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull defaultFieldTypeDisplayTexts;)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)defaultFieldTypeDisplayTexts SWIFT_WARN_UNUSED_RESULT;
/// A dictionary of the default visibility states for generic document field types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, SBSDKGenericDocumentFieldDisplayState *> * _Nullable defaultFieldTypeVisibilities;)
+ (NSDictionary<NSString *, SBSDKGenericDocumentFieldDisplayState *> * _Nullable)defaultFieldTypeVisibilities SWIFT_WARN_UNUSED_RESULT;
/// Local field type name scoped to the containing document type.
@property (nonatomic, copy) NSString * _Nonnull name;
/// Unique global field type name prefixed with the document types of all containing documents.
@property (nonatomic, copy) NSString * _Nonnull fullName;
/// Normalized global field type name.
/// Fields in document types derived from the same base document type in the schema will have the same normalized name.
@property (nonatomic, copy) NSString * _Nonnull normalizedName;
/// Common field type.
/// Commonly occurring fields that have the same semantic meaning in different document types will often have a set common type.
@property (nonatomic) enum SBSDKGenericDocumentCommonFieldType commonType;
/// The friendly, human-readable display name of this field in English.
/// Can be customized by setting values to <code>SBSDKGenericDocumentFieldType/userFieldTypeDisplayTexts</code>.
/// This computed property first looks up the display text for the receiver in the
/// <code>SBSDKGenericDocumentFieldType/userFieldTypeDisplayTexts</code> dictionary.
/// If there is no value stored, or the user dictionary is <code>nil</code>,
/// it automatically falls back to the <code>SBSDKGenericDocumentFieldType/defaultFieldTypeDisplayTexts</code> dictionary.
@property (nonatomic, readonly, copy) NSString * _Nullable displayText;
@property (nonatomic, strong) NSNumber * _Nullable listIndex;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name fullName:(NSString * _Nonnull)fullName normalizedName:(NSString * _Nonnull)normalizedName commonType:(enum SBSDKGenericDocumentCommonFieldType)commonType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// A generic documents fields result of OCR text recognition.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK29SBSDKGenericDocumentOcrResult")
@interface SBSDKGenericDocumentOcrResult : NSObject
/// The recognized text of the field.
@property (nonatomic, copy) NSString * _Nonnull text;
/// Confidence in result accuracy.
/// The value ranges from 0.0 to 1.0, higher is better.
@property (nonatomic) float confidence;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Enumeration of supported image file types.
typedef SWIFT_ENUM(NSInteger, SBSDKImageFileFormat, open) {
/// The image file is a PNG.
  SBSDKImageFileFormatPNG = 0,
/// The image file is a JPEG.
  SBSDKImageFileFormatJPEG = 1,
};


/// Encapsulates image metadata, e.g. EXIF, TIFF, JFIF in a convenient way.
/// Use <code>SBSDKImageMetadataProcessor</code> to extract metadata from and inject changed metadata into image data.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK18SBSDKImageMetadata")
@interface SBSDKImageMetadata : NSObject
/// The raw metadata dictionary as it gets extracted from CGImageSourceCopyPropertiesAtIndex. Readonly.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull metadataDictionary;
/// The orientation flag of the image.
@property (nonatomic) NSInteger orientation;
/// The width of the image in pixels.
@property (nonatomic) NSInteger imageWidth;
/// The height of the image in pixels.
@property (nonatomic) NSInteger imageHeight;
/// The title of the image.
@property (nonatomic, copy) NSString * _Nullable title;
/// The longitude of the location where the image was captured.
@property (nonatomic) double longitude;
/// The latitude of the location where the image was captured.
@property (nonatomic) double latitude;
/// The altitude of the location where the image was captured.
@property (nonatomic) double altitude;
/// The date of when the image was captured.
@property (nonatomic, copy) NSDate * _Nullable originalDate;
/// The date of when the image was digitized.
@property (nonatomic, copy) NSDate * _Nullable digitalizationDate;
/// The model of the lens used to capture the image. Readonly.
@property (nonatomic, readonly, copy) NSString * _Nullable lensModel;
/// The manufacturer of the lens used to capture the image. Readonly.
@property (nonatomic, readonly, copy) NSString * _Nullable lensMaker;
/// The real focal length of the lens used to capture the image. Measured in millimeters. Readonly.
/// note:
/// Returns -1.0, if the value is not present in the metadata.
@property (nonatomic, readonly) double focalLength;
/// The 35mm equivalent focal length of the lens used to capture the image. Measured in millimeters. Readonly.
/// note:
/// Returns -1.0, if the value is not present in the metadata.
@property (nonatomic, readonly) double focalLength35mm;
/// The f-stop number or aperture of the lens used to capture the image. Readonly.
/// note:
/// Returns -1.0, if the value is not present in the metadata.
@property (nonatomic, readonly) double aperture;
/// The duration the sensor was exposed during capturing the image. Equals to 1.0 / shutter speed. Readonly.
/// note:
/// Returns -1.0, if the value is not present in the metadata.
@property (nonatomic, readonly) double exposureTime;
/// The ISO value used to capture the image. Readonly.
/// note:
/// Returns -1.0, if the value is not present in the metadata.
@property (nonatomic, readonly) double ISOValue;
/// Creates a new  <code>SBSDKImageMetadata</code> object or <code>nil</code>, if the metadata dictionary does not contain valid metadata.
/// \param metadata Takes the the raw metadata dictionary as it gets extracted from <code>CGImageSourceCopyPropertiesAtIndex</code>.
///
- (nullable instancetype)initWithMetadataDictionary:(NSDictionary<NSString *, id> * _Nonnull)metadata OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Helper class to extract or inject image metadata, e.g. EXIF, TIFF, JFIF from  image data.
/// warning:
/// Changing an images metadata can break it, e.g. by setting wrong width or height.
/// Example usage:
/// <ol>
///   <li>
///     Use <code>UIImage().jpegData(compressionQuality:)</code> to obtain a <code>Data</code> object from a <code>UIImage</code>.
///   </li>
///   <li>
///     Call <code>SBSDKImageMetadataProcessor</code> function <code>extractMetadata(from:)</code> to retrieve an <code>SBSDKImageMetadata</code> object from the image data.
///   </li>
///   <li>
///     Modify the metadata object as needed.
///   </li>
///   <li>
///     Call <code>SBSDKImageMetadataProcessor</code> function <code>imageDataByInjecting(metadata:into:)</code> to inject the modified metadata into the image data.
///   </li>
///   <li>
///     Create a new <code>UIImage</code> object from the returned image data using the <code>UIImage(data:)</code> constructor with the modified metadata.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKImageMetadataProcessor")
@interface SBSDKImageMetadataProcessor : NSObject
/// Extracts an image’s metadata (EXIF, TIFF, JFIF etc.) from an <code>Data</code> object.
/// \param imageData The <code>Data</code> object containing the image data.
///
///
/// returns:
/// An <code>SBSDKImageMetadata</code> object containing the image’s metadata, or <code>nil</code> if the image data is invalid.
+ (SBSDKImageMetadata * _Nullable)extractMetadataFromImageData:(NSData * _Nonnull)imageData SWIFT_WARN_UNUSED_RESULT;
/// Merges image data and (modified) image metadata and creates a new <code>Data</code> object that can be used to create a new image.
/// \param metadata The (modified) metadata object to be used for the new image data object.
///
/// \param imageData The image data of the image to inject the metadata into.
///
///
/// returns:
/// An <code>Data</code> object containing the given image data and metadata, or <code>nil</code> if the image data is invalid. Can be used to create a new <code>UIImage</code>.
+ (NSData * _Nullable)imageDataByInjectingMetadata:(SBSDKImageMetadata * _Nonnull)metadata intoImageData:(NSData * _Nonnull)imageData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

/// Protocol for an order-aware (array like) image storage.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK17SBSDKImageStoring_")
@protocol SBSDKImageStoring <NSCopying>
/// Number of images in the receiver.
@property (nonatomic, readonly) NSInteger imageCount;
/// Adds a <code>UIImage</code> into the storage.
/// \param image The image to be added.
///
///
/// returns:
/// <code>True</code>, if the operation was successful, <code>False</code> otherwise.
- (BOOL)addImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Adds an image from a file into the storage.
/// \param url The file <code>URL</code> of the image to be added.
///
///
/// returns:
/// <code>True</code>, if the operation was successful, <code>False</code> otherwise.
- (BOOL)addImageFromURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Returns the stored UIImage at the specified index.
/// \param index A valid index of the image.
///
///
/// returns:
/// The image at the given index, or <code>nil</code> if the image could not be loaded.
- (UIImage * _Nullable)imageAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL of the stored image at the specified index.
/// \param index A valid index of the image.
///
///
/// returns:
/// The images <code>URL</code> at the given index, or <code>nil</code> if the image file does not exist.
- (NSURL * _Nullable)imageURLAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Removes the stored image at the given index from the image storage.
/// \param index A valid index of the image to be removed.
///
- (void)removeImageAtIndex:(NSInteger)index;
/// Removes all stored images from the image storage.
- (void)removeAllImages;
/// Creates a copy of the storage.
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
@end

@class NSIndexSet;

SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK22SBSDKIndexSetValidator")
@interface SBSDKIndexSetValidator : NSObject
+ (NSIndexSet * _Nonnull)validateIndexSet:(NSIndexSet * _Nonnull)indexSet withStorage:(id <SBSDKImageStoring> _Nonnull)storage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKStorageLocation;

/// A simple thread-safe multiple-reader-single-writer index based disk image cache class.
/// Manages images in an array-like fashion.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK24SBSDKIndexedImageStorage")
@interface SBSDKIndexedImageStorage : NSObject <SBSDKImageStoring>
/// Array of all stored images URLs.
/// note:
/// If the storage is encrypted, the data at these URLs are encrypted and must be properly decrypted before being used.
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull imageURLs;
/// The JPEG compression if JPEG file format is used. Range: 0.0 - 1.0.
@property (nonatomic) CGFloat jpegCompressionQuality;
@property (nonatomic, readonly) NSInteger imageCount;
/// Image file format to be used to store the managed images.
@property (nonatomic, readonly) enum SBSDKImageFileFormat fileFormat;
/// Encrypter used to encrypt and decrypt the image data. If <code>nil</code>, no encryption/decryption is used.
/// note:
/// When using encryption you still can access the unencrypted images in the receiver.
/// Of course, encrypted storages cannot be read without the proper encrypter being set here.
/// You are responsible for migrating image storages.
/// Defaults to <code>nil</code>: no encryption is used.
/// See <code>SBSDKAESEncrypter</code> for reference.
@property (nonatomic, strong) id <SBSDKStorageCrypting> _Nullable encrypter;
/// A new <code>SBSDKIndexedImageStorage</code> at a temporary location (application caches folder).
/// On deallocation the receiver will remove all its files from the file system.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKIndexedImageStorage * _Nullable temporary;)
+ (SBSDKIndexedImageStorage * _Nullable)temporary SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new <code>SBSDKIndexedImageStorage</code> at the given storage location.
/// \param storageLocation The storage location at which the new storage should reside.
///
- (nullable instancetype)initWithStorageLocation:(SBSDKStorageLocation * _Nullable)storageLocation;
/// Initializes a new <code>SBSDKIndexedImageStorage</code> at the given storage location with given image file format.
/// \param storageLocation The storage location at which the new storage should reside.
///
/// \param fileFormat The file format that should be used to store the images.
///
/// \param encrypter The encrypter used to encrypt/decrypt image data.If <code>nil</code>, no encryption is used.
///
- (nullable instancetype)initWithStorageLocation:(SBSDKStorageLocation * _Nullable)storageLocation fileFormat:(enum SBSDKImageFileFormat)fileFormat encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new <code>SBSDKIndexedImageStorage</code> at the given storage location with given image file format.
/// \param storageLocation The storage location at which the new storage should reside.
///
/// \param fileFormat The file format that should be used to store the images.
///
/// \param encrypter The encrypter used to encrypt/decrypt image data.If <code>nil</code>, no encryption is used.
///
/// \param encryptedImagesURLs Array of URLs containing encrypted images. The images at these URLs must be encrypted with
/// the given encrypter (if not <code>nil</code>) and must have the same file format as specified in the fileFormat parameter.
///
- (nullable instancetype)initWithStorageLocation:(SBSDKStorageLocation * _Nullable)storageLocation fileFormat:(enum SBSDKImageFileFormat)fileFormat encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter encryptedImagesURLs:(NSArray<NSURL *> * _Nonnull)encryptedImagesURLs;
- (BOOL)addImage:(UIImage * _Nonnull)image;
- (BOOL)addImageFromURL:(NSURL * _Nonnull)url;
/// Inserts a new image into the receiver at the given index.
/// \param image The <code>UIImage</code> to be managed by the receiver.
///
/// \param index The valid index at which the new image should be inserted.
///
///
/// returns:
/// <code>True</code>, if the operation was successfull, <code>False</code> otherwise.
- (BOOL)insertImage:(UIImage * _Nonnull)image atIndex:(NSInteger)index;
/// Moves the image at the source index to the destination index.
/// \param sourceIndex The valid current index of the image to be moved.
///
/// \param destinationIndex The valid new index of the image to be moved.
///
///
/// returns:
/// <code>True</code>, if the operation was successfull, <code>False</code> otherwise.
- (BOOL)moveImageFromIndex:(NSInteger)sourceIndex toIndex:(NSInteger)destinationIndex;
/// Replaces the receivers image at index with the given image.
/// \param index The valid current index of the image to be replaced.
///
/// \param image The new image that should be stored at the given index.
///
///
/// returns:
/// <code>True</code>, if the operation was successfull, <code>False</code> otherwise.
- (BOOL)replaceImageAtIndex:(NSInteger)index withImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Replaces the receivers image at index with the image stored at the given URL.
/// \param index The valid current index of the image to be replaced.
///
/// \param url The <code>URL</code> of the new image that should be stored at the given index.
///
///
/// returns:
/// <code>True</code>, if the operation was successfull, <code>False</code> otherwise.
- (BOOL)replaceImageAtIndex:(NSInteger)index withImageAtURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)imageAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Blocks the current thread until all enqueued writing operations have been finished.
- (void)waitUntilWritingCompleted;
- (NSURL * _Nullable)imageURLAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)removeImageAtIndex:(NSInteger)index;
- (void)removeAllImages;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A simple thread-safe multiple-reader-single-writer key-value fashioned disk image cache class.
/// Manages images in a dictionary-like fashion.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK22SBSDKKeyedImageStorage")
@interface SBSDKKeyedImageStorage : NSObject
/// The number of stored images.
@property (nonatomic, readonly) NSInteger imageCount;
/// Array of all stored images URLs (values).
/// Note: If the storage is encrypted, the data at these URLs are encrypted and must be properly
/// decrypted before being used.
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull imageURLs;
/// Array of all stored keys.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull imageKeys;
/// Image file format to be used to store the managed images.
@property (nonatomic, readonly) enum SBSDKImageFileFormat fileFormat;
/// The JPEG compression if JPEG file format is used. Range: 0.0 - 1.0.
@property (nonatomic) CGFloat jpegCompressionQuality;
/// Encrypter used to encrypt and decrypt the image data. If <code>nil</code>, no encryption/decryption is used.
/// note:
/// When using encryption you still can access the unencrypted images in the receiver.
/// Of course, encrypted storages cannot be read without the proper encrypter being set here.
/// You are responsible for migrating image storages.
/// Defaults to <code>nil</code>: no encryption is used.
/// See <code>SBSDKAESEncrypter</code> for reference.
@property (nonatomic, readonly, strong) id <SBSDKStorageCrypting> _Nullable encrypter;
/// Initializes a new <code>SBSDKKeyedImageStorage</code> at the given storage location.
/// \param storageLocation The storage location at which the new storage should reside.
///
- (nullable instancetype)initWithStorageLocation:(SBSDKStorageLocation * _Nullable)storageLocation;
/// Initializes a new <code>SBSDKKeyedImageStorage</code> at the given storage location with given image file format.
/// \param storageLocation The storage location at which the new storage should reside.
///
/// \param fileFormat The file format that should be used to store the images.
///
/// \param encrypter The encrypter used to encrypt/decrypt image data. If <code>nil</code>, no encryption is used.
///
- (nullable instancetype)initWithStorageLocation:(SBSDKStorageLocation * _Nullable)storageLocation fileFormat:(enum SBSDKImageFileFormat)fileFormat encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter OBJC_DESIGNATED_INITIALIZER;
/// Stores an image at the given key.
/// note:
/// Allowed are alphanumeric characters, dash and underscore.
/// \param image The <code>UIImage</code> to be managed by the receiver.
///
/// \param key The key at which to store the image. Key must contain at least one character.
///
- (void)setImage:(UIImage * _Nonnull)image forKey:(NSString * _Nonnull)key;
/// Returns the image for given key.
/// warning:
/// Do not perform any write operations at that URL!
/// \param key The key at which the requested image was stored.
///
///
/// returns:
/// The instance of <code>UIImage</code> for given key.
- (UIImage * _Nullable)imageForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the image file URL for given key.
/// note:
/// If the storage is encrypted, the data at that URL is encrypted and must be properly decrypted before it can be used.
/// warning:
/// Do not perform any write operations at that URL!
/// \param key The key at which the requested image was stored.
///
///
/// returns:
/// A URL in the file system pointing to the image file or <code>nil</code>, if there was no image at that key.
- (NSURL * _Nullable)imageURLForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Removes the image at the given key from the receiver as well as from the file system.
/// \param key The key for the image that should be removed.
///
- (void)removeImageForKey:(NSString * _Nonnull)key;
/// Removes the images at keys from the receiver as well as from the file system, which keys prefix match the prefix string.
/// \param prefix The prefix of the keys for the images that should be removed.
///
- (void)removeImagesForKeysMatchingPrefix:(NSString * _Nonnull)prefix;
/// Removes all stored images from the receiver as well as from the file system.
- (void)removeAllImages;
/// Blocks the current thread until all enqueued writing operations have been finished.
- (void)waitUntilWritingCompleted;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The status of the ScanbotSDK license.
typedef SWIFT_ENUM(NSInteger, SBSDKLicenseStatus, open) {
/// The license is valid.
  SBSDKLicenseStatusOkay = 0,
/// No license has been installed. The trial mode is active.
  SBSDKLicenseStatusTrial = 1,
/// No license has been installed. The trial mode ended.
  SBSDKLicenseStatusNotSet = 10,
/// Invalid license. License contains corrupted data.
  SBSDKLicenseStatusCorrupted = 11,
/// Invalid license. The license is not valid for this operating system.
  SBSDKLicenseStatusWrongOS = 12,
/// Invalid license. The license is not valid for this application.
  SBSDKLicenseStatusAppIDMismatch = 13,
/// Invalid license. The license has expired.
  SBSDKLicenseStatusExpired = 14,
};


SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK8SBSDKLog")
@interface SBSDKLog : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLoggingEnabled;)
+ (BOOL)isLoggingEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLoggingEnabled:(BOOL)value;
+ (void)logInfo:(NSString * _Nonnull)message;
+ (void)logError:(NSString * _Nonnull)message;
+ (void)logWarning:(NSString * _Nonnull)message;
@end

/// This enum describes the available orientation lock modes for the user interface.
/// Captured images are always top-oriented to the status bar.
typedef SWIFT_ENUM(NSInteger, SBSDKOrientationLock, open) {
/// The orientation is not locked. The captured image is orientated so that the upper area of the image is directed towards the status bar.
/// The image either has a landscape or portrait aspect ratio.
  SBSDKOrientationLockNone = 0,
/// The orientation is locked to the portrait modes. The captured image is orientated so that the upper area of the image is directed towards the status bar.
/// The image always has a portrait aspect ratio.
  SBSDKOrientationLockPortrait = 1,
/// The orientation is locked to the landscape modes. The captured image is orientated so that the upper area of the image is directed towards the status bar.
/// The image always has a landscape aspect ratio.
  SBSDKOrientationLockLandscape = 2,
};

@class SBSDKProgress;

/// Class used to extract pages from a PDF file and returns them in various ways.
/// The synchronous functions of this class are running in the same thread that they are called from, so it is up to you to control the concurrency.
/// The asynchronous functions run in a shared queue to prevent memory pressure when running multiple extractions at the same time.
/// It is recommended to use background queues in most cases.
/// Currently the flattening of the PDF document is user’s responsibility. So if the document will have unflattened annotations (except signs), they will not be exported.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK22SBSDKPDFPagesExtractor")
@interface SBSDKPDFPagesExtractor : NSObject
/// Extracts pages from PDF and converts them to an array of <code>UIImage</code>. Nothing is written to disk during this operation. Runs in the same thread, as it is called from.
/// The scaling of the media box is set to 2.
/// \param pdfURL The URL of the PDF file.
///
///
/// returns:
/// An array of <code>UIImage</code> with extracted pages. The array will be empty if something is wrong.
- (NSArray<UIImage *> * _Nonnull)imagesFromPDF:(NSURL * _Nonnull)pdfURL SWIFT_WARN_UNUSED_RESULT;
/// Extracts pages from PDF and converts them to an array of <code>UIImage</code>. Nothing is written to disk during this operation. Runs in the same thread, as it is called from.
/// \param pdfURL The URL of the PDF file.
///
/// \param scaling Scaling applied to the PDF media box frame while extracting. Affects the output image quality. In most cases the recommended value is 2 and higher.
///
///
/// returns:
/// An array of <code>UIImage</code> with extracted pages. The array will be empty if something is wrong.
- (NSArray<UIImage *> * _Nonnull)imagesFromPDF:(NSURL * _Nonnull)pdfURL scaling:(CGFloat)scaling SWIFT_WARN_UNUSED_RESULT;
/// Extracts pages from a PDF, converts them to JPEGs and writes them to a specified URL. Runs in the same thread that it is called from.
/// No encryption is used here. The compression is set to 1.0. Media box scale value is 2.
/// \param pdfURL The URL of the PDF file.
///
/// \param outputDirectory The output folder where images will be stored. If the folder does not exist, it will be created.
///
///
/// returns:
/// An array of URLs with extracted pages as JPEG files. The array will be empty if something is wrong.
- (NSArray<NSURL *> * _Nonnull)imageURLsFromPDF:(NSURL * _Nonnull)pdfURL outputDirectory:(NSURL * _Nonnull)outputDirectory SWIFT_WARN_UNUSED_RESULT;
/// Extracts pages from a PDF, converts them to JPEGs and writes them to a specified URL. Runs in the same thread that it is called from.
/// No encryption is used here. Media box scale value is 2.
/// \param pdfURL The URL of the PDF file.
///
/// \param compression Compression of the output image file. The range is from 0 to 1, where 1 - lossless conversion, 0 - maximum compression is used.
///
/// \param outputDirectory The output folder where images will be stored. If the folder does not exist, it will be created.
///
///
/// returns:
/// An array of URLs with extracted pages as JPEG files. The array will be empty if something is wrong.
- (NSArray<NSURL *> * _Nonnull)imageURLsFromPDF:(NSURL * _Nonnull)pdfURL compression:(CGFloat)compression outputDirectory:(NSURL * _Nonnull)outputDirectory SWIFT_WARN_UNUSED_RESULT;
/// Extracts pages from a PDF, converts them to JPEGs and writes them to a specified URL. Runs in the same thread that it is called from.
/// \param pdfURL The URL of the PDF file.
///
/// \param scaling Scaling applied to the PDF media box frame while extracting. Affects the output image quality. In most cases the recommended value is 2 and higher.
///
/// \param compression Compression of the output image file. The range is from 0 to 1, where 1 - lossless conversion, 0 - maximum compression is used.
///
/// \param encrypter The encrypter used to encrypt output image files. If <code>nil</code>, no encryption is used.
///
/// \param outputDirectory The output folder where images will be stored. If the folder does not exist, it will be created.
///
///
/// returns:
/// An array of URLs with extracted pages as JPEG files. The array will be empty if something is wrong.
- (NSArray<NSURL *> * _Nonnull)imageURLsFromPDF:(NSURL * _Nonnull)pdfURL scaling:(CGFloat)scaling compression:(CGFloat)compression encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter outputDirectory:(NSURL * _Nonnull)outputDirectory SWIFT_WARN_UNUSED_RESULT;
/// Asynchronously extracts pages from a PDF, converts them to JPEGs and writes them to a specified URL.
/// The array of URLs is passed within the completion handler.
/// \param pdfURL The URL of the PDF file.
///
/// \param scaling Scaling applied to the PDF media box frame while extracting. Affects the output image quality. In most cases the recommended value is 2 and higher.
///
/// \param compression Compression of the output image file. The range is from 0 to 1, where 1 - lossless conversion, 0 - maximum compression is used.
///
/// \param encrypter The encrypter used to encrypt output image files. If <code>nil</code>, no encryption is used.
///
/// \param outputDirectory The output folder where images will be stored. If the folder does not exist, it will be created.
///
/// \param completion The completion handler that delivers the created array of image file URLs.
///
///
/// returns:
/// A progress object that can be used for cancellation and progress observing. If <code>nil</code>, an error occurred.
- (SBSDKProgress * _Nullable)imageURLsFromPDF:(NSURL * _Nonnull)pdfURL scaling:(CGFloat)scaling compression:(CGFloat)compression encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter outputDirectory:(NSURL * _Nonnull)outputDirectory completion:(void (^ _Nonnull)(NSArray<NSURL *> * _Nonnull))completion;
/// Asynchronously extracts pages from a PDF, converts them to JPEGs and writes them to a specified URL.
/// In Swift language it is used with structured concurrency (async/await).
/// \param pdfURL The URL of the PDF file.
///
/// \param scaling Scaling applied to the PDF media box frame while extracting. Affects the output image quality. In most cases the recommended value is 2 and higher.
///
/// \param compression Compression of the output image file. The range is from 0 to 1, where 1 - lossless conversion, 0 - maximum compression is used.
///
/// \param encrypter The encrypter used to encrypt output image files. If <code>nil</code>, no encryption is used.
///
/// \param outputDirectory The output folder where images will be stored. If the folder does not exist, it will be created.
///
///
/// returns:
/// The created array of image file URLs.
- (void)imageURLsAsyncFrom:(NSURL * _Nonnull)pdfURL scaling:(CGFloat)scaling compression:(CGFloat)compression encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter outputDirectory:(NSURL * _Nonnull)outputDirectory completionHandler:(void (^ _Nonnull)(NSArray<NSURL *> * _Nonnull))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVMetadataMachineReadableCodeObject;
@class SBSDKPolygonEdge;
@class NSValue;

/// This class represents a 4-polygon, a polygon with 4 edges. The polygons points are stored in a normalized unit coordinate system from {0, 0} to {1, 1}.
/// To convert to absolute coordinates use the methods that take a size and return absolute values.
/// An absolute space can be any 2-dimensional space with a size, e.g. an image.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK12SBSDKPolygon")
@interface SBSDKPolygon : NSObject <NSCopying>
/// One of the designated initializer methods.
/// \param a The first point of the polygon in unit coordinates.
///
/// \param b The second point of the polygon in unit coordinates.
///
/// \param c The third point of the polygon in unit coordinates.
///
/// \param d The fourth point of the polygon in unit coordinates.
///
- (nonnull instancetype)initWithNormalizedPointA:(CGPoint)a pointB:(CGPoint)b pointC:(CGPoint)c pointD:(CGPoint)d OBJC_DESIGNATED_INITIALIZER;
/// One of the designated initializer methods.
/// \param rect A rectangle in normalized unit space coordinates forming the new polygon.
///
- (nonnull instancetype)initWithNormalizedRect:(CGRect)rect;
/// One of the designated initializer methods.
/// \param a The first point of the polygon in absolute coordinates.
///
/// \param b The second point of the polygon in absolute coordinates.
///
/// \param c The third point of the polygon in absolute coordinates.
///
/// \param d The fourth point of the polygon in absolute coordinates.
///
/// \param size The size to use to convert the points to unit coordinates.
///
- (nonnull instancetype)initWithAbsolutePointA:(CGPoint)a pointB:(CGPoint)b pointC:(CGPoint)c pointD:(CGPoint)d forSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// One of the designated initializer methods.
/// \param values An array of 8 NSNumber double values containing the normalized coordinates in the form [x1, y1, x2, y2, x3, y3, x4, y4].
///
- (nonnull instancetype)initWithNormalizedDoubleValues:(NSArray<NSNumber *> * _Nonnull)values;
/// One of the designated initializer methods.
/// \param codeObject An AVMetadataMachineReadableCodeObject as returned from QR code detection.
///
- (nonnull instancetype)initWithMetadataObject:(AVMetadataMachineReadableCodeObject * _Nonnull)codeObject;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Compares the receiver to another instance of <code>SBSDKPolygon</code>.
/// \param polygon The polygon instance the receiver is compared to.
///
///
/// returns:
/// <code>True</code>, if the points of polygon are equal to the points of the receiver, <code>False</code> otherwise.
- (BOOL)isEqualToPolygon:(SBSDKPolygon * _Nonnull)polygon SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Compares the receiver to another instance of SBSDKPolygon.
/// Similar here means the distance of the normalized corresponding points is less than 0.023.
/// \param polygon The polygon instance the receiver is compared to.
///
///
/// returns:
/// <code>True</code>, if the points of polygon are similar to the points of the receiver, <code>False</code> otherwise.
- (BOOL)isSimilarToPolygon:(SBSDKPolygon * _Nullable)polygon SWIFT_WARN_UNUSED_RESULT;
/// Calculates the standard deviation in the corresponding points of the receiver and the given <code>SBSDKPolygon</code>.
/// \param polygon The polygon instance the receiver is compared to.
///
///
/// returns:
/// Standard deviation.
- (double)standardDeviationTo:(SBSDKPolygon * _Nullable)polygon SWIFT_WARN_UNUSED_RESULT;
/// Clips the receiver the unit space {0, 0} - {1, 1}.
- (void)normalize;
/// Orders the receivers points in clockwise order. The first point is the point right next to 12 o’clock.
/// This method uses the atan2 operator to sort the points clockwise.
- (void)sortClockwise;
/// Helper method to transform a normalized point to an absolute coordinate system with given size.
/// \param point The absolute point to convert into normalized space.
///
/// \param size The size of the absolute coordinate system.
///
///
/// returns:
/// The normalized point.
+ (CGPoint)normalizedPointFromAbsolutePoint:(CGPoint)point withSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Helper method to transform an absolute point to the normalized unit coordinate system with given size.
/// \param point The normalized point to convert into absolute space.
///
/// \param size The size of the absolute coordinate system.
///
///
/// returns:
/// The converted point.
+ (CGPoint)absolutePointFromNormalizedPoint:(CGPoint)point withSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Returns the normalized point at the given index.
/// \param index The index of the point in the receiver. Must be in range {0-3}.
///
///
/// returns:
/// The normalized point.
- (CGPoint)normalizedPointWithIndex:(NSUInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns the absolute point at the given index.
/// \param index The index of the point in the receiver. Must be in range {0-3}.
///
/// \param size The size of the absolute coordinate system to transform the point to.
///
///
/// returns:
/// The converted point.
- (CGPoint)absolutePointWithIndex:(NSUInteger)index forSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Returns the normalized edge at the given index.
/// The edge at index n is built from points at indices n and (n+1) % 4.
/// \param index The index of the edge in the receiver. Must be in range {0-3}.
///
///
/// returns:
/// The normalized edge.
- (SBSDKPolygonEdge * _Nonnull)normalizedEdgeWithIndex:(NSUInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns the absolute edge at the given index.
/// The edge at index n is built from points at indices n and (n+1) % 4.
/// \param index The index of the edge in the receiver. Must be in range {0-3}.
///
/// \param size The size of the absolute coordinate system to transform the edge to.
///
///
/// returns:
/// The absolute edge.
- (SBSDKPolygonEdge * _Nonnull)absoluteEdgeWithIndex:(NSUInteger)index forSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The normalized points as an array of 8 double value NSNumbers in the form [x1, y1, x2, y2, x3, y3, x4, y4].
- (NSArray<NSNumber *> * _Nonnull)normalizedDoubleValues SWIFT_WARN_UNUSED_RESULT;
/// Sets the receivers point at the given index to the value of point.
/// \param point The normalized point.
///
/// \param index The index of the point the set within the receiver in range {0-3}.
///
- (void)setNormalizedPoint:(CGPoint)point forIndex:(NSUInteger)index;
/// Sets the receivers point at the given index to the normalized value of point.
/// \param point The absolute point.
///
/// \param size The size of the absolute coordinate system.
///
/// \param index The index of the point the set within the receiver in range {0-3}.
///
- (void)setAbsolutePointWithPoint:(CGPoint)point with:(CGSize)size for:(NSUInteger)index;
/// Rotates the points of the receiver 90 degrees clockwise, transforming it from one absolute space to another.
/// \param oldSize The size of the absolute coordinate system before rotating it.
///
/// \param newSize The size of the absolute coordinate system after rotating it.
///
- (void)rotate90CWWithOldSize:(CGSize)oldSize newSize:(CGSize)newSize;
/// Rotates the points of the receiver 90 degrees counterclockwise, transforming it from one absolute space to another.
/// \param oldSize The size of the absolute coordinate system before rotating it.
///
/// \param newSize The size of the absolute coordinate system after rotating it.
///
- (void)rotate90CCWWithOldSize:(CGSize)oldSize newSize:(CGSize)newSize;
/// Rotates the points of the receiver 180 degrees, transforming it from one absolute space to another.
/// \param oldSize The size of the absolute coordinate system before rotating it.
///
/// \param newSize The size of the absolute coordinate system after rotating it.
///
- (void)rotate180WithOldSize:(CGSize)oldSize newSize:(CGSize)newSize;
/// Performs times counter-clockwise rotations on the receiver.
/// \param times The number of rotation to perform.
///
/// \param size The size of the absolute coordinate system before rotating it.
///
- (void)rotateCCW:(NSUInteger)times withSize:(CGSize)size;
/// Performs times clockwise rotations on the receiver.
/// \param times The number of rotation to perform.
///
/// \param size The size of the absolute coordinate system before rotating it.
///
- (void)rotateCW:(NSUInteger)times withSize:(CGSize)size;
/// Performs a horizontal flip of the polygon points.
/// \param size The size of the absolute coordinate system to transform the points to.
///
- (void)flipHorizontally:(CGSize)size;
/// Returns the axis-oriented bounding box of the receiver.
/// \param size The absolute size the polygon is scaled to.
///
///
/// returns:
/// The bounding box of the polygon in absolute image space coordinates.
- (CGRect)boundingBoxWithSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Calculates the geometric center (mass point) of the polygon in normalized unit coordinates.
///
/// returns:
/// The geometric center of the polygon.
- (CGPoint)center SWIFT_WARN_UNUSED_RESULT;
/// Calculates the estimated size of the perspective-corrected and cropped image when applying the receiver to an image with given size.
/// \param imageOfSize The size of the original image the receiver should be applied to.
///
/// \param imageScale The scaling factor of the image.
///
/// \param focalLength The focal length of the lens the image was taken with in millimetres.
///
/// \param sensorWidth The width of the sensor the image was taken with in millimetres.
///
///
/// returns:
/// The estimated size of the cropped and perspective-corrected image, when the receiver was applied.
- (CGSize)sizeWhenApplyingToImageOfSize:(CGSize)imageOfSize imageScale:(double)imageScale focalLength:(double)focalLength sensorWidth:(double)sensorWidth SWIFT_WARN_UNUSED_RESULT;
/// Creates a UIBezierPath instance of the receiver for drawing purposes.
/// \param size The size to use to convert the normalized points of the receiver to absolute coordinates.
///
///
/// returns:
/// An UIBezierPath instance representing the polygon converted to absolute space.
- (UIBezierPath * _Nonnull)bezierPathForSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Creates a UIBezierPath instance of the receiver for drawing purposes.
/// \param size The size to use to convert the normalized points of the receiver to absolute coordinates.
///
/// \param cornerRadius The corner radius of the bezier path.
///
/// \param transform The transform to apply to the bezier path.
///
///
/// returns:
/// An UIBezierPath instance representing the polygon converted to absolute space.
- (UIBezierPath * _Nonnull)bezierPathForSize:(CGSize)size cornerRadius:(CGFloat)cornerRadius withTransform:(CGAffineTransform)transform SWIFT_WARN_UNUSED_RESULT;
/// Creates a UIBezierPath instance of the receiver for drawing purposes.
/// \param previewLayer The preview layer the path is going to be presented on.
///
///
/// returns:
/// An UIBezierPath instance representing the polygon.
- (UIBezierPath * _Nonnull)bezierPathForPreviewLayer:(AVCaptureVideoPreviewLayer * _Nonnull)previewLayer SWIFT_WARN_UNUSED_RESULT;
/// Creates a UIBezierPath instance of the receiver for drawing purposes.
/// \param cornerRadius The radius to use when drawing rounded corners.
///
/// \param previewLayer The preview layer the path is going to be presented on.
///
/// \param orientation The device orientation. Used to calculate starting point.
///
/// \param isFrontCamera Currently used camera - front camera. Used to calculate starting point.
///
///
/// returns:
/// An UIBezierPath instance representing the polygon.
- (UIBezierPath * _Nonnull)bezierPathWithCornerRadius:(CGFloat)cornerRadius forPreviewLayer:(AVCaptureVideoPreviewLayer * _Nonnull)previewLayer orientation:(UIDeviceOrientation)orientation isFrontCamera:(BOOL)isFrontCamera SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSValue *> * _Nonnull)absolutePointsWith:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

enum SBSDKPolygonEdgeOrientation : NSInteger;

/// Helper class that encapsulates an edge of a polygon and provides geometric helper methods.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK16SBSDKPolygonEdge")
@interface SBSDKPolygonEdge : NSObject <NSCopying>
/// The start point of the edge
@property (nonatomic, readonly) CGPoint p1;
/// The end point of the edge.
@property (nonatomic, readonly) CGPoint p2;
/// The center of the edge.
@property (nonatomic) CGPoint center;
/// The length of the receiver. In other words the distance between p1 and p2.
@property (nonatomic, readonly) CGFloat length;
/// The axis-aligned bounding box of the receiver.
@property (nonatomic, readonly) CGRect boundingBox;
/// The orientation of the receiver. See <code>SBSDKPolygonEdgeOrientation</code>.
@property (nonatomic, readonly) enum SBSDKPolygonEdgeOrientation orientation;
/// Designated initializer.
/// \param p1 The start point of the edge.
///
/// \param p2 The end point of the edge.
///
- (nonnull instancetype)initWithPoint:(CGPoint)p1 andPoint:(CGPoint)p2 OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enum describing the orientation of a polygon edge.
typedef SWIFT_ENUM(NSInteger, SBSDKPolygonEdgeOrientation, open) {
/// The edge is oriented horizontally.
  SBSDKPolygonEdgeOrientationHorizontal = 0,
/// The edge is oriented vertically.
  SBSDKPolygonEdgeOrientationVertical = 1,
/// The edge is oriented 45° from x- and y-axis.
  SBSDKPolygonEdgeOrientationUndefined = 2,
};

@protocol CAAction;

/// A <code>CAShapeLayer</code> subclass that is used to draw bezier paths with fluid animation.
/// The paths stroke color can be customized.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK17SBSDKPolygonLayer")
@interface SBSDKPolygonLayer : CAShapeLayer
/// The color to draw the paths lines.
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// Designated initializer.
/// \param lineColor The initial color for the path drawing color.
///
- (nonnull instancetype)initWithLineColor:(UIColor * _Nonnull)lineColor;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK13SBSDKProgress")
@interface SBSDKProgress : NSProgress
/// The progress describes a text recognition operation.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKProgressKindTextRecognition;)
+ (NSString * _Nonnull)SBSDKProgressKindTextRecognition SWIFT_WARN_UNUSED_RESULT;
/// The progress describes a document/PDF creation operation.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKProgressKindCreatePages;)
+ (NSString * _Nonnull)SBSDKProgressKindCreatePages SWIFT_WARN_UNUSED_RESULT;
/// The progress describes an image processing operation.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKProgressKindProcessImage;)
+ (NSString * _Nonnull)SBSDKProgressKindProcessImage SWIFT_WARN_UNUSED_RESULT;
/// The standard process for observing a <code>Progress</code> progressing is to use KVO on the <code>Progress</code> instance.
/// The <code>SBSDKProgressUpdateHandler</code> simplifies observing the progress largely.
/// It is called on main thread whenever the progress changes. Usually here you update your UI, e.g. <code>UIProgressView</code>.
@property (nonatomic, copy) void (^ _Nullable updateHandler)(SBSDKProgress * _Nonnull);
@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled;
/// A convenience initializer mimicking the behavior of <code>Progress</code>.
/// \param totalUnitCount The number of total work units the progress. See <code>Progress</code>.
///
- (nonnull instancetype)initWithTotalUnitCount:(int64_t)totalUnitCount;
- (nonnull instancetype)initWithParent:(NSProgress * _Nullable)parentProgressOrNil userInfo:(NSDictionary<NSProgressUserInfoKey, id> * _Nullable)userInfoOrNil OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)cancel;
@property (nonatomic, copy) NSString * _Null_unspecified localizedDescription;
@property (nonatomic, copy) NSString * _Null_unspecified localizedAdditionalDescription;
@end


/// A class that represents the style of the polygon rendered around a barcode in <code>SBSDKBarcodeScanAndCountViewController</code>.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK29SBSDKScanAndCountPolygonStyle")
@interface SBSDKScanAndCountPolygonStyle : NSObject
/// Turns polygon drawing on or off.
@property (nonatomic) BOOL polygonDrawingEnabled;
/// The color of the barcode polygons outline.
@property (nonatomic, strong) UIColor * _Nonnull polygonColor;
/// The inner fill color of the barcode polygon.
@property (nonatomic, strong) UIColor * _Nonnull polygonFillColor;
/// The width of the barcode polygons outline.
@property (nonatomic) CGFloat lineWidth;
/// The corner radius of the barcode polygons outline.
@property (nonatomic) CGFloat cornerRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum describes the possible scanning states of any scanner.
typedef SWIFT_ENUM(NSInteger, SBSDKScannerStatus, open) {
/// The scanner is paused or has not yet been started.
  SBSDKScannerStatusIdle = 0,
/// The scanner is active.
  SBSDKScannerStatusScanning = 1,
/// The scanner has detected something.
  SBSDKScannerStatusDetected = 2,
};

@class UITouch;
@class UIEvent;

/// The button class used in the camera view controller to take a snapshot.
/// Animates itself depending on its status.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK18SBSDKShutterButton")
@interface SBSDKShutterButton : UIButton
/// Indicates, whether a still image is currently being taken or not.
/// If set to <code>True</code> a <code>UIActivityIndicator</code> is shown in the center.
@property (nonatomic) BOOL isTakingPhoto;
/// The current status of the receiver. See <code>SBSDKScannerStatus</code>.
@property (nonatomic) enum SBSDKScannerStatus scannerStatus;
/// The main color of the receiver while the scanner status is <code>SBSDKScannerStatusScanning</code>.
/// Defaults to white.
@property (nonatomic, strong) UIColor * _Nonnull buttonSearchingColor;
/// The main color of the receiver while the scanner status is <code>SBSDKScannerStatusDetected</code>.
/// Defaults to white.
@property (nonatomic, strong) UIColor * _Nonnull buttonDetectedColor;
/// The background color of the receiver while the scanner status is <code>SBSDKScannerStatusScanning</code>.
/// Defaults to clear.
@property (nonatomic, strong) UIColor * _Nonnull buttonSearchingBackgroundColor;
/// The background color of the receiver while the scanner status is <code>SBSDKScannerStatusDetected</code>.
/// Defaults to clear.
@property (nonatomic, strong) UIColor * _Nonnull buttonDetectedBackgroundColor;
/// The color of the indicator shown, when <code>isTakingPhoto</code> is set to <code>True</code>.
@property (nonatomic, strong) UIColor * _Nonnull indicatorColor;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (void)didMoveToWindow;
@end


/// A class to describe the mocking data that is fed to a simulated camera device.
/// A simulated camera device loops a single image and provides the frames to the ScanbotSDK scanner UI components.
/// Along with the frame image you can optionally specify an image that is passed to the ScanbotSDK scanner UI components when capturing a still image.
/// Intended to be used with UI tests.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK28SBSDKSimulatedCameraMockData")
@interface SBSDKSimulatedCameraMockData : NSObject
/// The label of the mock data. Can be used to identify the mock data.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// If set to <code>True</code> the image is reloaded/downloaded after each frame. Otherwise the image is loaded only once and reused per frame.
@property (nonatomic, readonly) BOOL refreshOnEachFrame;
/// Initializes mock data for a simulated camera device from URLs.
/// \param label The label to describe the mock data.
///
/// \param imageURL A web or file URL to an image file to be used to feed the video stream of simulated camera device.
///
/// \param capturedImageURL A web or file URL to an image to be used on simulated camera devices when capturing a still image. If <code>nil</code>, the current frame of the <code>imageURL</code> is returned when capturing a still image.
///
/// \param refreshOnEachFrame If set to <code>True</code> the image is reloaded/downloaded after each frame. Otherwise the image is loaded only once and reused per frame.
///
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label imageURL:(NSURL * _Nonnull)imageURL capturedImageURL:(NSURL * _Nullable)capturedImageURL refreshOnEachFrame:(BOOL)refreshOnEachFrame OBJC_DESIGNATED_INITIALIZER;
/// Initializes mock data for a simulated camera device from ressource names of the application bundle.
/// \param label The label to describe the mock data.
///
/// \param imageName The case-sensitive name of the image resource in the application bundle that provides the simulated frames.
///
/// \param capturedImageName The case-sensitive name of the  image resource in the application bundle that is used when capturing still images. If ‘nil’ the current frame of the <code>imageName</code> is returned when capturing a still image.
///
/// \param refreshOnEachFrame If set to <code>True</code> the image is reloaded/downloaded after each frame. Otherwise the image is loaded only once and reused per frame.
///
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label imageName:(NSString * _Nonnull)imageName capturedImageName:(NSString * _Nullable)capturedImageName refreshOnEachFrame:(BOOL)refreshOnEachFrame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SBSDKSoundType : NSInteger;

/// A class to manage playback of sounds and vibration.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK20SBSDKSoundController")
@interface SBSDKSoundController : NSObject
/// To choose between multiple sounds to play.
/// Defaults to <code>SBSDKSoundType/modern</code>.
@property (nonatomic) enum SBSDKSoundType type;
/// Designated initializer.
/// \param soundType The chosen sound type.
///
- (nonnull instancetype)initWithSoundType:(enum SBSDKSoundType)soundType;
/// Plays a standard bleep sound.
- (void)playBleepSound;
/// Plays a custom sound loaded from a given URL.
/// \param url The URL to the sound file.
///
- (void)playCustomSoundFromURL:(NSURL * _Nonnull)url;
/// Initiates a short vibration of the device. Can be used to give a haptic feedback.
- (void)vibrate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The sound selection type.
typedef SWIFT_ENUM(NSInteger, SBSDKSoundType, open) {
/// To choose the modern beep sound.
  SBSDKSoundTypeModern = 0,
/// To choose the old classic beep sound.
  SBSDKSoundTypeClassic = 1,
};



/// Descriptor and helper class for describing and creating a directory on the file system.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK20SBSDKStorageLocation")
@interface SBSDKStorageLocation : NSObject
/// The URL of the applications documents folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull applicationDocumentsFolderURL;)
+ (NSURL * _Nonnull)applicationDocumentsFolderURL SWIFT_WARN_UNUSED_RESULT;
/// The URL of the applications support folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull applicationSupportFolderURL;)
+ (NSURL * _Nonnull)applicationSupportFolderURL SWIFT_WARN_UNUSED_RESULT;
/// The URL of the applications caches folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull applicationCachesFolderURL;)
+ (NSURL * _Nonnull)applicationCachesFolderURL SWIFT_WARN_UNUSED_RESULT;
/// The default base URL for new storage locations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull defaultURL;)
+ (NSURL * _Nonnull)defaultURL SWIFT_WARN_UNUSED_RESULT;
/// The URL of the ScanbotSDK folder which is located within the application support folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull scanbotSupportFolderURL;)
+ (NSURL * _Nonnull)scanbotSupportFolderURL SWIFT_WARN_UNUSED_RESULT;
/// A temporary URL in the applications caches folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull temporaryURL;)
+ (NSURL * _Nonnull)temporaryURL SWIFT_WARN_UNUSED_RESULT;
/// A temporary storage location in the applications caches folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKStorageLocation * _Nullable temporary;)
+ (SBSDKStorageLocation * _Nullable)temporary SWIFT_WARN_UNUSED_RESULT;
/// The base folder URL of the receiver.
@property (nonatomic, copy) NSURL * _Nonnull baseURL;
/// Initializes the new storage location living at the given folder.
/// \param baseURL The URL of the folder in which the new storage should be located.
/// If the folder does not exist, it is created. If <code>nil</code> the new location will reside in the <code>defaultURL</code>.
///
- (nullable instancetype)initWithBaseURL:(NSURL * _Nullable)baseURL OBJC_DESIGNATED_INITIALIZER;
/// Generates a file or folder URL with the given name in the folder of the receivers baseURL.
/// \param key The name of the file or folder within the receivers.
///
///
/// returns:
/// A file or folder URL with the given name in the folder of the receivers baseURL
- (NSURL * _Nullable)urlWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Removes the receivers folder from the disk.
- (BOOL)removeFromDiskAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A container for test data, e.g. simulated camera mock data.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK13SBSDKTestData")
@interface SBSDKTestData : NSObject
/// The test data for a simulated camera. Intended for UI testing, etc.
/// If set to a non-nil value, any active scanners camera session will immediately switch to simulation mode and simulate a camera stream and captured images using an image source provided in the <code>SBSDKSimulatedCameraMockData</code>.
/// Setting it to <code>nil</code> will return to the normal camera mode on physical devices and to simulated mode without a video stream on iOS simulators.
/// Observably via KVO. Thread safe.
/// Defaults to <code>nil</code>.
@property (nonatomic, strong) SBSDKSimulatedCameraMockData * _Nullable cameraMockData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol that defines the methods and properties required for a custom tracking view to be displayed over detected barcodes using the <code>SBSDKBarcodeTrackingOverlayConfiguration</code>.
/// The custom view must conform to this protocol in order to be used as an overlay on top of the detected barcodes.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK31SBSDKTrackedBarcodeInfoViewable_")
@protocol SBSDKTrackedBarcodeInfoViewable
/// Creates and returns an instance of the conforming <code>SBSDKTrackedBarcodeInfoView</code>.
/// \param withBarcode The barcode to be tracked.
///
///
/// returns:
/// An instance of the conforming <code>SBSDKTrackedBarcodeInfoView</code>.
+ (UIView <SBSDKTrackedBarcodeInfoViewable> * _Nonnull)makeWithBarcode:(SBSDKBarcodeScannerResult * _Nonnull)withBarcode SWIFT_WARN_UNUSED_RESULT;
/// Updates the frame of the tracking view to match the position and size of the associated barcode.
/// note:
/// Implement this method to update the position and size of the tracking view based on the detected barcode’s frame.
/// \param barcodeFrame The frame of the detected barcode within the coordinate system of the tracking view’s superview.
///
/// \param isSelected A boolean value that indicates whether the associated barcode is selected.
///
/// \param textStyle The text style of the receiver.
///
/// \param polygonStyle The polygon style of the receiver.
///
- (void)updateWithBarcodeFrame:(CGRect)barcodeFrame isSelected:(BOOL)isSelected textStyle:(SBSDKBarcodeTrackedViewTextStyle * _Nonnull)textStyle polygonStyle:(SBSDKBarcodeTrackedViewPolygonStyle * _Nonnull)polygonStyle;
@end


/// Abstract class for all the configurations.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK12SBSDKUI2Node")
@interface SBSDKUI2Node : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKUI2RoundButton;

/// Configuration of the buttons available in the action bar.
SWIFT_CLASS_NAMED("SBSDKUI2ActionBarConfiguration")
@interface SBSDKUI2ActionBarConfiguration : SBSDKUI2Node
/// Appearance of the flash button.
@property (nonatomic, strong) SBSDKUI2RoundButton * _Nonnull flashButton;
/// Appearance of the zoom button.
@property (nonatomic, strong) SBSDKUI2RoundButton * _Nonnull zoomButton;
/// Appearance of the flip camera button.
@property (nonatomic, strong) SBSDKUI2RoundButton * _Nonnull flipCameraButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ActionBarConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFlashButton:(SBSDKUI2RoundButton * _Nonnull)flashButton zoomButton:(SBSDKUI2RoundButton * _Nonnull)zoomButton flipCameraButton:(SBSDKUI2RoundButton * _Nonnull)flipCameraButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2FindAndPickArOverlayPolygonConfiguration;
@class SBSDKUI2FindAndPickBadgeConfiguration;

/// Configuration of the AR overlay.
SWIFT_CLASS_NAMED("SBSDKUI2ArOverlayFindAndPickConfiguration")
@interface SBSDKUI2ArOverlayFindAndPickConfiguration : SBSDKUI2Node
/// Control the visibility of the user guidance.
/// Default is false
@property (nonatomic) BOOL visible;
/// If enabled, the scanner will always immediately scan a barcode in the viewfinder or the camera view. The overlay
/// will mark the scanned barcodes and stays above them.
/// Default is true
@property (nonatomic) BOOL automaticSelectionEnabled;
/// Configuration of the overlay polygon displayed on top of a barcode in the camera preview.
@property (nonatomic, strong) SBSDKUI2FindAndPickArOverlayPolygonConfiguration * _Nonnull polygon;
/// Configuration of the round badge on find and pick ar layer.
@property (nonatomic, strong) SBSDKUI2FindAndPickBadgeConfiguration * _Nonnull badge;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ArOverlayFindAndPickConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible automaticSelectionEnabled:(BOOL)automaticSelectionEnabled polygon:(SBSDKUI2FindAndPickArOverlayPolygonConfiguration * _Nonnull)polygon badge:(SBSDKUI2FindAndPickBadgeConfiguration * _Nonnull)badge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2BadgeStyle;
enum SBSDKUI2BarcodeItemInfoPosition : NSInteger;
@class SBSDKUI2ArOverlayPolygonConfiguration;
@class SBSDKUI2BarcodeItemConfiguration;

/// Configuration of the AR overlay displayed on top of barcodes in the camera preview.
SWIFT_CLASS_NAMED("SBSDKUI2ArOverlayGeneralConfiguration")
@interface SBSDKUI2ArOverlayGeneralConfiguration : SBSDKUI2Node
/// Control the visibility of the user guidance.
/// Default is false
@property (nonatomic) BOOL visible;
/// Parameters of the counter badge appearance e.g. color of background its stroke and text/icon color.
@property (nonatomic, strong) SBSDKUI2BadgeStyle * _Nonnull counterBadge;
/// If enabled, the scanner will always immediately scan a barcode in the viewfinder or the camera view. The overlay
/// will mark the scanned barcodes and stays above them.
/// Default is false
@property (nonatomic) BOOL automaticSelectionEnabled;
/// Where to display the barcode info box in the camera preview.
/// Default is BELOW
@property (nonatomic) enum SBSDKUI2BarcodeItemInfoPosition barcodeItemInfoPosition;
/// Configuration of the overlay polygon displayed on top of a barcode in the camera preview.
@property (nonatomic, strong) SBSDKUI2ArOverlayPolygonConfiguration * _Nonnull polygon;
/// Configuration of the barcode info box displayed in the camera preview.
@property (nonatomic, strong) SBSDKUI2BarcodeItemConfiguration * _Nonnull barcodeItemConfiguration;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ArOverlayGeneralConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible counterBadge:(SBSDKUI2BadgeStyle * _Nonnull)counterBadge automaticSelectionEnabled:(BOOL)automaticSelectionEnabled barcodeItemInfoPosition:(enum SBSDKUI2BarcodeItemInfoPosition)barcodeItemInfoPosition polygon:(SBSDKUI2ArOverlayPolygonConfiguration * _Nonnull)polygon barcodeItemConfiguration:(SBSDKUI2BarcodeItemConfiguration * _Nonnull)barcodeItemConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


@class SBSDKUI2PolygonStyle;

/// Configuration of the overlay polygon displayed on top of a barcode in the camera preview.
SWIFT_CLASS_NAMED("SBSDKUI2ArOverlayPolygonConfiguration")
@interface SBSDKUI2ArOverlayPolygonConfiguration : SBSDKUI2Node
/// Control the visibility of the overlay polygon.
/// Default is true
@property (nonatomic) BOOL visible;
/// Appearance of the overlay polygon when a barcode is not selected.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull deselected;
/// Appearance of the overlay polygon after a barcode has been selected.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull selected;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ArOverlayPolygonConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible deselected:(SBSDKUI2PolygonStyle * _Nonnull)deselected selected:(SBSDKUI2PolygonStyle * _Nonnull)selected OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the finder’s aspect ratio.
SWIFT_CLASS_NAMED("SBSDKUI2AspectRatio")
@interface SBSDKUI2AspectRatio : SBSDKUI2Node
/// Width component of the aspect ratio.
/// Default is 1.0
@property (nonatomic) double width;
/// Height component of the aspect ratio.
/// Default is 1.0
@property (nonatomic) double height;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2AspectRatio * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithWidth:(double)width height:(double)height OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// The customer format used in AUSTRALIA_POST codes. Only relevant for format codes 59 and 62.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2AustraliaPostCustomerFormat, "SBSDKUI2AustraliaPostCustomerFormat", open) {
/// The numeric format.
  SBSDKUI2AustraliaPostCustomerFormatNumeric = 0,
/// The alphanumeric format.
  SBSDKUI2AustraliaPostCustomerFormatAlphaNumeric = 1,
};

@class SBSDKUI2Color;

/// Appearance of the polygon used for buttons and hint backgrounds.
SWIFT_CLASS_NAMED("SBSDKUI2BackgroundStyle")
@interface SBSDKUI2BackgroundStyle : SBSDKUI2Node
/// Color of the polygon outline.
/// Default is “#FFFFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull strokeColor;
/// Polygon color.
/// Default is “#FFFFFF30”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull fillColor;
/// Width of the polygon outline in dp.
/// Default is 2.0
@property (nonatomic) double strokeWidth;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BackgroundStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStrokeColor:(SBSDKUI2Color * _Nonnull)strokeColor fillColor:(SBSDKUI2Color * _Nonnull)fillColor strokeWidth:(double)strokeWidth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Configuration of the round button.
SWIFT_CLASS_NAMED("SBSDKUI2BadgeStyle")
@interface SBSDKUI2BadgeStyle : SBSDKUI2Node
/// Control the visibility of the badge.
/// Default is true
@property (nonatomic) BOOL visible;
/// The style of the button’s background.
@property (nonatomic, strong) SBSDKUI2BackgroundStyle * _Nonnull background;
/// Color of the button foreground (icon, text).
/// Default is “?sbColorOnSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull foregroundColor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BadgeStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible background:(SBSDKUI2BackgroundStyle * _Nonnull)background foregroundColor:(SBSDKUI2Color * _Nonnull)foregroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the round button with badge.
SWIFT_CLASS_NAMED("SBSDKUI2BadgedButton")
@interface SBSDKUI2BadgedButton : SBSDKUI2Node
/// Color of the badge’s background shape.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull badgeBackgroundColor;
/// Color of the badge foreground (icon, text).
/// Default is “#C8193C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull badgeForegroundColor;
/// Whether the button is visible.
/// Default is true
@property (nonatomic) BOOL visible;
/// Color of the button background shape.
/// Default is “#0000007A”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull backgroundColor;
/// Color of the button foreground (icon, text).
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull foregroundColor;
/// Color of the button background shape when the button is active (selected, toggled).
/// Default is “#FFCE5C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull activeBackgroundColor;
/// Color of the button foreground (icon, text) when the button is active (selected, toggled).
/// Default is “#1C1B1F”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull activeForegroundColor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BadgedButton * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBadgeBackgroundColor:(SBSDKUI2Color * _Nonnull)badgeBackgroundColor badgeForegroundColor:(SBSDKUI2Color * _Nonnull)badgeForegroundColor visible:(BOOL)visible backgroundColor:(SBSDKUI2Color * _Nonnull)backgroundColor foregroundColor:(SBSDKUI2Color * _Nonnull)foregroundColor activeBackgroundColor:(SBSDKUI2Color * _Nonnull)activeBackgroundColor activeForegroundColor:(SBSDKUI2Color * _Nonnull)activeForegroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2StyledText;
@class SBSDKUI2IconStyle;

/// Button configuration.
SWIFT_CLASS_NAMED("SBSDKUI2BarButtonConfiguration")
@interface SBSDKUI2BarButtonConfiguration : SBSDKUI2Node
/// Whether the button is visible or not.
/// Default is true
@property (nonatomic) BOOL visible;
/// The text to be displayed on the button.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// The text to be read when button is selected through accessibility mode.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull accessibilityDescription;
/// The style of the button’s background.
@property (nonatomic, strong) SBSDKUI2BackgroundStyle * _Nonnull background;
/// The style of the button’s icon (icon, text).
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull icon;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarButtonConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible title:(SBSDKUI2StyledText * _Nonnull)title accessibilityDescription:(NSString * _Nonnull)accessibilityDescription background:(SBSDKUI2BackgroundStyle * _Nonnull)background icon:(SBSDKUI2IconStyle * _Nonnull)icon OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Type of barcode document format used.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeDocumentFormat")
@interface SBSDKUI2BarcodeDocumentFormat : NSObject
/// American Association of Motor Vehicle Administrators barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull aamva;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)aamva SWIFT_WARN_UNUSED_RESULT;
/// Boarding pass barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull boardingPass;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)boardingPass SWIFT_WARN_UNUSED_RESULT;
/// German medication plan barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull deMedicalPlan;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)deMedicalPlan SWIFT_WARN_UNUSED_RESULT;
/// German medical certificate barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull medicalCertificate;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)medicalCertificate SWIFT_WARN_UNUSED_RESULT;
/// ID card barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull idCardPdf417;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)idCardPdf417 SWIFT_WARN_UNUSED_RESULT;
/// SEPA barcode (aka GiroCode) document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull sepa;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)sepa SWIFT_WARN_UNUSED_RESULT;
/// Swiss QR barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull swissQr;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)swissQr SWIFT_WARN_UNUSED_RESULT;
/// VCard barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull vcard;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)vcard SWIFT_WARN_UNUSED_RESULT;
/// GS1 barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull gs1;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)gs1 SWIFT_WARN_UNUSED_RESULT;
/// The raw value integer of the current <code>SBSDKUI2BarcodeDocumentFormat</code>.
@property (nonatomic, readonly) NSInteger rawValue;
/// Returns an instance of <code>SBSDKUI2BarcodeDocumentFormat</code> based on the provided raw value.
/// \param rawValue An integer representing the raw value of the <code>SBSDKUI2BarcodeDocumentFormat</code>.
///
///
/// returns:
/// An instance of <code>SBSDKUI2BarcodeDocumentFormat</code> corresponding to the provided raw value, or <code>nil</code> if
/// no match is found.
+ (SBSDKUI2BarcodeDocumentFormat * _Nullable)enumValueFrom:(NSInteger)rawValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Barcode symbology used.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeFormat")
@interface SBSDKUI2BarcodeFormat : NSObject
/// Aztec barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull aztec;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)aztec SWIFT_WARN_UNUSED_RESULT;
/// Codabar barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull codabar;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)codabar SWIFT_WARN_UNUSED_RESULT;
/// Code 25 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code25;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code25 SWIFT_WARN_UNUSED_RESULT;
/// Code 39 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code39;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code39 SWIFT_WARN_UNUSED_RESULT;
/// Code 93 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code93;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code93 SWIFT_WARN_UNUSED_RESULT;
/// Code 128 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code128;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code128 SWIFT_WARN_UNUSED_RESULT;
/// Data Matrix barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull dataMatrix;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)dataMatrix SWIFT_WARN_UNUSED_RESULT;
/// EAN-8 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull ean8;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)ean8 SWIFT_WARN_UNUSED_RESULT;
/// EAN-13 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull ean13;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)ean13 SWIFT_WARN_UNUSED_RESULT;
/// ITF (Interleaved 2 of 5) barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull itf;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)itf SWIFT_WARN_UNUSED_RESULT;
/// PDF417 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull pdf417;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)pdf417 SWIFT_WARN_UNUSED_RESULT;
/// QR Code barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull qrCode;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)qrCode SWIFT_WARN_UNUSED_RESULT;
/// Micro QR Code barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull microQrCode;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)microQrCode SWIFT_WARN_UNUSED_RESULT;
/// Databar barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull databar;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)databar SWIFT_WARN_UNUSED_RESULT;
/// Databar Expanded barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull databarExpanded;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)databarExpanded SWIFT_WARN_UNUSED_RESULT;
/// UPC-A barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull upcA;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)upcA SWIFT_WARN_UNUSED_RESULT;
/// UPC-E barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull upcE;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)upcE SWIFT_WARN_UNUSED_RESULT;
/// MSI Plessey barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull msiPlessey;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)msiPlessey SWIFT_WARN_UNUSED_RESULT;
/// IATA 2 of 5 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull iata2Of5;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)iata2Of5 SWIFT_WARN_UNUSED_RESULT;
/// Industrial 2 of 5 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull industrial2Of5;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)industrial2Of5 SWIFT_WARN_UNUSED_RESULT;
/// USPS Intelligent Mail (aka USPS OneCode, USPS-STD-11)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull uspsIntelligentMail;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)uspsIntelligentMail SWIFT_WARN_UNUSED_RESULT;
/// Royal Mail Four-State Customer Code, (aka RM4SCC, CBC, BPO 4 State Code)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull royalMail;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)royalMail SWIFT_WARN_UNUSED_RESULT;
/// Japan Post Four-State Barcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull japanPost;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)japanPost SWIFT_WARN_UNUSED_RESULT;
/// Royal TNT Post Four-State Barcode (aka KIX, Klant IndeX)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull royalTntPost;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)royalTntPost SWIFT_WARN_UNUSED_RESULT;
/// Australia Post Four-State Customer Code
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull australiaPost;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)australiaPost SWIFT_WARN_UNUSED_RESULT;
/// GS1 DataBar Limited
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull databarLimited;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)databarLimited SWIFT_WARN_UNUSED_RESULT;
/// GS1 Composite
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull gs1Composite;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)gs1Composite SWIFT_WARN_UNUSED_RESULT;
/// Databar micro pdf 417
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull microPdf417;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)microPdf417 SWIFT_WARN_UNUSED_RESULT;
/// Maxicode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull maxiCode;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)maxiCode SWIFT_WARN_UNUSED_RESULT;
/// RMQR code
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull rmqrCode;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)rmqrCode SWIFT_WARN_UNUSED_RESULT;
/// Code 11 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code11;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code11 SWIFT_WARN_UNUSED_RESULT;
/// Code 32 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code32;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code32 SWIFT_WARN_UNUSED_RESULT;
/// The raw value integer of the current <code>SBSDKUI2BarcodeFormat</code>.
@property (nonatomic, readonly) NSInteger rawValue;
/// Returns an instance of <code>SBSDKUI2BarcodeFormat</code> based on the provided raw value.
/// \param rawValue An integer representing the raw value of the <code>SBSDKUI2BarcodeFormat</code>.
///
///
/// returns:
/// An instance of <code>SBSDKUI2BarcodeFormat</code> corresponding to the provided raw value, or <code>nil</code> if no
/// match is found.
+ (SBSDKUI2BarcodeFormat * _Nullable)enumValueFrom:(NSInteger)rawValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBSDKUI2BarcodeFormat (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Returns an array of all valid barcode formats.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull allFormats;)
+ (NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull)allFormats SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of all commonly-used barcode formats.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull commonFormats;)
+ (NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull)commonFormats SWIFT_WARN_UNUSED_RESULT;
/// Returns an array containing all 1-D barcode formats.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull oneDFormats;)
+ (NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull)oneDFormats SWIFT_WARN_UNUSED_RESULT;
/// Returns an array containing all 2-D barcode formats.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull twoDFormats;)
+ (NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull)twoDFormats SWIFT_WARN_UNUSED_RESULT;
/// Converts from <code>SBSDKUI2BarcodeFormat</code> to <code>SBSDKBarcodeType</code>.
- (SBSDKBarcodeType * _Nonnull)toSDKType SWIFT_WARN_UNUSED_RESULT;
@end

@protocol SBSDKUI2BarcodeItemMapper;
@class SBSDKUI2BarcodeItemErrorState;

/// Configuration of the barcode data mapping.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeInfoMapping")
@interface SBSDKUI2BarcodeInfoMapping : SBSDKUI2Node
/// Callback to map the barcode data to the data of the corresponding product.
@property (nonatomic, strong) id <SBSDKUI2BarcodeItemMapper> _Nullable barcodeItemMapper;
/// Background color of the barcode info dialog.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sheetColor;
/// Color of the divider and separator lines in the barcode info dialog.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull dividerColor;
/// Background color of the overlay surrounding the barcode mapping error dialog.
/// Default is “?sbColorModalOverlay”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull modalOverlayColor;
/// Text being displayed while a barcode is being mapped.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull loadingMessage;
/// Configuration of the error state displayed when processing a barcode fails.
@property (nonatomic, strong) SBSDKUI2BarcodeItemErrorState * _Nonnull errorState;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeInfoMapping * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBarcodeItemMapper:(id <SBSDKUI2BarcodeItemMapper> _Nullable)barcodeItemMapper sheetColor:(SBSDKUI2Color * _Nonnull)sheetColor dividerColor:(SBSDKUI2Color * _Nonnull)dividerColor modalOverlayColor:(SBSDKUI2Color * _Nonnull)modalOverlayColor loadingMessage:(SBSDKUI2StyledText * _Nonnull)loadingMessage errorState:(SBSDKUI2BarcodeItemErrorState * _Nonnull)errorState OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Data about the scanned barcode.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeItem")
@interface SBSDKUI2BarcodeItem : NSObject
/// Recognized barcode symbology.
@property (nonatomic, readonly, strong) SBSDKUI2BarcodeFormat * _Nullable type;
/// Number of recognized barcodes of this symbology and value.
@property (nonatomic, readonly) NSInteger count;
/// Recognized value of the barcode.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// Recognized barcode value with extension (if available).
@property (nonatomic, readonly, copy) NSString * _Nonnull textWithExtension;
/// Representation of the raw data that is contained the recognized barcode.
@property (nonatomic, readonly, copy) NSData * _Nonnull rawBytes;
/// The parsed known document format (if parsed successfully).
@property (nonatomic, readonly, strong) SBSDKGenericDocument * _Nullable parsedDocument;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeItem * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(SBSDKUI2BarcodeFormat * _Nullable)type count:(NSInteger)count text:(NSString * _Nonnull)text textWithExtension:(NSString * _Nonnull)textWithExtension rawBytes:(NSData * _Nonnull)rawBytes parsedDocument:(SBSDKGenericDocument * _Nullable)parsedDocument OBJC_DESIGNATED_INITIALIZER;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuration of the barcode info box displayed in the camera preview.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeItemConfiguration")
@interface SBSDKUI2BarcodeItemConfiguration : SBSDKUI2Node
/// Control the visibility of the barcode image in the info box.
/// Default is true
@property (nonatomic) BOOL imageVisible;
/// Configuration of the text displaying a barcode’s value in the info box when the barcode has been selected.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull titleSelected;
/// Configuration of the text displaying a barcode’s symbology in the info box when the barcode has been selected.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull subtitleSelected;
/// Configuration of the text displaying a barcode’s value in the info box when the barcode is yet to be selected.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull titleDeselected;
/// Configuration of the text displaying a barcode’s symbology in the info box when the barcode is yet to be
/// selected.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull subtitleDeselected;
/// Appearance of the barcode info box’s background when a barcode has been selected.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull backgroundSelected;
/// Appearance of the barcode info box’s background when a barcode is yet to be selected.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull backgroundDeselected;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeItemConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithImageVisible:(BOOL)imageVisible titleSelected:(SBSDKUI2StyledText * _Nonnull)titleSelected subtitleSelected:(SBSDKUI2StyledText * _Nonnull)subtitleSelected titleDeselected:(SBSDKUI2StyledText * _Nonnull)titleDeselected subtitleDeselected:(SBSDKUI2StyledText * _Nonnull)subtitleDeselected backgroundSelected:(SBSDKUI2PolygonStyle * _Nonnull)backgroundSelected backgroundDeselected:(SBSDKUI2PolygonStyle * _Nonnull)backgroundDeselected OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2ButtonConfiguration;

/// Configuration of the the mapper’s error dialog.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeItemErrorState")
@interface SBSDKUI2BarcodeItemErrorState : SBSDKUI2Node
/// Title displayed above the error message.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Error message.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull subtitle;
/// Configuration of the retry button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull retryButton;
/// Configuration of the cancel button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull cancelButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeItemErrorState * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitle:(SBSDKUI2StyledText * _Nonnull)title subtitle:(SBSDKUI2StyledText * _Nonnull)subtitle retryButton:(SBSDKUI2ButtonConfiguration * _Nonnull)retryButton cancelButton:(SBSDKUI2ButtonConfiguration * _Nonnull)cancelButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Where to display the barcode info box in the camera preview.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2BarcodeItemInfoPosition, "SBSDKUI2BarcodeItemInfoPosition", open) {
/// Don’t display any barcode info.
  SBSDKUI2BarcodeItemInfoPositionDisabled = 0,
/// Display the barcode info box in the center of the overlay polygon.
  SBSDKUI2BarcodeItemInfoPositionStacked = 1,
/// Display the barcode info box below the overlay polygon.
  SBSDKUI2BarcodeItemInfoPositionBelow = 2,
/// Display the barcode info box above the overlay polygon.
  SBSDKUI2BarcodeItemInfoPositionAbove = 3,
};

@class SBSDKUI2BarcodeMappedData;

/// Maps a barcode’s data to the data of the corresponding product.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK25SBSDKUI2BarcodeItemMapper_")
@protocol SBSDKUI2BarcodeItemMapper
/// Function that maps a barcode’s data to the data of the corresponding product.
/// \param item The barcode data to be mapped.
///
/// \param onResult Function that returns the result on the screen.
///
/// \param onError Function that returns an error on the screen in case of a timeout or other issue.
///
- (void)mapBarcodeItemWithItem:(SBSDKUI2BarcodeItem * _Nonnull)item onResult:(void (^ _Nonnull)(SBSDKUI2BarcodeMappedData * _Nonnull))onResult onError:(void (^ _Nonnull)(void))onError;
@end


/// Format of the mapped barcode data.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeMappedData")
@interface SBSDKUI2BarcodeMappedData : SBSDKUI2Node
/// Title of the barcode.
@property (nonatomic, copy) NSString * _Nonnull title;
/// Subtitle of the barcode.
@property (nonatomic, copy) NSString * _Nonnull subtitle;
/// Image of the barcode.
@property (nonatomic, copy) NSString * _Nonnull barcodeImage;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeMappedData * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle barcodeImage:(NSString * _Nonnull)barcodeImage OBJC_DESIGNATED_INITIALIZER;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBSDKUI2BarcodeMappedData (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// The string to be assigned to <code>SBSDKUI2BarcodeMappedData/barcodeImage</code> when the image of the barcode should be used in the mapped data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull barcodeImageKey;)
+ (NSString * _Nonnull)barcodeImageKey SWIFT_WARN_UNUSED_RESULT;
@end

enum SBSDKUI2BarcodesExtensionFilter : NSInteger;
enum SBSDKUI2MSIPlesseyChecksumAlgorithm : NSInteger;
enum SBSDKUI2Gs1Handling : NSInteger;

/// Configuration of the scanning behavior.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeRecognizerConfiguration")
@interface SBSDKUI2BarcodeRecognizerConfiguration : SBSDKUI2Node
/// List of accepted barcode document formats.
@property (nonatomic, copy) NSArray<SBSDKUI2BarcodeDocumentFormat *> * _Nonnull acceptedDocumentFormats;
/// Filter for extended EAN and UPC barcodes.
/// Default is NO_FILTER
@property (nonatomic) enum SBSDKUI2BarcodesExtensionFilter barcodesExtensionFilter;
/// Regular expression filter for barcode text. If the barcode text does not match the regular expression, it will
/// not be scanned. The default is an empty string (setting is turned off). This option overrides
/// <code>barcodesExtensionFilter</code> option.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull barcodesRegexFilter;
/// Optional minimum required text length of the detected barcode. The default is 0 (setting is turned off). NOTE -
/// This feature works on ITF barcodes only.
/// Default is 0
@property (nonatomic) NSInteger minimumTextLength;
/// Optional maximum text length of the detected barcode. The default is 0 (setting is turned off). NOTE - This
/// feature works on ITF barcodes only.
/// Default is 0
@property (nonatomic) NSInteger maximumTextLength;
/// Optional minimum required quiet zone on the barcode. Measured in modules (the smallest bar size on a barcode).
/// The default is 10. NOTE - This feature works on ITF barcodes only.
/// Default is 10
@property (nonatomic) NSInteger minimum1DBarcodesQuietZone;
/// If <code>true</code>, check digits for UPC, EAN and MSI Plessey codes are removed from the result. Has no effect if both
/// single and double digit MSI Plessey checksums are enabled. The default is <code>false</code>.
/// Default is false
@property (nonatomic) BOOL stripCheckDigits;
/// If <code>true</code>, the optional check digit for IATA_2_OF_5 codes is used in validation. The default is <code>true</code>.
/// Default is true
@property (nonatomic) BOOL useIATA2OF5Checksum;
/// If <code>true</code>, the optional check digit for CODE_11 codes is used in validation. The default is <code>true</code>.
/// Default is true
@property (nonatomic) BOOL useCode11Checksum;
/// List of accepted barcode symbologies.
@property (nonatomic, copy) NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull barcodeFormats;
/// Checksum algorithm used for MSI Plessey barcodes. The default value is MOD_10.
/// Default is MOD_10
@property (nonatomic) enum SBSDKUI2MSIPlesseyChecksumAlgorithm msiPlesseyChecksumAlgorithm;
/// The customer format used in AUSTRALIA_POST codes. The default value is ALPHA_NUMERIC.
/// Default is ALPHA_NUMERIC
@property (nonatomic) enum SBSDKUI2AustraliaPostCustomerFormat australiaPostCustomerFormat;
/// The expected way of handling GS1_COMPOSITE barcodes.
/// Default is PARSE
@property (nonatomic) enum SBSDKUI2Gs1Handling gs1Handling;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeRecognizerConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAcceptedDocumentFormats:(NSArray<SBSDKUI2BarcodeDocumentFormat *> * _Nonnull)acceptedDocumentFormats barcodesExtensionFilter:(enum SBSDKUI2BarcodesExtensionFilter)barcodesExtensionFilter barcodesRegexFilter:(NSString * _Nonnull)barcodesRegexFilter minimumTextLength:(NSInteger)minimumTextLength maximumTextLength:(NSInteger)maximumTextLength minimum1DBarcodesQuietZone:(NSInteger)minimum1DBarcodesQuietZone stripCheckDigits:(BOOL)stripCheckDigits useIATA2OF5Checksum:(BOOL)useIATA2OF5Checksum useCode11Checksum:(BOOL)useCode11Checksum barcodeFormats:(NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull)barcodeFormats msiPlesseyChecksumAlgorithm:(enum SBSDKUI2MSIPlesseyChecksumAlgorithm)msiPlesseyChecksumAlgorithm australiaPostCustomerFormat:(enum SBSDKUI2AustraliaPostCustomerFormat)australiaPostCustomerFormat gs1Handling:(enum SBSDKUI2Gs1Handling)gs1Handling OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2Palette;
@class SBSDKUI2BarcodeTextLocalization;
@class SBSDKUI2TopBarConfiguration;
@class SBSDKUI2ViewFinderConfiguration;
@class SBSDKUI2UserGuidanceConfiguration;
@class SBSDKUI2CameraPermissionScreen;
@class SBSDKUI2CameraConfiguration;
@class SBSDKUI2BarcodeUseCase;
@class SBSDKUI2Sound;
@class SBSDKUI2Vibration;
@class SBSDKUI2Timeouts;

/// Configuration of the barcode scanner screen.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeScannerConfiguration")
@interface SBSDKUI2BarcodeScannerConfiguration : SBSDKUI2Node
/// Version number of the configuration object.
/// Default is “1.0”
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// The configuration object should be applied for this screen.
/// Default is “BarcodeScanner”
@property (nonatomic, readonly, copy) NSString * _Nonnull screen;
/// Define the screen’s base color values from which other colors are derived.
@property (nonatomic, strong) SBSDKUI2Palette * _Nonnull palette;
/// Configuration of the all strings for barcode scanner.
@property (nonatomic, strong) SBSDKUI2BarcodeTextLocalization * _Nonnull localization;
/// Color of the screen’s background.
/// Default is “?sbColorSurfaceLow”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull backgroundColor;
/// Configuration of the top bar.
@property (nonatomic, strong) SBSDKUI2TopBarConfiguration * _Nonnull topBar;
/// Configuration of the action bar.
@property (nonatomic, strong) SBSDKUI2ActionBarConfiguration * _Nonnull actionBar;
/// Configuration of the view finder.
@property (nonatomic, strong) SBSDKUI2ViewFinderConfiguration * _Nonnull viewFinder;
/// Configuration of the text hint guiding users to move the view finder over a barcode.
@property (nonatomic, strong) SBSDKUI2UserGuidanceConfiguration * _Nonnull userGuidance;
/// Configuration of the dialog for requesting camera permissions.
@property (nonatomic, strong) SBSDKUI2CameraPermissionScreen * _Nonnull cameraPermission;
/// Configuration of the camera behavior.
@property (nonatomic, strong) SBSDKUI2CameraConfiguration * _Nonnull cameraConfiguration;
/// Configuration of the scanning behavior.
@property (nonatomic, strong) SBSDKUI2BarcodeRecognizerConfiguration * _Nonnull recognizerConfiguration;
/// Configuration of the barcode scanner screen’s behavior.
@property (nonatomic, strong) SBSDKUI2BarcodeUseCase * _Nonnull useCase;
/// Configuration of the scan confirmation sound.
@property (nonatomic, strong) SBSDKUI2Sound * _Nonnull sound;
/// Configuration of the scan scan confirmation vibration.
@property (nonatomic, strong) SBSDKUI2Vibration * _Nonnull vibration;
/// Configuration of timeouts.
@property (nonatomic, strong) SBSDKUI2Timeouts * _Nonnull timeouts;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeScannerConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVersion:(NSString * _Nonnull)version screen:(NSString * _Nonnull)screen palette:(SBSDKUI2Palette * _Nonnull)palette localization:(SBSDKUI2BarcodeTextLocalization * _Nonnull)localization backgroundColor:(SBSDKUI2Color * _Nonnull)backgroundColor topBar:(SBSDKUI2TopBarConfiguration * _Nonnull)topBar actionBar:(SBSDKUI2ActionBarConfiguration * _Nonnull)actionBar viewFinder:(SBSDKUI2ViewFinderConfiguration * _Nonnull)viewFinder userGuidance:(SBSDKUI2UserGuidanceConfiguration * _Nonnull)userGuidance cameraPermission:(SBSDKUI2CameraPermissionScreen * _Nonnull)cameraPermission cameraConfiguration:(SBSDKUI2CameraConfiguration * _Nonnull)cameraConfiguration recognizerConfiguration:(SBSDKUI2BarcodeRecognizerConfiguration * _Nonnull)recognizerConfiguration useCase:(SBSDKUI2BarcodeUseCase * _Nonnull)useCase sound:(SBSDKUI2Sound * _Nonnull)sound vibration:(SBSDKUI2Vibration * _Nonnull)vibration timeouts:(SBSDKUI2Timeouts * _Nonnull)timeouts OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBSDKUI2BarcodeScannerConfiguration (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
- (nullable instancetype)initWithJson:(NSData * _Nonnull)json;
@end


/// Results of the barcode scan.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeScannerResult")
@interface SBSDKUI2BarcodeScannerResult : NSObject
/// Recognized barcode items.
@property (nonatomic, readonly, copy) NSArray<SBSDKUI2BarcodeItem *> * _Nonnull items;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeScannerResult * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithItems:(NSArray<SBSDKUI2BarcodeItem *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// A highly customizable camera-based RTU-UI view controller to detect QR and barcodes.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKUI2BarcodeScannerViewController")
@interface SBSDKUI2BarcodeScannerViewController : UIViewController
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates a new instance of <code>SBSDKUI2BarcodeScannerViewController</code>, presents it modally and dismisses it when the user cancelled or finished the scanning.
/// In Swift language it is used with structured concurrency (async/await).
/// \param presenter The view controller the new instance should be presented on.
///
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
///
/// returns:
/// The scanning result or <code>nil</code>, if an error was thrown or the screen has been cancelled.
+ (void)presentAsyncOn:(UIViewController * _Nonnull)presenter configuration:(SBSDKUI2BarcodeScannerConfiguration * _Nonnull)configuration completionHandler:(void (^ _Nonnull)(SBSDKUI2BarcodeScannerResult * _Nullable, NSError * _Nullable))completionHandler;
/// Creates a new instance of <code>SBSDKUI2BarcodeScannerViewController</code> and presents it modally.
/// \param presenter The view controller the new instance should be presented on.
///
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param handler The handler that is being called upon completion.
///
///
/// returns:
/// A new instance of <code>SBSDKUI2BarcodeScannerViewController</code>.
+ (SBSDKUI2BarcodeScannerViewController * _Nonnull)presentOn:(UIViewController * _Nonnull)presenter configuration:(SBSDKUI2BarcodeScannerConfiguration * _Nonnull)configuration handler:(void (^ _Nonnull)(SBSDKUI2BarcodeScannerViewController * _Nonnull, BOOL, NSError * _Nullable, SBSDKUI2BarcodeScannerResult * _Nullable))handler;
/// Creates a new instance of <code>SBSDKUI2BarcodeScannerViewController</code>.
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param handler The handler that is being called upon completion.
///
///
/// returns:
/// A new instance of <code>SBSDKUI2BarcodeScannerViewController</code>.
+ (SBSDKUI2BarcodeScannerViewController * _Nonnull)createNewWithConfiguration:(SBSDKUI2BarcodeScannerConfiguration * _Nonnull)configuration handler:(void (^ _Nonnull)(SBSDKUI2BarcodeScannerViewController * _Nonnull, BOOL, NSError * _Nullable, SBSDKUI2BarcodeScannerResult * _Nullable))handler SWIFT_WARN_UNUSED_RESULT;
/// If set to <code>True</code>, the receiver automatically hides the home indicator.
/// Does not apply to devices with a Home button.
@property (nonatomic) BOOL shouldHideHomeIndicator;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarHidden;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end


/// Configuration of the all strings for barcode scanner.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeTextLocalization")
@interface SBSDKUI2BarcodeTextLocalization : SBSDKUI2Node
/// Title for the camera permission dialog.
/// Default is “Camera permission denied!”
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionEnableCameraTitle;
/// Explanation for the camera permission dialog.
/// Default is “Please allow the usage of the camera to start the scanning process.”
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionEnableCameraExplanation;
/// Button text for the camera permission dialog.
/// Default is “Grant permission”
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionEnableCameraButton;
/// Close button text for the camera permission dialog.
/// Default is “Close”
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionCloseButton;
/// Cancel button text for the top bar.
/// Default is “Cancel”
@property (nonatomic, copy) NSString * _Nonnull topBarCancelButton;
/// Title for the top bar.
/// Default is “Scan Item”
@property (nonatomic, copy) NSString * _Nonnull topBarTitle;
/// User guidance text.
/// Default is “Move the finder over a barcode”
@property (nonatomic, copy) NSString * _Nonnull userGuidance;
/// Loading message for barcode info mapping.
/// Default is “Loading details…”
@property (nonatomic, copy) NSString * _Nonnull barcodeInfoMappingLoadingMessage;
/// Title for the barcode info mapping error state.
/// Default is “Connection Error!”
@property (nonatomic, copy) NSString * _Nonnull barcodeInfoMappingErrorStateTitle;
/// Subtitle for the barcode info mapping error state.
/// Default is “There was an issue and the data requested was not fetched. You could try again or discard this
/// result to start a new scan.”
@property (nonatomic, copy) NSString * _Nonnull barcodeInfoMappingErrorStateSubtitle;
/// Retry button text for the barcode info mapping error state.
/// Default is “Retry”
@property (nonatomic, copy) NSString * _Nonnull barcodeInfoMappingErrorStateRetryButton;
/// Cancel button text for the barcode info mapping error state.
/// Default is “Cancel”
@property (nonatomic, copy) NSString * _Nonnull barcodeInfoMappingErrorStateCancelButton;
/// Title for the manual count edit dialog.
/// Default is “Update count”
@property (nonatomic, copy) NSString * _Nonnull manualCountEditDialogTitle;
/// Info for the manual count edit dialog.
/// Default is “Adjust the number of items you scanned.”
@property (nonatomic, copy) NSString * _Nonnull manualCountEditDialogInfo;
/// Update button text for the manual count edit dialog.
/// Default is “Update”
@property (nonatomic, copy) NSString * _Nonnull manualCountEditDialogUpdateButton;
/// Cancel button text for the manual count edit dialog.
/// Default is “Cancel”
@property (nonatomic, copy) NSString * _Nonnull manualCountEditDialogCancelButton;
/// Reset button text for the barcode sheet.
/// Default is “Reset”
@property (nonatomic, copy) NSString * _Nonnull sheetResetButton;
/// Clear all button text for the barcode sheet.
/// Default is “Clear all”
@property (nonatomic, copy) NSString * _Nonnull sheetClearAllButton;
/// Submit button text for the barcode sheet.
/// Default is “Submit”
@property (nonatomic, copy) NSString * _Nonnull sheetSubmitButton;
/// Start scanning button text for the barcode sheet.
/// Default is “Start scanning”
@property (nonatomic, copy) NSString * _Nonnull sheetStartScanningButton;
/// Title for the barcode sheet placeholder.
/// Default is “No barcodes here!”
@property (nonatomic, copy) NSString * _Nonnull sheetPlaceholderTitle;
/// Subtitle for the barcode sheet placeholder.
/// Default is “The barcode list is currently empty. Close this sheet and scan your items to add them.”
@property (nonatomic, copy) NSString * _Nonnull sheetPlaceholderSubtitle;
/// Cancel button text for the single mode confirmation dialog.
/// Default is “Close”
@property (nonatomic, copy) NSString * _Nonnull singleModeConfirmationCancelButton;
/// Title for the multiple mode barcode sheet.
/// Default is “%d items”
@property (nonatomic, copy) NSString * _Nonnull multipleModeSheetTitle;
/// Title for the find and pick barcode sheet.
/// Default is “%d/%d scanned”
@property (nonatomic, copy) NSString * _Nonnull findAndPickSheetTitle;
/// Subtitle for the find and pick barcode sheet.
/// Default is “%d/%d added”
@property (nonatomic, copy) NSString * _Nonnull findAndPickSheetBarcodeItemSubtitle;
/// Title for the find and pick partial alert.
/// Default is “Incomplete scan!”
@property (nonatomic, copy) NSString * _Nonnull findAndPickPartialAlertTitle;
/// Subtitle for the find and pick partial alert.
/// Default is “Some codes are yet to be scanned. Proceed with submission anyway?”
@property (nonatomic, copy) NSString * _Nonnull findAndPickPartialAlertSubtitle;
/// Cancel button text for the find and pick partial alert.
/// Default is “Cancel”
@property (nonatomic, copy) NSString * _Nonnull findAndPickPartialAlertCancelButton;
/// Submit button text for the find and pick partial alert.
/// Default is “Yes, Submit”
@property (nonatomic, copy) NSString * _Nonnull findAndPickPartialAlertSubmitButton;
/// Title for the find and pick complete alert.
/// Default is “All codes found!”
@property (nonatomic, copy) NSString * _Nonnull findAndPickCompleteAlertTitle;
/// Subtitle for the find and pick complete alert.
/// Default is “You have successfully scanned all codes. Proceed with submission?”
@property (nonatomic, copy) NSString * _Nonnull findAndPickCompleteAlertSubtitle;
/// Cancel button text for the find and pick complete alert.
/// Default is “Dismiss”
@property (nonatomic, copy) NSString * _Nonnull findAndPickCompleteAlertCancelButton;
/// Submit button text for the find and pick complete alert.
/// Default is “Submit”
@property (nonatomic, copy) NSString * _Nonnull findAndPickCompleteAlertSubmitButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeTextLocalization * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCameraPermissionEnableCameraTitle:(NSString * _Nonnull)cameraPermissionEnableCameraTitle cameraPermissionEnableCameraExplanation:(NSString * _Nonnull)cameraPermissionEnableCameraExplanation cameraPermissionEnableCameraButton:(NSString * _Nonnull)cameraPermissionEnableCameraButton cameraPermissionCloseButton:(NSString * _Nonnull)cameraPermissionCloseButton topBarCancelButton:(NSString * _Nonnull)topBarCancelButton topBarTitle:(NSString * _Nonnull)topBarTitle userGuidance:(NSString * _Nonnull)userGuidance barcodeInfoMappingLoadingMessage:(NSString * _Nonnull)barcodeInfoMappingLoadingMessage barcodeInfoMappingErrorStateTitle:(NSString * _Nonnull)barcodeInfoMappingErrorStateTitle barcodeInfoMappingErrorStateSubtitle:(NSString * _Nonnull)barcodeInfoMappingErrorStateSubtitle barcodeInfoMappingErrorStateRetryButton:(NSString * _Nonnull)barcodeInfoMappingErrorStateRetryButton barcodeInfoMappingErrorStateCancelButton:(NSString * _Nonnull)barcodeInfoMappingErrorStateCancelButton manualCountEditDialogTitle:(NSString * _Nonnull)manualCountEditDialogTitle manualCountEditDialogInfo:(NSString * _Nonnull)manualCountEditDialogInfo manualCountEditDialogUpdateButton:(NSString * _Nonnull)manualCountEditDialogUpdateButton manualCountEditDialogCancelButton:(NSString * _Nonnull)manualCountEditDialogCancelButton sheetResetButton:(NSString * _Nonnull)sheetResetButton sheetClearAllButton:(NSString * _Nonnull)sheetClearAllButton sheetSubmitButton:(NSString * _Nonnull)sheetSubmitButton sheetStartScanningButton:(NSString * _Nonnull)sheetStartScanningButton sheetPlaceholderTitle:(NSString * _Nonnull)sheetPlaceholderTitle sheetPlaceholderSubtitle:(NSString * _Nonnull)sheetPlaceholderSubtitle singleModeConfirmationCancelButton:(NSString * _Nonnull)singleModeConfirmationCancelButton multipleModeSheetTitle:(NSString * _Nonnull)multipleModeSheetTitle findAndPickSheetTitle:(NSString * _Nonnull)findAndPickSheetTitle findAndPickSheetBarcodeItemSubtitle:(NSString * _Nonnull)findAndPickSheetBarcodeItemSubtitle findAndPickPartialAlertTitle:(NSString * _Nonnull)findAndPickPartialAlertTitle findAndPickPartialAlertSubtitle:(NSString * _Nonnull)findAndPickPartialAlertSubtitle findAndPickPartialAlertCancelButton:(NSString * _Nonnull)findAndPickPartialAlertCancelButton findAndPickPartialAlertSubmitButton:(NSString * _Nonnull)findAndPickPartialAlertSubmitButton findAndPickCompleteAlertTitle:(NSString * _Nonnull)findAndPickCompleteAlertTitle findAndPickCompleteAlertSubtitle:(NSString * _Nonnull)findAndPickCompleteAlertSubtitle findAndPickCompleteAlertCancelButton:(NSString * _Nonnull)findAndPickCompleteAlertCancelButton findAndPickCompleteAlertSubmitButton:(NSString * _Nonnull)findAndPickCompleteAlertSubmitButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


@class SBSDKUI2SingleScanningMode;
@class SBSDKUI2MultipleScanningMode;
@class SBSDKUI2FindAndPickScanningMode;

/// Configuration of the barcode scanner screen’s behavior.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeUseCase")
@interface SBSDKUI2BarcodeUseCase : SBSDKUI2Node
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeUseCase * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
+ (SBSDKUI2SingleScanningMode * _Nonnull)singleScanningMode SWIFT_WARN_UNUSED_RESULT;
+ (SBSDKUI2MultipleScanningMode * _Nonnull)multipleScanningMode SWIFT_WARN_UNUSED_RESULT;
+ (SBSDKUI2FindAndPickScanningMode * _Nonnull)findAndPickScanningMode SWIFT_WARN_UNUSED_RESULT;
@end

/// Filter for extended EAN and UPC barcodes.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2BarcodesExtensionFilter, "SBSDKUI2BarcodesExtensionFilter", open) {
/// EAN and UPC codes are not filtered. Both are returned regardless if they have an extension or not.
  SBSDKUI2BarcodesExtensionFilterNoFilter = 0,
/// Only EAN and UPC codes with extensions are returned.
  SBSDKUI2BarcodesExtensionFilterOnlyWithExtensions = 1,
/// Only EAN and UPC codes without extensions are returned.
  SBSDKUI2BarcodesExtensionFilterOnlyWithoutExtensions = 2,
};

@class SBSDKUI2ForegroundStyle;

/// Button configuration.
SWIFT_CLASS_NAMED("SBSDKUI2ButtonConfiguration")
@interface SBSDKUI2ButtonConfiguration : SBSDKUI2Node
/// Whether the button is visible or not.
/// Default is true
@property (nonatomic) BOOL visible;
/// The text to be displayed on the button.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull text;
/// The text to be read when button is selected through accessibility mode.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull accessibilityDescription;
/// The style of the button’s background.
@property (nonatomic, strong) SBSDKUI2BackgroundStyle * _Nonnull background;
/// The style of the button’s foreground (icon, text).
@property (nonatomic, strong) SBSDKUI2ForegroundStyle * _Nonnull foreground;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ButtonConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible text:(NSString * _Nonnull)text accessibilityDescription:(NSString * _Nonnull)accessibilityDescription background:(SBSDKUI2BackgroundStyle * _Nonnull)background foreground:(SBSDKUI2ForegroundStyle * _Nonnull)foreground OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



enum SBSDKUI2CameraModule : NSInteger;
enum SBSDKUI2OrientationLockMode : NSInteger;
enum SBSDKUI2CameraPreviewMode : NSInteger;

/// Configuration of the camera settings to be used while scanning.
SWIFT_CLASS_NAMED("SBSDKUI2CameraConfiguration")
@interface SBSDKUI2CameraConfiguration : SBSDKUI2Node
/// Which camera module to use on start-up.
/// Default is BACK
@property (nonatomic) enum SBSDKUI2CameraModule cameraModule;
/// The number of zoom steps available to the user.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull zoomSteps;
/// The default zoom factor on start-up.
/// Default is 1.0
@property (nonatomic) double defaultZoomFactor;
/// Whether the flash is enabled by default.
/// Default is false
@property (nonatomic) BOOL flashEnabled;
/// Whether to lock the focus on the minimum possible distance (device-specific).
/// Default is false
@property (nonatomic) BOOL minFocusDistanceLock;
/// Whether pinch-to-zoom is enabled.
/// Default is true
@property (nonatomic) BOOL pinchToZoomEnabled;
/// Which mode to use when orientation should be locked to landscape or portrait.
/// Default is NONE
@property (nonatomic) enum SBSDKUI2OrientationLockMode orientationLockMode;
/// Which camera preview mode to use.
/// Default is FILL_IN
@property (nonatomic) enum SBSDKUI2CameraPreviewMode cameraPreviewMode;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2CameraConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCameraModule:(enum SBSDKUI2CameraModule)cameraModule zoomSteps:(NSArray<NSNumber *> * _Nonnull)zoomSteps defaultZoomFactor:(double)defaultZoomFactor flashEnabled:(BOOL)flashEnabled minFocusDistanceLock:(BOOL)minFocusDistanceLock pinchToZoomEnabled:(BOOL)pinchToZoomEnabled orientationLockMode:(enum SBSDKUI2OrientationLockMode)orientationLockMode cameraPreviewMode:(enum SBSDKUI2CameraPreviewMode)cameraPreviewMode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Determine which camera module to use on start-up.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2CameraModule, "SBSDKUI2CameraModule", open) {
/// Use the front camera.
  SBSDKUI2CameraModuleFront = 0,
/// Use the default back camera.
  SBSDKUI2CameraModuleBack = 1,
/// Use the back camera with the widest available angle.
  SBSDKUI2CameraModuleBackWidest = 2,
};

enum SBSDKUI2StatusBarMode : NSInteger;

/// Configuration of the camera permission request view.
SWIFT_CLASS_NAMED("SBSDKUI2CameraPermissionScreen")
@interface SBSDKUI2CameraPermissionScreen : SBSDKUI2Node
/// Visual mode for displaying the contents of the status bar.
/// Default is DARK
@property (nonatomic) enum SBSDKUI2StatusBarMode statusBarMode;
/// Background color of the camera permission request.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull background;
/// Background color of the icon used in the camera permission request.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull iconBackground;
/// Configuration of the icon used in the camera permission request.
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull icon;
/// Configuration of the camera permission request’s confirmation button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull enableCameraButton;
/// Configuration of the camera permission request’s close button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull closeButton;
/// Configuration of the camera permission request’s title.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull enableCameraTitle;
/// Configuration of the camera permission request’s explanatory text.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull enableCameraExplanation;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2CameraPermissionScreen * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStatusBarMode:(enum SBSDKUI2StatusBarMode)statusBarMode background:(SBSDKUI2Color * _Nonnull)background iconBackground:(SBSDKUI2Color * _Nonnull)iconBackground icon:(SBSDKUI2IconStyle * _Nonnull)icon enableCameraButton:(SBSDKUI2ButtonConfiguration * _Nonnull)enableCameraButton closeButton:(SBSDKUI2ButtonConfiguration * _Nonnull)closeButton enableCameraTitle:(SBSDKUI2StyledText * _Nonnull)enableCameraTitle enableCameraExplanation:(SBSDKUI2StyledText * _Nonnull)enableCameraExplanation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Configuration of the camera preview mode.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2CameraPreviewMode, "SBSDKUI2CameraPreviewMode", open) {
/// In this mode, the camera preview frames will be scaled to the layout view size - the full preview frame content
/// will be visible, but unused edges might appear in the preview layout.
  SBSDKUI2CameraPreviewModeFitIn = 0,
/// In this mode, the camera preview frames fill the layout view - the preview frames may contain additional content
/// on the edges that was not visible in the preview layout.
  SBSDKUI2CameraPreviewModeFillIn = 1,
};

/// Configuration of the barcodes result sheet’s height while collapsed.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2CollapsedVisibleHeight, "SBSDKUI2CollapsedVisibleHeight", open) {
/// Result sheet is collapsed as much as possible, showing only the top part.
  SBSDKUI2CollapsedVisibleHeightSmall = 0,
/// Result sheet is not completely collapsed, revealing more information.
  SBSDKUI2CollapsedVisibleHeightLarge = 1,
};


SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK13SBSDKUI2Color")
@interface SBSDKUI2Color : SBSDKUI2Node
/// The <code>UIColor</code> for the given reference or hex string.
@property (nonatomic, readonly, strong) UIColor * _Nonnull uiColor;
/// Convenient initializer.
/// \param colorString The hex string in ARGB/RGB format.
///
- (nonnull instancetype)initWithColorString:(NSString * _Nonnull)colorString;
/// Convenient initializer.
/// \param uiColor An instance of the <code>UIColor</code>.
///
- (nonnull instancetype)initWithUiColor:(UIColor * _Nonnull)uiColor;
/// Convenient initializer.
/// \param colorString The hex string in RGBA /ARGB/RGB format.
///
/// \param isArgb If the hex string is in RGBA format.
///
- (nonnull instancetype)initWithColorString:(NSString * _Nonnull)colorString isArgb:(BOOL)isArgb;
/// Returns the HEX color format.
- (NSString * _Nonnull)toHexString SWIFT_WARN_UNUSED_RESULT;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Configuration of the barcode to find and scan.
SWIFT_CLASS_NAMED("SBSDKUI2ExpectedBarcode")
@interface SBSDKUI2ExpectedBarcode : SBSDKUI2Node
/// Value of the barcode to find. If not set, any barcode value will be accepted.
@property (nonatomic, copy) NSString * _Nonnull barcodeValue;
/// Title of the barcode to find.
@property (nonatomic, copy) NSString * _Nullable title;
/// Image of the barcode to find.
@property (nonatomic, copy) NSString * _Nullable image;
/// Number of barcodes with given symbology/value required to scan.
/// Default is 1
@property (nonatomic) NSInteger count;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ExpectedBarcode * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBarcodeValue:(NSString * _Nonnull)barcodeValue title:(NSString * _Nullable)title image:(NSString * _Nullable)image count:(NSInteger)count OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBarcodeValue:(NSString * _Nonnull)barcodeValue title:(NSString * _Nullable)title image:(NSString * _Nullable)image;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBSDKUI2ExpectedBarcode (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// The string to be assigned to <code>SBSDKUI2ExpectedBarcode/image</code> when the image of the barcode should be used in the UI.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull barcodeImageKey;)
+ (NSString * _Nonnull)barcodeImageKey SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the overlay polygon displayed on top of a barcode in the camera preview.
SWIFT_CLASS_NAMED("SBSDKUI2FindAndPickArOverlayPolygonConfiguration")
@interface SBSDKUI2FindAndPickArOverlayPolygonConfiguration : SBSDKUI2Node
/// Control the visibility of the overlay polygon.
/// Default is true
@property (nonatomic) BOOL visible;
/// Appearance of the overlay polygon when a barcode is partially scanned.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull partiallyScanned;
/// Appearance of the overlay polygon when a barcode is rejected.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull rejected;
/// Appearance of the overlay polygon when a barcode is completed.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull completed;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FindAndPickArOverlayPolygonConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible partiallyScanned:(SBSDKUI2PolygonStyle * _Nonnull)partiallyScanned rejected:(SBSDKUI2PolygonStyle * _Nonnull)rejected completed:(SBSDKUI2PolygonStyle * _Nonnull)completed OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the round badge on find and pick ar layer.
SWIFT_CLASS_NAMED("SBSDKUI2FindAndPickBadgeConfiguration")
@interface SBSDKUI2FindAndPickBadgeConfiguration : SBSDKUI2Node
/// Appearance of the badge when a barcode is partially scanned.
@property (nonatomic, strong) SBSDKUI2BadgeStyle * _Nonnull partiallyScanned;
/// Appearance of the badge when a barcode is rejected.
@property (nonatomic, strong) SBSDKUI2BadgeStyle * _Nonnull rejected;
/// Appearance of the badge when a barcode is completed.
@property (nonatomic, strong) SBSDKUI2BadgeStyle * _Nonnull completed;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FindAndPickBadgeConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithPartiallyScanned:(SBSDKUI2BadgeStyle * _Nonnull)partiallyScanned rejected:(SBSDKUI2BadgeStyle * _Nonnull)rejected completed:(SBSDKUI2BadgeStyle * _Nonnull)completed OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2Sheet;
@class SBSDKUI2SheetContent;
@class SBSDKUI2ManualCountEditDialog;
@class SBSDKUI2ScanbotAlertDialog;

/// Configuration of the Find and Pick barcode scanning mode.
SWIFT_CLASS_NAMED("SBSDKUI2FindAndPickScanningMode")
@interface SBSDKUI2FindAndPickScanningMode : SBSDKUI2BarcodeUseCase
/// Color of the selected barcode.
/// Default is “?sbColorPositive”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull scanningCompletedColor;
/// Color of the partially scanned barcode.
/// Default is “?sbColorWarning”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull scanningPartiallyColor;
/// Color of the not scanned barcode .
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull scanningNotScannedColor;
/// If the user is allowed to finish the scanning process without scanning all the expected barcodes.
/// Default is false
@property (nonatomic) BOOL allowPartialScan;
/// List of barcodes that the user has to find and scan.
@property (nonatomic, copy) NSArray<SBSDKUI2ExpectedBarcode *> * _Nonnull expectedBarcodes;
/// Time interval in milliseconds before a barcode is counted again. 0 = no delay. The default value is 1000.
/// Default is 1000
@property (nonatomic) NSInteger countingRepeatDelay;
/// Configuration of the preview mode for the barcodes required to be found and scanned.
@property (nonatomic, strong) SBSDKUI2Sheet * _Nonnull sheet;
/// Configuration of the list of barcodes required to be found and scanned.
@property (nonatomic, strong) SBSDKUI2SheetContent * _Nonnull sheetContent;
/// Configuration of the dialog to manually edit the barcode count.
@property (nonatomic, strong) SBSDKUI2ManualCountEditDialog * _Nonnull manualCountEditDialog;
/// Configuration of the AR overlay.
@property (nonatomic, strong) SBSDKUI2ArOverlayFindAndPickConfiguration * _Nonnull arOverlay;
/// If the partial scanned alert dialog is enabled.
/// Default is true
@property (nonatomic) BOOL partialScannedAlertDialogEnabled;
/// Configuration of the partial scanned alert dialog.
@property (nonatomic, strong) SBSDKUI2ScanbotAlertDialog * _Nonnull partialScannedAlertDialog;
/// If the confirmation alert dialog is enabled.
/// Default is false
@property (nonatomic) BOOL confirmationAlertDialogEnabled;
/// Configuration of the confirmation alert dialog.
@property (nonatomic, strong) SBSDKUI2ScanbotAlertDialog * _Nonnull confirmationAlertDialog;
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FindAndPickScanningMode * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithScanningCompletedColor:(SBSDKUI2Color * _Nonnull)scanningCompletedColor scanningPartiallyColor:(SBSDKUI2Color * _Nonnull)scanningPartiallyColor scanningNotScannedColor:(SBSDKUI2Color * _Nonnull)scanningNotScannedColor allowPartialScan:(BOOL)allowPartialScan expectedBarcodes:(NSArray<SBSDKUI2ExpectedBarcode *> * _Nonnull)expectedBarcodes countingRepeatDelay:(NSInteger)countingRepeatDelay sheet:(SBSDKUI2Sheet * _Nonnull)sheet sheetContent:(SBSDKUI2SheetContent * _Nonnull)sheetContent manualCountEditDialog:(SBSDKUI2ManualCountEditDialog * _Nonnull)manualCountEditDialog arOverlay:(SBSDKUI2ArOverlayFindAndPickConfiguration * _Nonnull)arOverlay partialScannedAlertDialogEnabled:(BOOL)partialScannedAlertDialogEnabled partialScannedAlertDialog:(SBSDKUI2ScanbotAlertDialog * _Nonnull)partialScannedAlertDialog confirmationAlertDialogEnabled:(BOOL)confirmationAlertDialogEnabled confirmationAlertDialog:(SBSDKUI2ScanbotAlertDialog * _Nonnull)confirmationAlertDialog OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2FinderCorneredStyle;
@class SBSDKUI2FinderStrokedStyle;

/// Visual appearance of the viewfinder.
SWIFT_CLASS_NAMED("SBSDKUI2FinderStyle")
@interface SBSDKUI2FinderStyle : SBSDKUI2Node
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FinderStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
+ (SBSDKUI2FinderCorneredStyle * _Nonnull)finderCorneredStyle SWIFT_WARN_UNUSED_RESULT;
+ (SBSDKUI2FinderStrokedStyle * _Nonnull)finderStrokedStyle SWIFT_WARN_UNUSED_RESULT;
@end


/// Variant of the viewfinder displaying only the four corners of the scanning area as user guidance.
SWIFT_CLASS_NAMED("SBSDKUI2FinderCorneredStyle")
@interface SBSDKUI2FinderCorneredStyle : SBSDKUI2FinderStyle
/// Color of the viewfinder corner’s outlines.
/// Default is “#FFFFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull strokeColor;
/// Width of the viewfinder corner’s outlines.
/// Default is 3.0
@property (nonatomic) double strokeWidth;
/// Radius of the viewfinder’s corners.
/// Default is 10.0
@property (nonatomic) double cornerRadius;
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FinderCorneredStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStrokeColor:(SBSDKUI2Color * _Nonnull)strokeColor strokeWidth:(double)strokeWidth cornerRadius:(double)cornerRadius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Variant of the viewfinder displaying a full outline of the scanning area as user guidance.
SWIFT_CLASS_NAMED("SBSDKUI2FinderStrokedStyle")
@interface SBSDKUI2FinderStrokedStyle : SBSDKUI2FinderStyle
/// Color of the viewfinder’s outline.
/// Default is “#FFFFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull strokeColor;
/// Width of the viewfinder’s outline.
/// Default is 3.0
@property (nonatomic) double strokeWidth;
/// The viewfinder’s corner radius.
/// Default is 10.0
@property (nonatomic) double cornerRadius;
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FinderStrokedStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStrokeColor:(SBSDKUI2Color * _Nonnull)strokeColor strokeWidth:(double)strokeWidth cornerRadius:(double)cornerRadius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end





/// Configuration of the appearance of foreground elements (e.g. text and/or icons on buttons, etc).
SWIFT_CLASS_NAMED("SBSDKUI2ForegroundStyle")
@interface SBSDKUI2ForegroundStyle : SBSDKUI2Node
/// Whether the icon is visible.
/// Default is true
@property (nonatomic) BOOL iconVisible;
/// Color used for foreground elements.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull color;
/// Whether to use drop shadows for foreground elements.
/// Default is false
@property (nonatomic) BOOL useShadow;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ForegroundStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithIconVisible:(BOOL)iconVisible color:(SBSDKUI2Color * _Nonnull)color useShadow:(BOOL)useShadow OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// GS1_COMPOSITE barcode type handling
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2Gs1Handling, "SBSDKUI2Gs1Handling", open) {
/// The (FNC1) character is simply stripped from the result in barcodes that implement this mode. Do not use. Will
/// be removed in a future release.
  SBSDKUI2Gs1HandlingNone = 0,
/// GS1 messages are converted to the machine-readable format per the GS1 spec (the special FNC1 character is
/// converted to ASCII \x1D). The implied 01 AI key is prepended to DataBar results. No validation is performed.
  SBSDKUI2Gs1HandlingParse = 1,
/// Same as PARSE. Additionally, messages containing unknown AI keys, or containing values of incorrect format for
/// known keys, are not returned.
  SBSDKUI2Gs1HandlingValidateStructure = 2,
/// Same as VALIDATE_STRUCTURE, except that GS1 strings are converted to the human-readable format, instead (with
/// parentheses used to wrap AI keys, e.g. (01)123456789). The \x1D character is never used in this representation.
  SBSDKUI2Gs1HandlingDecodeStructure = 3,
/// Full validation including linting and checksums. This is the most strict mode.
  SBSDKUI2Gs1HandlingValidateFull = 4,
/// Same as DECODE_STRUCTURE, but with full validation.
  SBSDKUI2Gs1HandlingDecodeFull = 5,
};


/// Configuration of the icon appearance.
SWIFT_CLASS_NAMED("SBSDKUI2IconButton")
@interface SBSDKUI2IconButton : SBSDKUI2Node
/// Whether the icon is visible on the button.
/// Default is true
@property (nonatomic) BOOL visible;
/// Icon color.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull color;
/// The text to be read when button is selected through accessibility mode.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull accessibilityDescription;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2IconButton * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible color:(SBSDKUI2Color * _Nonnull)color accessibilityDescription:(NSString * _Nonnull)accessibilityDescription OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Configuration of the icon appearance.
SWIFT_CLASS_NAMED("SBSDKUI2IconStyle")
@interface SBSDKUI2IconStyle : SBSDKUI2Node
/// Whether the icon is visible on the button.
/// Default is true
@property (nonatomic) BOOL visible;
/// Icon color.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull color;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2IconStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible color:(SBSDKUI2Color * _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the hint guiding users through the scanning process.
SWIFT_CLASS_NAMED("SBSDKUI2IconUserGuidanceConfiguration")
@interface SBSDKUI2IconUserGuidanceConfiguration : SBSDKUI2Node
/// Whether the user guidance is visible.
/// Default is true
@property (nonatomic) BOOL visible;
/// Icon of the user guidance.
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull icon;
/// Title of the user guidance.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Background style used for the user guidance.
@property (nonatomic, strong) SBSDKUI2BackgroundStyle * _Nonnull background;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2IconUserGuidanceConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible icon:(SBSDKUI2IconStyle * _Nonnull)icon title:(SBSDKUI2StyledText * _Nonnull)title background:(SBSDKUI2BackgroundStyle * _Nonnull)background OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Type of MSI plessey checksum algorithm used.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2MSIPlesseyChecksumAlgorithm, "SBSDKUI2MSIPlesseyChecksumAlgorithm", open) {
/// No checksum algorithm used.
  SBSDKUI2MSIPlesseyChecksumAlgorithmNone = 0,
/// Mod10 checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod10 = 1,
/// Mod11IBM checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod11Ibm = 2,
/// Mod11NCR checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod11Ncr = 3,
/// Mod1010 checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod1010 = 4,
/// Mod1110IBM checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod1110Ibm = 5,
/// Mod1110NCR checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod1110Ncr = 6,
};


/// Configuration of the dialog to manually edit the barcode count.
SWIFT_CLASS_NAMED("SBSDKUI2ManualCountEditDialog")
@interface SBSDKUI2ManualCountEditDialog : SBSDKUI2Node
/// Color of the edit dialog’s background.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sheetColor;
/// Color of the divider and separator lines in the edit dialog.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull dividerColor;
/// Background color of the overlay surrounding the edit dialog.
/// Default is “?sbColorModalOverlay”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull modalOverlayColor;
/// Configuration of the edit dialog’s title.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Configuration of the edit dialog’s info text.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull info;
/// Configuration of the edit dialog’s confirm button. Hiding both the update and cancel buttons simultaneously is
/// an undefined behavior.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull updateButton;
/// Configuration of the edit dialog’s cancel button. Hiding both the update and cancel buttons simultaneously is an
/// undefined behavior.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull cancelButton;
/// Configuration of the edit dialog’s button to clear the entered count number.
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull clearTextButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ManualCountEditDialog * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSheetColor:(SBSDKUI2Color * _Nonnull)sheetColor dividerColor:(SBSDKUI2Color * _Nonnull)dividerColor modalOverlayColor:(SBSDKUI2Color * _Nonnull)modalOverlayColor title:(SBSDKUI2StyledText * _Nonnull)title info:(SBSDKUI2StyledText * _Nonnull)info updateButton:(SBSDKUI2ButtonConfiguration * _Nonnull)updateButton cancelButton:(SBSDKUI2ButtonConfiguration * _Nonnull)cancelButton clearTextButton:(SBSDKUI2IconStyle * _Nonnull)clearTextButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Configuration of the mode used for scanning multiple barcodes.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2MultipleBarcodesScanningMode, "SBSDKUI2MultipleBarcodesScanningMode", open) {
/// Scan barcodes even if they have the same value and count the number of repeated barcodes.
  SBSDKUI2MultipleBarcodesScanningModeCounting = 0,
/// Only scan barcodes with unique values. Subsequent barcodes with the same values will be ignored.
  SBSDKUI2MultipleBarcodesScanningModeUnique = 1,
};


/// Configuration of the mode for scanning multiple barcodes.
SWIFT_CLASS_NAMED("SBSDKUI2MultipleScanningMode")
@interface SBSDKUI2MultipleScanningMode : SBSDKUI2BarcodeUseCase
/// Time interval in milliseconds before a barcode is counted again. 0 = no delay. The default value is 1000.
/// Default is 1000
@property (nonatomic) NSInteger countingRepeatDelay;
/// Mode used for scanning multiple barcodes.
/// Default is COUNTING
@property (nonatomic) enum SBSDKUI2MultipleBarcodesScanningMode mode;
/// Configuration of the preview mode for scanning multiple barcodes.
@property (nonatomic, strong) SBSDKUI2Sheet * _Nonnull sheet;
/// Configuration of the list containing the barcodes that have already been scanned.
@property (nonatomic, strong) SBSDKUI2SheetContent * _Nonnull sheetContent;
/// Configuration of the dialog to manually edit the barcode count.
@property (nonatomic, strong) SBSDKUI2ManualCountEditDialog * _Nonnull manualCountEditDialog;
/// Appearance of the barcode info mapping.
@property (nonatomic, strong) SBSDKUI2BarcodeInfoMapping * _Nonnull barcodeInfoMapping;
/// Configuration of the AR overlay.
@property (nonatomic, strong) SBSDKUI2ArOverlayGeneralConfiguration * _Nonnull arOverlay;
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2MultipleScanningMode * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCountingRepeatDelay:(NSInteger)countingRepeatDelay mode:(enum SBSDKUI2MultipleBarcodesScanningMode)mode sheet:(SBSDKUI2Sheet * _Nonnull)sheet sheetContent:(SBSDKUI2SheetContent * _Nonnull)sheetContent manualCountEditDialog:(SBSDKUI2ManualCountEditDialog * _Nonnull)manualCountEditDialog barcodeInfoMapping:(SBSDKUI2BarcodeInfoMapping * _Nonnull)barcodeInfoMapping arOverlay:(SBSDKUI2ArOverlayGeneralConfiguration * _Nonnull)arOverlay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configure the orientation of the interface.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2OrientationLockMode, "SBSDKUI2OrientationLockMode", open) {
/// Do not restrict the interface’s orientation.
  SBSDKUI2OrientationLockModeNone = 0,
/// Lock the orientation to portrait.
  SBSDKUI2OrientationLockModePortrait = 1,
/// Lock the orientation to landscape.
  SBSDKUI2OrientationLockModeLandscape = 2,
};


/// Value palette describing the colors of the scanner screens.
SWIFT_CLASS_NAMED("SBSDKUI2Palette")
@interface SBSDKUI2Palette : SBSDKUI2Node
/// Primary color used for enabled elements.
/// Default is “#C8193C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorPrimary;
/// Primary color used for disabled elements.
/// Default is “#F5F5F5”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorPrimaryDisabled;
/// Color used to convey a negative meaning.
/// Default is “#FF3737”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorNegative;
/// Color used to convey a positive meaning.
/// Default is “#4EFFB4”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorPositive;
/// Color used to convey warnings.
/// Default is “#FFCE5C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorWarning;
/// Secondary color used for enabled elements.
/// Default is “#FFEDEE”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorSecondary;
/// Secondary color used for disabled elements.
/// Default is “#F5F5F5”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorSecondaryDisabled;
/// Color used for displaying elements on top of the primary color.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorOnPrimary;
/// Color used for displaying elements on top of the secondary color.
/// Default is “#C8193C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorOnSecondary;
/// Color used for surfaces.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorSurface;
/// Color used for outlines.
/// Default is “#EFEFEF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorOutline;
/// Alternative color used on top of surfaces.
/// Default is “#707070”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorOnSurfaceVariant;
/// Color used on top of surfaces.
/// Default is “#000000”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorOnSurface;
/// Transparent color with a low alpha value used for certain surfaces.
/// Default is “#00000026”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorSurfaceLow;
/// Transparent color with a high alpha value used for certain surfaces.
/// Default is “#0000007A”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorSurfaceHigh;
/// Transparent color with a very high alpha value used to fill certain overlays.
/// Default is “#000000A3”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorModalOverlay;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2Palette * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSbColorPrimary:(SBSDKUI2Color * _Nonnull)sbColorPrimary sbColorPrimaryDisabled:(SBSDKUI2Color * _Nonnull)sbColorPrimaryDisabled sbColorNegative:(SBSDKUI2Color * _Nonnull)sbColorNegative sbColorPositive:(SBSDKUI2Color * _Nonnull)sbColorPositive sbColorWarning:(SBSDKUI2Color * _Nonnull)sbColorWarning sbColorSecondary:(SBSDKUI2Color * _Nonnull)sbColorSecondary sbColorSecondaryDisabled:(SBSDKUI2Color * _Nonnull)sbColorSecondaryDisabled sbColorOnPrimary:(SBSDKUI2Color * _Nonnull)sbColorOnPrimary sbColorOnSecondary:(SBSDKUI2Color * _Nonnull)sbColorOnSecondary sbColorSurface:(SBSDKUI2Color * _Nonnull)sbColorSurface sbColorOutline:(SBSDKUI2Color * _Nonnull)sbColorOutline sbColorOnSurfaceVariant:(SBSDKUI2Color * _Nonnull)sbColorOnSurfaceVariant sbColorOnSurface:(SBSDKUI2Color * _Nonnull)sbColorOnSurface sbColorSurfaceLow:(SBSDKUI2Color * _Nonnull)sbColorSurfaceLow sbColorSurfaceHigh:(SBSDKUI2Color * _Nonnull)sbColorSurfaceHigh sbColorModalOverlay:(SBSDKUI2Color * _Nonnull)sbColorModalOverlay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the polygon appearance.
SWIFT_CLASS_NAMED("SBSDKUI2PolygonStyle")
@interface SBSDKUI2PolygonStyle : SBSDKUI2Node
/// Color of the polygon outline.
/// Default is “#FFFFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull strokeColor;
/// Polygon color.
/// Default is “#FFFFFF30”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull fillColor;
/// Width of the polygon outline in dp.
/// Default is 2.0
@property (nonatomic) double strokeWidth;
/// Polygon corner radius in dp.
/// Default is 0.0
@property (nonatomic) double cornerRadius;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2PolygonStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStrokeColor:(SBSDKUI2Color * _Nonnull)strokeColor fillColor:(SBSDKUI2Color * _Nonnull)fillColor strokeWidth:(double)strokeWidth cornerRadius:(double)cornerRadius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end




/// Button configuration.
SWIFT_CLASS_NAMED("SBSDKUI2PopupMenuItem")
@interface SBSDKUI2PopupMenuItem : SBSDKUI2Node
/// The text to be displayed on the button.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// The text to be read when button is selected through accessibility mode.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull accessibilityDescription;
/// The style of the button’s icon (icon, text).
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull icon;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2PopupMenuItem * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitle:(SBSDKUI2StyledText * _Nonnull)title accessibilityDescription:(NSString * _Nonnull)accessibilityDescription icon:(SBSDKUI2IconStyle * _Nonnull)icon OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Configuration of the round button.
SWIFT_CLASS_NAMED("SBSDKUI2RoundButton")
@interface SBSDKUI2RoundButton : SBSDKUI2Node
/// Whether to display the button.
/// Default is true
@property (nonatomic) BOOL visible;
/// The text to be read when button is selected through accessibility mode.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull accessibilityDescription;
/// Color of the button background shape.
/// Default is “#0000007A”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull backgroundColor;
/// Color of the button foreground (icon, text).
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull foregroundColor;
/// Color of the button background shape when the button is active (selected, toggled).
/// Default is “#FFCE5C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull activeBackgroundColor;
/// Color of the button foreground (icon, text) when the button is active (selected, toggled).
/// Default is “#1C1B1F”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull activeForegroundColor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2RoundButton * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible accessibilityDescription:(NSString * _Nonnull)accessibilityDescription backgroundColor:(SBSDKUI2Color * _Nonnull)backgroundColor foregroundColor:(SBSDKUI2Color * _Nonnull)foregroundColor activeBackgroundColor:(SBSDKUI2Color * _Nonnull)activeBackgroundColor activeForegroundColor:(SBSDKUI2Color * _Nonnull)activeForegroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Configuration of the the standard alert dialog.
SWIFT_CLASS_NAMED("SBSDKUI2ScanbotAlertDialog")
@interface SBSDKUI2ScanbotAlertDialog : SBSDKUI2Node
/// Title displayed above the message.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Explanation message message.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull subtitle;
/// Background color of the alert dialog.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sheetColor;
/// Dialog overlay color.
/// Default is “?sbColorModalOverlay”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull modalOverlayColor;
/// Color of the divider line.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull dividerColor;
/// Configuration of the retry button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull okButton;
/// Configuration of the middle button for dialogs with tree buttons.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull actionButton;
/// Configuration of the cancel button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull cancelButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ScanbotAlertDialog * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitle:(SBSDKUI2StyledText * _Nonnull)title subtitle:(SBSDKUI2StyledText * _Nonnull)subtitle sheetColor:(SBSDKUI2Color * _Nonnull)sheetColor modalOverlayColor:(SBSDKUI2Color * _Nonnull)modalOverlayColor dividerColor:(SBSDKUI2Color * _Nonnull)dividerColor okButton:(SBSDKUI2ButtonConfiguration * _Nonnull)okButton actionButton:(SBSDKUI2ButtonConfiguration * _Nonnull)actionButton cancelButton:(SBSDKUI2ButtonConfiguration * _Nonnull)cancelButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

enum SBSDKUI2SheetMode : NSInteger;

/// Configuration of the preview mode for scanning multiple barcodes.
SWIFT_CLASS_NAMED("SBSDKUI2Sheet")
@interface SBSDKUI2Sheet : SBSDKUI2Node
/// Mode used for the preview for scanning multiple barcodes.
/// Default is COLLAPSED_SHEET
@property (nonatomic) enum SBSDKUI2SheetMode mode;
/// Height of the collapsed result sheet.
/// Default is SMALL
@property (nonatomic) enum SBSDKUI2CollapsedVisibleHeight collapsedVisibleHeight;
/// Configuration of the list button.
@property (nonatomic, strong) SBSDKUI2BadgedButton * _Nonnull listButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2Sheet * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithMode:(enum SBSDKUI2SheetMode)mode collapsedVisibleHeight:(enum SBSDKUI2CollapsedVisibleHeight)collapsedVisibleHeight listButton:(SBSDKUI2BadgedButton * _Nonnull)listButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2SwipeToDelete;

/// Configuration of the list containing the barcodes that have already been scanned.
SWIFT_CLASS_NAMED("SBSDKUI2SheetContent")
@interface SBSDKUI2SheetContent : SBSDKUI2Node
/// Color of the list’s background.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sheetColor;
/// The color of the dividers in the list sheet.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull dividerColor;
/// Enables the user to change the number of scanned items by pressing +,-, or changing the number using a keyboard.
/// Default is true
@property (nonatomic) BOOL manualCountChangeEnabled;
/// The color of the outline of the manual counting buttons in the list sheet.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull manualCountOutlineColor;
/// Color of the buttons for manually changing the barcode count.
/// Default is “?sbColorPrimary”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull manualCountChangeColor;
/// Configuration of the barcode list’s title. By default displays the total number of scanned barcodes.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Configuration of the button for clearing the barcode list.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull clearAllButton;
/// Configuration of the title of a barcode list entry (displaying the barcode’s value).
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull barcodeItemTitle;
/// Configuration of the subtitle of a barcode list entry (displaying the barcode’s symbology).
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull barcodeItemSubtitle;
/// Visibility of the barcode image in a barcode list entry.
/// Default is true
@property (nonatomic) BOOL barcodeItemImageVisible;
/// Configuration of the barcode list’s submit button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull submitButton;
/// Configuration of the button to start scanning displayed in an empty barcode list.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull startScanningButton;
/// Configuration of the title displayed in an empty barcode list.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull placeholderTitle;
/// Configuration of the subtitle displayed in an empty barcode list.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull placeholderSubtitle;
/// Background color of the icon displayed in an empty barcode list.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull placeholderIconBackground;
/// Configuration of the icon displayed in an empty barcode list.
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull placeholderIcon;
/// The style of the swipe-to-delete button.
@property (nonatomic, strong) SBSDKUI2SwipeToDelete * _Nonnull swipeToDelete;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2SheetContent * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSheetColor:(SBSDKUI2Color * _Nonnull)sheetColor dividerColor:(SBSDKUI2Color * _Nonnull)dividerColor manualCountChangeEnabled:(BOOL)manualCountChangeEnabled manualCountOutlineColor:(SBSDKUI2Color * _Nonnull)manualCountOutlineColor manualCountChangeColor:(SBSDKUI2Color * _Nonnull)manualCountChangeColor title:(SBSDKUI2StyledText * _Nonnull)title clearAllButton:(SBSDKUI2ButtonConfiguration * _Nonnull)clearAllButton barcodeItemTitle:(SBSDKUI2StyledText * _Nonnull)barcodeItemTitle barcodeItemSubtitle:(SBSDKUI2StyledText * _Nonnull)barcodeItemSubtitle barcodeItemImageVisible:(BOOL)barcodeItemImageVisible submitButton:(SBSDKUI2ButtonConfiguration * _Nonnull)submitButton startScanningButton:(SBSDKUI2ButtonConfiguration * _Nonnull)startScanningButton placeholderTitle:(SBSDKUI2StyledText * _Nonnull)placeholderTitle placeholderSubtitle:(SBSDKUI2StyledText * _Nonnull)placeholderSubtitle placeholderIconBackground:(SBSDKUI2Color * _Nonnull)placeholderIconBackground placeholderIcon:(SBSDKUI2IconStyle * _Nonnull)placeholderIcon swipeToDelete:(SBSDKUI2SwipeToDelete * _Nonnull)swipeToDelete OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Configuration of the barcode result sheet’s default visibility state.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2SheetMode, "SBSDKUI2SheetMode", open) {
/// Result sheet is hidden and can be opened by pressing the button. The button can show the total barcode count.
  SBSDKUI2SheetModeButton = 0,
/// Result sheet is visible and collapsed and can be expanded by dragging it up.
  SBSDKUI2SheetModeCollapsedSheet = 1,
};


/// Configuration of the single barcode scanning mode.
SWIFT_CLASS_NAMED("SBSDKUI2SingleScanningMode")
@interface SBSDKUI2SingleScanningMode : SBSDKUI2BarcodeUseCase
/// If enabled, the confirmation sheet will be shown after the barcode has been scanned.
/// Default is false
@property (nonatomic) BOOL confirmationSheetEnabled;
/// If enabled, the barcode image will be shown on the confirmation sheet.
/// Default is true
@property (nonatomic) BOOL barcodeImageVisible;
/// Color of the confirmation sheet’s background.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sheetColor;
/// Color of the divider and separator lines in the confirmation sheet.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull dividerColor;
/// Background color of the overlay surrounding the confirmation sheet.
/// Default is “?sbColorModalOverlay”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull modalOverlayColor;
/// Appearance of the barcode title (the barcode’s value) on the confirmation sheet.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull barcodeTitle;
/// Appearance of the barcode subtitle (the barcode’s symbology) on the confirmation sheet.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull barcodeSubtitle;
/// Appearance of the confirm button on the confirmation sheet.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull submitButton;
/// Appearance of the cancel button on the confirmation sheet.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull cancelButton;
/// Appearance of the barcode info mapping.
@property (nonatomic, strong) SBSDKUI2BarcodeInfoMapping * _Nonnull barcodeInfoMapping;
/// Configuration of the AR overlay.
@property (nonatomic, strong) SBSDKUI2ArOverlayGeneralConfiguration * _Nonnull arOverlay;
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2SingleScanningMode * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithConfirmationSheetEnabled:(BOOL)confirmationSheetEnabled barcodeImageVisible:(BOOL)barcodeImageVisible sheetColor:(SBSDKUI2Color * _Nonnull)sheetColor dividerColor:(SBSDKUI2Color * _Nonnull)dividerColor modalOverlayColor:(SBSDKUI2Color * _Nonnull)modalOverlayColor barcodeTitle:(SBSDKUI2StyledText * _Nonnull)barcodeTitle barcodeSubtitle:(SBSDKUI2StyledText * _Nonnull)barcodeSubtitle submitButton:(SBSDKUI2ButtonConfiguration * _Nonnull)submitButton cancelButton:(SBSDKUI2ButtonConfiguration * _Nonnull)cancelButton barcodeInfoMapping:(SBSDKUI2BarcodeInfoMapping * _Nonnull)barcodeInfoMapping arOverlay:(SBSDKUI2ArOverlayGeneralConfiguration * _Nonnull)arOverlay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

enum SBSDKUI2SoundType : NSInteger;

/// Sound configuration.
SWIFT_CLASS_NAMED("SBSDKUI2Sound")
@interface SBSDKUI2Sound : SBSDKUI2Node
/// Enable or disable the beep sound when a barcode is detected.
/// Default is true
@property (nonatomic) BOOL successBeepEnabled;
/// The beep type.
/// Default is MODERN_BEEP
@property (nonatomic) enum SBSDKUI2SoundType soundType;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2Sound * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSuccessBeepEnabled:(BOOL)successBeepEnabled soundType:(enum SBSDKUI2SoundType)soundType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// The sound selection type.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2SoundType, "SBSDKUI2SoundType", open) {
/// To choose a modern beep sound.
  SBSDKUI2SoundTypeModernBeep = 0,
/// To choose the old classic beep sound.
  SBSDKUI2SoundTypeClassicBeep = 1,
};

/// Visual mode used for the status bar icons.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2StatusBarMode, "SBSDKUI2StatusBarMode", open) {
/// Display all icons in the status bar in black.
  SBSDKUI2StatusBarModeDark = 0,
/// Display all icons in the status bar in white.
  SBSDKUI2StatusBarModeLight = 1,
/// Hide the status bar icons.
  SBSDKUI2StatusBarModeHidden = 2,
};


/// Configuration of the text field appearance.
SWIFT_CLASS_NAMED("SBSDKUI2StyledText")
@interface SBSDKUI2StyledText : SBSDKUI2Node
/// Whether the text field is visible.
/// Default is true
@property (nonatomic) BOOL visible;
/// Value of the text field.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull text;
/// Text color.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull color;
/// Whether to enable drop shadows for the text.
/// Default is false
@property (nonatomic) BOOL useShadow;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2StyledText * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible text:(NSString * _Nonnull)text color:(SBSDKUI2Color * _Nonnull)color useShadow:(BOOL)useShadow OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end




/// Configuration of the swipe-to-delete button.
SWIFT_CLASS_NAMED("SBSDKUI2SwipeToDelete")
@interface SBSDKUI2SwipeToDelete : SBSDKUI2Node
/// Whether swipe to delete is enabled or not.
/// Default is true
@property (nonatomic) BOOL enabled;
/// Color of the swipe-to-delete button.
/// Default is “?sbColorNegative”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull backgroundColor;
/// Color of the icon on the swipe-to-delete button.
/// Default is “?sbColorOnPrimary”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull iconColor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2SwipeToDelete * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithEnabled:(BOOL)enabled backgroundColor:(SBSDKUI2Color * _Nonnull)backgroundColor iconColor:(SBSDKUI2Color * _Nonnull)iconColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of timeouts.
SWIFT_CLASS_NAMED("SBSDKUI2Timeouts")
@interface SBSDKUI2Timeouts : SBSDKUI2Node
/// Sets the auto close timer in ms. Default is 0 (disabled).
/// Default is 0
@property (nonatomic) NSInteger autoCancelTimeout;
/// Sets the time in ms the first scan is delayed by. Default is 0 (disabled).
/// Default is 0
@property (nonatomic) NSInteger initialScanDelay;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2Timeouts * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAutoCancelTimeout:(NSInteger)autoCancelTimeout initialScanDelay:(NSInteger)initialScanDelay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

enum SBSDKUI2TopBarMode : NSInteger;

/// Configuration of the top screen bar’s appearance.
SWIFT_CLASS_NAMED("SBSDKUI2TopBarConfiguration")
@interface SBSDKUI2TopBarConfiguration : SBSDKUI2Node
/// Appearance of the top bar’s title.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Visual mode used for the top bar.
/// Default is SOLID
@property (nonatomic) enum SBSDKUI2TopBarMode mode;
/// Visual mode used for the status bar icons.
/// Default is LIGHT
@property (nonatomic) enum SBSDKUI2StatusBarMode statusBarMode;
/// Background color of the top bar to be used when the visual mode is specified as SOLID. Otherwise ignored.
/// Default is “?sbColorPrimary”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull backgroundColor;
/// Configuration of the cancel button’s appearance.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull cancelButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2TopBarConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitle:(SBSDKUI2StyledText * _Nonnull)title mode:(enum SBSDKUI2TopBarMode)mode statusBarMode:(enum SBSDKUI2StatusBarMode)statusBarMode backgroundColor:(SBSDKUI2Color * _Nonnull)backgroundColor cancelButton:(SBSDKUI2ButtonConfiguration * _Nonnull)cancelButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Visual mode used for the top bar.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2TopBarMode, "SBSDKUI2TopBarMode", open) {
/// Display the top bar with a background color or with transparency.
  SBSDKUI2TopBarModeSolid = 0,
/// Display the top bar with a gradient background color or a transparent gradient. The buttons will still be
/// visible.
  SBSDKUI2TopBarModeGradient = 1,
/// Hide the top bar completely.
  SBSDKUI2TopBarModeHidden = 2,
};


/// Configuration of the hint guiding users through the scanning process.
SWIFT_CLASS_NAMED("SBSDKUI2UserGuidanceConfiguration")
@interface SBSDKUI2UserGuidanceConfiguration : SBSDKUI2Node
/// Whether the user guidance is visible.
/// Default is true
@property (nonatomic) BOOL visible;
/// Title of the user guidance.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Background style used for the user guidance.
@property (nonatomic, strong) SBSDKUI2BackgroundStyle * _Nonnull background;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2UserGuidanceConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible title:(SBSDKUI2StyledText * _Nonnull)title background:(SBSDKUI2BackgroundStyle * _Nonnull)background OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Vibration configuration.
SWIFT_CLASS_NAMED("SBSDKUI2Vibration")
@interface SBSDKUI2Vibration : SBSDKUI2Node
/// Enable or disable vibration when a barcode is detected.
/// Default is false
@property (nonatomic) BOOL enabled;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2Vibration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithEnabled:(BOOL)enabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the scanning interface’s viewfinder, serving as guidance to the user.
SWIFT_CLASS_NAMED("SBSDKUI2ViewFinderConfiguration")
@interface SBSDKUI2ViewFinderConfiguration : SBSDKUI2Node
/// Whether the viewfinder is visible.
/// Default is true
@property (nonatomic) BOOL visible;
/// Visual appearance of the viewfinder.
@property (nonatomic, strong) SBSDKUI2FinderStyle * _Nonnull style;
/// Color of the viewfinder overlay.
/// Default is “?sbColorSurfaceLow”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull overlayColor;
/// The viewfinder’s aspect ratio.
@property (nonatomic, strong) SBSDKUI2AspectRatio * _Nonnull aspectRatio;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ViewFinderConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible style:(SBSDKUI2FinderStyle * _Nonnull)style overlayColor:(SBSDKUI2Color * _Nonnull)overlayColor aspectRatio:(SBSDKUI2AspectRatio * _Nonnull)aspectRatio OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// A class for a barcode filtering that can be used in barcode scanning RTU-UI components.
/// You can customize the filtering of barcode results coming from RTU-UI barcode scanners by implementing a
/// subclass of this class and pass the instance of your filtering class to the barcode scanning RTU-UI component.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK20SBSDKUIBarcodeFilter") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeFilter : NSObject
/// Accepts or rejects a scanned barcode.
/// \param barcode The barcode to be accepted or rejected by the filter.
///
///
/// returns:
/// <code>True</code> if the given barcode should be accepted, <code>False</code> otherwise.
- (BOOL)acceptsBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
/// Accepts or rejects a scanned barcode in the context of already accepted barcodes.
/// Accepts a barcodes, if it is not yet contained in the given array of accepted barcodes. Prevents duplicate barcodes.
/// \param barcode The barcode to be accepted or rejected by the filter.
///
/// \param codes List of current already accepted barcodes.
///
///
/// returns:
/// <code>True</code> if the given barcode should be added, <code>False</code> otherwise.
- (BOOL)shouldAdd:(SBSDKBarcodeScannerResult * _Nonnull)barcode toBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Subclass of <code>SBSDKUIBarcodeFilter</code> that only accepts barcodes with extensions.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK30SBSDKUIBarcodeExtensionsFilter") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeExtensionsFilter : SBSDKUIBarcodeFilter
- (BOOL)acceptsBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A class to store and remove barcode images from <code>SBSDKUIBarcodeScannerViewController</code>.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK26SBSDKUIBarcodeImageStorage")
@interface SBSDKUIBarcodeImageStorage : NSObject
/// The default instance of this class.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIBarcodeImageStorage * _Nonnull defaultStorage;)
+ (SBSDKUIBarcodeImageStorage * _Nonnull)defaultStorage SWIFT_WARN_UNUSED_RESULT;
/// Set default storage. If not used, default storage will be created with default parameters.
+ (void)setDefaultStorage:(SBSDKUIBarcodeImageStorage * _Nonnull)storage;
/// If file format is set to <code>SBSDKImageFileFormat/JPEG</code>, this property holds the compression quality of the stored images. Read-only.
/// Defaults to 80.
/// Values must be between 0 (high compression, small file size, bad quality) and 100 (no compression, huge file size, good image quality).
@property (nonatomic, readonly) NSInteger writingJpegImageCompressionQuality;
/// File format of the stored images.
/// Defaults to <code>SBSDKImageFileFormat/JPEG</code>.
@property (nonatomic, readonly) enum SBSDKImageFileFormat writingImageFileFormat;
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull allImageURLs;
/// Not available. Use <code>default</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("use default");
/// Initializes storage with given image file format and default JPEG compression quality using the default storage location.
/// \param format The image file format.
///
- (nonnull instancetype)initWithImageFileFormat:(enum SBSDKImageFileFormat)format;
/// Initializes storage with JPEG image file format and given JPEG compression quality using the default storage location.
/// \param jpegImageCompressionQuality The JPEG compression quality.
///
- (nonnull instancetype)initWithJpegFileFormatAndCompressionQuality:(NSInteger)jpegImageCompressionQuality;
/// Initializes storage with given image file format and default JPEG compression quality.
/// \param format The image file format.
///
/// \param location The storage location where image files are saved to. If <code>nil</code>, the default location is chosen.
///
- (nonnull instancetype)initWithImageFileFormat:(enum SBSDKImageFileFormat)format location:(SBSDKStorageLocation * _Nullable)location OBJC_DESIGNATED_INITIALIZER;
/// Initializes storage with JPEG image file format and given JPEG compression quality.
/// \param jpegImageCompressionQuality The JPEG compression quality.
///
/// \param location The storage location where image files are saved to. If <code>nil</code>, the default location is chosen.
///
- (nonnull instancetype)initWithJpegFileFormatAndCompressionQuality:(NSInteger)jpegImageCompressionQuality location:(SBSDKStorageLocation * _Nullable)location OBJC_DESIGNATED_INITIALIZER;
/// It clears the receiver. Removes all stored images files from disk.
- (void)removeAll;
@end


/// Class that contains barcode name and description.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK24SBSDKUIBarcodeMappedData") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeMappedData : NSObject
/// Name of the barcode.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Description of the barcode.
@property (nonatomic, readonly, copy) NSString * _Nonnull codeDescription;
/// The initializer.
/// \param name Name of the barcode.
///
/// \param codeDescription Description of the  barcode.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name description:(NSString * _Nonnull)codeDescription OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class that contains barcode result and mapped data.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK26SBSDKUIBarcodeMappedResult") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeMappedResult : NSObject
/// Barcode result.
@property (nonatomic, readonly, strong) SBSDKBarcodeScannerResult * _Nonnull barcode;
/// Mapped info about barcode. Is filled via <code>SBSDKUIBarcodesBatchScannerMapping</code> protocol.
/// Can be <code>nil</code>.
@property (nonatomic, readonly, strong) SBSDKUIBarcodeMappedData * _Nullable mappedData;
/// The initializer.
/// \param barcode The barcode result.
///
- (nonnull instancetype)initWithBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The configuration for the behavior of the RTU-UI barcode scanner.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK42SBSDKUIBarcodeScannerBehaviorConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeScannerBehaviorConfiguration : NSObject
/// The types of codes to be detected.
@property (nonatomic, copy) NSArray<SBSDKBarcodeType *> * _Nonnull acceptedBarcodeTypes;
/// The types of documents being extracted from scanned codes.
@property (nonatomic, copy) NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull acceptedDocumentTypes;
/// Filter for extended EAN and UPC barcodes.
@property (nonatomic) enum SBSDKBarcodesExtensionFilter extensionFilter;
/// Specifies the way of barcode images generation or disables this generation at all.
/// Use, if you want to receive a full sized image with barcodes.
@property (nonatomic) enum SBSDKBarcodeImageGenerationType barcodeImageGenerationType;
/// Whether flash is toggled on or off.
@property (nonatomic) BOOL isFlashEnabled;
/// Whether scanner screen should make a sound on successful barcode detection.
@property (nonatomic) BOOL isSuccessBeepEnabled;
/// Time in seconds until the screen is automatically cancelled.
/// Set to 0 to disable automatic cancellation.
@property (nonatomic) NSTimeInterval autoCancelTimeout;
/// Additional parameters for tweaking the detection of barcodes.
@property (nonatomic, strong) SBSDKBarcodeAdditionalParameters * _Nonnull additionalParameters;
/// The range of valid camera zoom factors.
@property (nonatomic, strong) SBSDKZoomRange * _Nonnull cameraZoomRange;
/// The relative zoom level of the camera relative to <code>SBSDKUIBarcodeScannerBehaviorConfiguration/cameraZoomRange</code>.
/// The minimum value is 0.0 (zoomed out), the maximum value is 1.0 (zoomed in).
@property (nonatomic) CGFloat cameraZoomFactor;
/// When this property is set to <code>True</code>, the zoom can be activated by double tapping somewhere in the receivers view.
@property (nonatomic) BOOL isDoubleTapToZoomEnabled;
/// When this property is set to <code>True</code>, the zoom can be activated by a pinch gesture somewhere in the receivers view.
@property (nonatomic) BOOL isPinchToZoomEnabled;
/// Defines, if zooming in or out should be animated.
@property (nonatomic) BOOL shouldAnimateZooming;
/// The barcode detectors engine mode.
@property (nonatomic) enum SBSDKBarcodeEngineMode engineMode;
/// Additional filter to reject or accept barcode scanner results.
@property (nonatomic, strong) SBSDKUIBarcodeFilter * _Nonnull barcodeFilter;
/// Disables auto-focus and locks the lens at the specified focus lock lens position.
@property (nonatomic) BOOL isFocusLockEnabled;
/// The position of the lens.
/// Values can be between 0.0f (minimum focusing distance) and 1.0f (maximum focusing distance).
/// The value will be clamped to [0.0f, 1.0f].
@property (nonatomic) CGFloat focusLockPosition;
/// The initial recognition delay in seconds.
@property (nonatomic) NSTimeInterval initialScanDelay;
/// Defines, if the confirmation dialog should be displayed or not before returning the results to the delegate.
@property (nonatomic) BOOL isResultWithConfirmationEnabled;
/// The text format of the results dialog.
@property (nonatomic) enum SBSDKBarcodeDialogFormat dialogTextFormat;
/// Set to <code>True</code> to enable and display the region of interest, to <code>False</code> otherwise.
@property (nonatomic) BOOL isViewFinderEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKUICameraConfiguration;

/// The general configuration class for all RTU-UI components.
/// Component specific configurations are subclassed from this class.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK20SBSDKUIConfiguration")
@interface SBSDKUIConfiguration : NSObject
/// The default configuration.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKUIConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// The camera configuration.
@property (nonatomic, readonly, strong) SBSDKUICameraConfiguration * _Nonnull cameraConfiguration;
/// Designated initializer. Creates a new instance of <code>SBSDKUIConfiguration</code>.
/// \param cameraConfiguration A configuration for the camera device.
///
- (nonnull instancetype)initWithCameraConfiguration:(SBSDKUICameraConfiguration * _Nonnull)cameraConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end

@class SBSDKUIBarcodeScannerUIConfiguration;
@class SBSDKUIBarcodeScannerTextConfiguration;
@class SBSDKUIBarcodeTrackingOverlayConfiguration;

/// This class describes the look and feel, as well as the textual contents of the RTU-UI barcode scanner.
/// Use the <code>defaultConfiguration</code> class method to retrieve an instance and modify it.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK34SBSDKUIBarcodeScannerConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeScannerConfiguration : SBSDKUIConfiguration
/// The user interface sub-configuration.
@property (nonatomic, strong) SBSDKUIBarcodeScannerUIConfiguration * _Nonnull uiConfiguration;
/// The configuration for displayed texts.
@property (nonatomic, strong) SBSDKUIBarcodeScannerTextConfiguration * _Nonnull textConfiguration;
/// The configuration controlling the scanning screens behavior.
@property (nonatomic, strong) SBSDKUIBarcodeScannerBehaviorConfiguration * _Nonnull behaviorConfiguration;
/// The configuration for the tracked barcodes overlay.
@property (nonatomic, strong) SBSDKUIBarcodeTrackingOverlayConfiguration * _Nonnull trackingOverlayConfiguration;
/// The default configuration.
///
/// returns:
/// A mutable instance of <code>SBSDKUIBarcodeScannerConfiguration</code> with default values.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIBarcodeScannerConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKUIBarcodeScannerConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Designated initializer. Creates a new instance of <code>SBSDKUIBarcodeScannerConfiguration</code>.
/// \param uiConfiguration A configuration for the user interface. Defines colors and sizes.
///
/// \param textConfiguration A configuration for text being displayed in the barcode scanner screen.
///
/// \param behaviorConfiguration A configuration for barcode scanner behavior.
///
/// \param cameraConfiguration A configuration for the barcode scanners camera.
///
/// \param trackingOverlayConfiguration A configuration for the barcode scanners tracking overlay.
///
- (nonnull instancetype)initWithUiConfiguration:(SBSDKUIBarcodeScannerUIConfiguration * _Nonnull)uiConfiguration textConfiguration:(SBSDKUIBarcodeScannerTextConfiguration * _Nonnull)textConfiguration behaviorConfiguration:(SBSDKUIBarcodeScannerBehaviorConfiguration * _Nonnull)behaviorConfiguration cameraConfiguration:(SBSDKUICameraConfiguration * _Nonnull)cameraConfiguration trackingOverlayConfiguration:(SBSDKUIBarcodeTrackingOverlayConfiguration * _Nonnull)trackingOverlayConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithCameraConfiguration:(SBSDKUICameraConfiguration * _Nonnull)cameraConfiguration SWIFT_UNAVAILABLE;
@end


@interface SBSDKUIBarcodeScannerConfiguration (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
- (nullable instancetype)initWithJson:(NSString * _Nonnull)json partial:(BOOL)partial;
@end


/// Configuration for the textual contents of camera based view controllers.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKUIEnableCameraTextConfiguration")
@interface SBSDKUIEnableCameraTextConfiguration : NSObject
/// The string being displayed on the label describing the camera access requirement.
/// Defaults to “Please enable the camera permission to start scanning.”
@property (nonatomic, copy) NSString * _Nonnull enableCameraExplanationText;
/// The string being displayed on the button to request camera access.
/// Defaults to “Enable camera”.
@property (nonatomic, copy) NSString * _Nonnull enableCameraButtonTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The configuration for the textual contents of the RTU-UI barcode scanner.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK38SBSDKUIBarcodeScannerTextConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeScannerTextConfiguration : SBSDKUIEnableCameraTextConfiguration
/// String being displayed as description.
@property (nonatomic, copy) NSString * _Nonnull finderTextHint;
/// String being displayed on the flash button.
@property (nonatomic, copy) NSString * _Nullable flashButtonTitle;
/// String being displayed on the cancel button.
@property (nonatomic, copy) NSString * _Nullable cancelButtonTitle;
/// String being displayed as the confirmation dialogs title.
@property (nonatomic, copy) NSString * _Nullable confirmationDialogTitle;
/// String being displayed as the confirmation dialogs message.
@property (nonatomic, copy) NSString * _Nullable confirmationDialogMessage;
/// The title of the confirmation dialog retry button.
@property (nonatomic, copy) NSString * _Nonnull confirmationDialogRetryButtonTitle;
/// The title of the confirmation dialog confirm button.
@property (nonatomic, copy) NSString * _Nonnull confirmationDialogConfirmButtonTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKUIDialogStyle;
@class SBSDKUIDialogButtonStyle;

/// The configuration for user interface of the RTU-UI barcode scanner.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKUIBarcodeScannerUIConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeScannerUIConfiguration : NSObject
/// Foreground color of the cancel button and when flash button is on.
@property (nonatomic, strong) UIColor * _Nonnull topBarButtonsColor;
/// Background color of the top bar.
@property (nonatomic, strong) UIColor * _Nonnull topBarBackgroundColor;
/// Foreground color of the flash button when flash is off.
@property (nonatomic, strong) UIColor * _Nonnull flashButtonInactiveColor;
/// Background color of the detection overlay.
@property (nonatomic, strong) UIColor * _Nonnull cameraOverlayColor;
/// Foreground color of the detection overlay.
@property (nonatomic, strong) UIColor * _Nonnull finderLineColor;
/// Width of finder frame border.
@property (nonatomic) CGFloat finderLineWidth;
/// Aspect ratio of finder frame (width \ height), which is used to build actual finder frame.
@property (nonatomic, strong) SBSDKAspectRatio * _Nonnull finderAspectRatio;
/// Foreground color of the description label.
@property (nonatomic, strong) UIColor * _Nonnull finderTextHintColor;
/// Whether the flash button is hidden or not.
@property (nonatomic) BOOL isFlashButtonHidden;
/// Whether the cancel button is hidden or not.
@property (nonatomic) BOOL isCancelButtonHidden;
/// Allowed orientations for automatic interface rotations.
@property (nonatomic) enum SBSDKOrientationLock orientationLockMode;
/// The style of the confirmation dialog.
@property (nonatomic, strong) SBSDKUIDialogStyle * _Nonnull confirmationDialogStyle;
/// The style of the confirmation dialogs confirm button.
@property (nonatomic, strong) SBSDKUIDialogButtonStyle * _Nonnull confirmationDialogConfirmButtonStyle;
/// The style of the confirmation dialogs retry button.
@property (nonatomic, strong) SBSDKUIDialogButtonStyle * _Nonnull confirmationDialogRetryButtonStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An abstract base class for RTU-UI view controllers.
/// important:
/// Do not use or subclass.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK21SBSDKUIViewController")
@interface SBSDKUIViewController : UIViewController
/// If set to <code>True</code>, the receiver shows the status bar. Otherwise the status bar is hidden.
@property (nonatomic) BOOL shouldShowStatusBar;
/// The style of the status bar.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// If set to <code>True</code>, the receiver automatically hides the home indicator.
/// Does not apply to devices with a Home button.
@property (nonatomic) BOOL shouldHideHomeIndicator;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Dismisses the receiver if possible. Subclasses should override here and call its delegates.
/// If the receiver is the <code>topViewController</code> of a <code>UINavigationController</code> this method pops the receiver from the navigation stack. If the receiver is presented modally, it is dismissed.
/// \param cancelled Whether the receiver was cancelled or finished.
///
- (void)dismiss:(BOOL)cancelled;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class SBSDKUIEnableCameraUIConfiguration;

/// A <code>SBSDKUIViewController</code> subclass which adds support for enabled and disabled camera permission.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKUICameraViewController")
@interface SBSDKUICameraViewController : SBSDKUIViewController
/// Whether the camera access is granted or not.
@property (nonatomic, readonly) BOOL isCameraAccessGranted;
/// A container where the enable-camera-view should be put.
@property (nonatomic, readonly, strong) UIView * _Null_unspecified containerForEnableCameraView;
/// A text configuration, used for the enable-camera-view.
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraTextConfiguration * _Nonnull enableCameraTextConfiguration;
/// A UI configuration, used for the enable-camera-view.
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraUIConfiguration * _Nonnull enableCameraUIConfiguration;
/// A method for subclassing.
/// Override to perform custom actions after checking camera access. For example updating some control visibility.
/// \param granted Whether the camera access is granted or not.
///
- (void)cameraAccessDidChange:(BOOL)granted;
/// A method for subclassing.
/// Override to perform custom actions before appearing of the enable-camera-view.
/// For example: show the container or hide some buttons.
- (void)willShowEnableCameraView;
/// A method for subclassing.
/// Override to perform custom actions after disappearing of the enable-camera-view.
/// For example: hide the container or show some buttons.
- (void)didHideEnableCameraView;
/// Is called when the application became active.
- (void)applicationDidBecomeActive;
/// Updates the flash button.
- (void)updateFlashButton;
/// Called whenever the views layout did change.
- (void)updateLayout;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBSDKUIBarcodeScannerViewControllerDelegate;

/// A highly customizable camera-based RTU-UI view controller to detect QR and barcodes.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK35SBSDKUIBarcodeScannerViewController") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeScannerViewController : SBSDKUICameraViewController
/// Enables or disables the QR/barcode detection.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isRecognitionEnabled;
/// The receivers delegate.
@property (nonatomic, weak) id <SBSDKUIBarcodeScannerViewControllerDelegate> _Nullable delegate;
/// Creates a new instance of <code>SBSDKUIBarcodeScannerViewController</code> and presents it modally.
/// \param presenter The view controller the new instance should be presented on.
///
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param delegate The delegate of the new detection view controller.
///
///
/// returns:
/// A new instance of <code>SBSDKUIBarcodeScannerViewController</code>.
+ (SBSDKUIBarcodeScannerViewController * _Nonnull)presentOn:(UIViewController * _Nonnull)presenter configuration:(SBSDKUIBarcodeScannerConfiguration * _Nonnull)configuration delegate:(id <SBSDKUIBarcodeScannerViewControllerDelegate> _Nullable)delegate;
/// Creates a new instance of <code>SBSDKUIBarcodeScannerViewController</code>.
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param delegate The delegate of the new detection view controller.
///
///
/// returns:
/// A new instance of <code>SBSDKUIBarcodeScannerViewController</code>.
+ (SBSDKUIBarcodeScannerViewController * _Nonnull)createWithConfiguration:(SBSDKUIBarcodeScannerConfiguration * _Nonnull)configuration delegate:(id <SBSDKUIBarcodeScannerViewControllerDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
/// Freezes the cameras preview layer by stopping the camera session.
- (void)freezeCamera;
/// Unfreezes the previously frozen cameras preview layer by restarting the camera session.
- (void)unfreezeCamera;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)updateFlashButton;
- (void)didCancel;
- (void)didFinish;
@property (nonatomic, readonly, strong) UIView * _Nonnull containerForEnableCameraView;
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraTextConfiguration * _Nonnull enableCameraTextConfiguration;
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraUIConfiguration * _Nonnull enableCameraUIConfiguration;
- (void)didHideEnableCameraView;
- (void)willShowEnableCameraView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBSDKUIBarcodeScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKBarcodeTrackingOverlayControllerDelegate>
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didTapOnBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode;
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didChangeSelectedBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)selectedBarcodes;
- (SBSDKBarcodeTrackedViewPolygonStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller polygonStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
- (SBSDKBarcodeTrackedViewTextStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller textStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBSDKUIBarcodeScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKBarcodeScannerViewControllerDelegate>
- (BOOL)barcodeScannerControllerShouldDetectBarcodes:(SBSDKBarcodeScannerViewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
- (NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller filterResults:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes SWIFT_WARN_UNUSED_RESULT;
- (void)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller didDetectBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes;
@end


/// The general delegate protocol for <code>SBSDKUIViewController</code>-based classes.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK29SBSDKUIViewControllerDelegate_")
@protocol SBSDKUIViewControllerDelegate
@optional
/// Informs the delegate, that the <code>SBSDKUIViewController</code> wants to cancel.
/// If you implement this method and return <code>False</code>, you will be responsible for dismissing the view controller.
/// \param viewController The view controller that wants to cancel.
///
///
/// returns:
/// <code>True</code>, if you want to automatically dismiss the view controller. <code>False</code> otherwise.
- (BOOL)viewControllerShouldCancel:(SBSDKUIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
/// Informs the delegate, that the <code>SBSDKUIViewController</code> wants to finish.
/// If you implement this method and return <code>False</code>, you will be responsible for dismissing the view controller.
/// \param viewController The view controller that wants to finish.
///
///
/// returns:
/// <code>True</code>, if you want to automatically dismiss the view controller. <code>False</code> otherwise.
- (BOOL)viewControllerShouldFinish:(SBSDKUIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
@end


/// Delegate protocol for <code>SBSDKUIBarcodeScannerViewController</code>.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK43SBSDKUIBarcodeScannerViewControllerDelegate_") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@protocol SBSDKUIBarcodeScannerViewControllerDelegate <SBSDKUIViewControllerDelegate>
@optional
/// Informs the delegate that one or more barcodes have been detected.
/// Implementing this delegate function will use the new Scanbot barcode detector: see <code>SBSDKBarcodeType</code>.
/// Optional.
/// \param viewController The detection view controller that detected barcode(s).
///
/// \param barcodeResults An array of <code>SBSDKBarcodeScannerResult</code> objects containing recently detected barcodes.
///
- (void)qrBarcodeDetectionViewController:(SBSDKUIBarcodeScannerViewController * _Nonnull)viewController didDetectResults:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)barcodeResults;
/// Asks the delegate whether to highlight a barcode on the selection overlay or not.
/// It is optional and only called when the selection overlay is enabled.
/// \param viewController The calling <code>SBSDKUIBarcodeScannerViewController</code>.
///
/// \param code The barcode scanner result that may be highlighted or not.
///
///
/// returns:
/// <code>True</code>, if the provided barcode result should be highlighted on the selection overlay. <code>False</code> otherwise.
- (BOOL)qrBarcodeDetectionViewController:(SBSDKUIBarcodeScannerViewController * _Nonnull)viewController shouldHighlightResult:(SBSDKBarcodeScannerResult * _Nonnull)code SWIFT_WARN_UNUSED_RESULT;
/// Informs the delegate that the <code>SBSDKUIBarcodeScannerViewController</code> has been cancelled and dismissed.
/// Optional.
/// \param viewController The <code>SBSDKUIBarcodeScannerViewController</code> that did dismiss.
///
- (void)qrBarcodeDetectionViewControllerDidCancel:(SBSDKUIBarcodeScannerViewController * _Nonnull)viewController;
/// Informs the delegate that the <code>SBSDKUIBarcodeScannerViewController</code> has been cancelled and dismissed by timeout.
/// Optional.
/// note:
/// If this method is not implemented, viewController will try to call <code>qrBarcodeDetectionViewControllerDidCancel(_:)</code>.
/// \param viewController The <code>SBSDKUIBarcodeScannerViewController</code> that did dismiss.
///
- (void)qrBarcodeDetectionViewControllerDidTimeout:(SBSDKUIBarcodeScannerViewController * _Nonnull)viewController;
@end


/// The configuration object for the RTU-UI barcode tracking overlay.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK42SBSDKUIBarcodeTrackingOverlayConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeTrackingOverlayConfiguration : NSObject
/// Displays an augmented reality view that draws the frames, content and type text of the found barcodes when it finds them.
@property (nonatomic) BOOL overlayEnabled;
/// If enabled, newly detected barcodes will be automatically selected.
/// Otherwise the user has to tap on a barcode on the selection overlay to select it.
/// Has no effect with disabled overlay.
@property (nonatomic) BOOL automaticSelectionEnabled;
/// The color for the results overlays polygons.
@property (nonatomic, strong) UIColor * _Nonnull polygonColor;
/// The text color for the results overlays.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The text background color for the results overlays.
@property (nonatomic, strong) UIColor * _Nonnull textContainerColor;
/// The color for the results overlays polygons.
@property (nonatomic, strong) UIColor * _Nonnull highlightedPolygonColor;
/// The text color for the results overlays.
@property (nonatomic, strong) UIColor * _Nonnull highlightedTextColor;
/// The text background color for the results overlays.
@property (nonatomic, strong) UIColor * _Nonnull highlightedTextContainerColor;
/// The text format for the results overlays.
@property (nonatomic) enum SBSDKBarcodeOverlayFormat overlayTextFormat;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The configuration for the behavior of RTU-UI detector screens for barcodes.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK48SBSDKUIBarcodesBatchScannerBehaviorConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodesBatchScannerBehaviorConfiguration : NSObject
/// Whether flash is toggled on or off.
@property (nonatomic) BOOL isFlashEnabled;
/// Whether scanner screen should make a sound on successful barcode or MRZ detection.
@property (nonatomic) BOOL isSuccessBeepEnabled;
/// The types of codes to be detected.
@property (nonatomic, copy) NSArray<SBSDKBarcodeType *> * _Nonnull acceptedBarcodeTypes;
/// The types of documents being extracted from scanned codes.
@property (nonatomic, copy) NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull acceptedDocumentTypes;
/// Filter for extended EAN and UPC barcodes.
@property (nonatomic) enum SBSDKBarcodesExtensionFilter extensionFilter;
/// Additional parameters for tweaking the detection of barcodes.
@property (nonatomic, strong) SBSDKBarcodeAdditionalParameters * _Nonnull additionalDetectionParameters;
/// The barcode detectors engine mode.
@property (nonatomic) enum SBSDKBarcodeEngineMode engineMode;
/// The range of valid camera zoom factors.
@property (nonatomic, strong) SBSDKZoomRange * _Nonnull cameraZoomRange;
/// The relative zoom level of the camera relative to <code>cameraZoomRange</code>.
/// The minimum value is 0.0 (zoomed out), the maximum value is 1.0 (zoomed in).
/// You can use this value to zoom the camera programmatically but also to set an initial zoom factor.
@property (nonatomic) CGFloat cameraZoomFactor;
/// When this property is set to <code>True</code>, the zoom can be activated by double tapping somewhere in the receivers view.
@property (nonatomic) BOOL isDoubleTapToZoomEnabled;
/// When this property is set to <code>True</code>, the zoom can be activated by a pinch gesture somewhere in the receivers view.
@property (nonatomic) BOOL isPinchToZoomEnabled;
/// Defines, if zooming in or out should be animated.
@property (nonatomic) BOOL shouldAnimateZooming;
/// Additional filter to reject or accept barcode scanner results.
@property (nonatomic, strong) SBSDKUIBarcodeFilter * _Nonnull barcodeFilter;
/// Disables auto-focus and locks the lens at the specified focus lock lens position.
@property (nonatomic) BOOL isFocusLockEnabled;
/// The position of the lens.
/// Values can be between 0.0f (minimum focusing distance) and 1.0f (maximum focusing distance). The value will be clamped to [0.0f, 1.0f].
@property (nonatomic) CGFloat focusLockPosition;
/// The initial recognition delay in seconds.
@property (nonatomic) NSTimeInterval initialScanDelay;
/// Set to <code>True</code> to enable and display the region of interest, to <code>False</code> otherwise.
@property (nonatomic) BOOL isViewFinderEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKUIBarcodesBatchScannerUIConfiguration;
@class SBSDKUIBarcodesBatchScannerTextConfiguration;

/// This class describes the look and feel, as well as the textual contents of the RTU-UI batch barcode scanner.
/// Use the <code>defaultConfiguration</code> class method to retrieve an instance and modify it.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK40SBSDKUIBarcodesBatchScannerConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodesBatchScannerConfiguration : SBSDKUIConfiguration
/// The user interface sub-configuration.
@property (nonatomic, strong) SBSDKUIBarcodesBatchScannerUIConfiguration * _Nonnull uiConfiguration;
/// The configuration for displayed texts.
@property (nonatomic, strong) SBSDKUIBarcodesBatchScannerTextConfiguration * _Nonnull textConfiguration;
/// The configuration controlling the scanning screens behavior.
@property (nonatomic, strong) SBSDKUIBarcodesBatchScannerBehaviorConfiguration * _Nonnull behaviorConfiguration;
/// The configuration for the tracked barcodes overlay.
@property (nonatomic, strong) SBSDKUIBarcodeTrackingOverlayConfiguration * _Nonnull trackingOverlayConfiguration;
/// The default configuration.
///
/// returns:
/// A mutable instance of <code>SBSDKUIBarcodesBatchScannerConfiguration</code> with default values.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIBarcodesBatchScannerConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKUIBarcodesBatchScannerConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Designated initializer. Creates a new instance of <code>SBSDKUIBarcodesBatchScannerConfiguration</code>.
/// \param uiConfiguration A configuration for the user interface. Defines colors and sizes.
///
/// \param textConfiguration A configuration for text being displayed in the barcode scanner screen.
///
/// \param behaviorConfiguration A configuration for barcode scanner behavior.
///
/// \param cameraConfiguration A configuration for the barcode scanners camera.
///
/// \param trackingOverlayConfiguration A configuration for the barcode scanners tracking overlay.
///
- (nonnull instancetype)initWithUiConfiguration:(SBSDKUIBarcodesBatchScannerUIConfiguration * _Nonnull)uiConfiguration textConfiguration:(SBSDKUIBarcodesBatchScannerTextConfiguration * _Nonnull)textConfiguration behaviorConfiguration:(SBSDKUIBarcodesBatchScannerBehaviorConfiguration * _Nonnull)behaviorConfiguration cameraConfiguration:(SBSDKUICameraConfiguration * _Nonnull)cameraConfiguration trackingOverlayConfiguration:(SBSDKUIBarcodeTrackingOverlayConfiguration * _Nonnull)trackingOverlayConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithCameraConfiguration:(SBSDKUICameraConfiguration * _Nonnull)cameraConfiguration SWIFT_UNAVAILABLE;
@end


@interface SBSDKUIBarcodesBatchScannerConfiguration (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
- (nullable instancetype)initWithJson:(NSString * _Nonnull)json partial:(BOOL)partial;
@end


/// Protocol for the <code>SBSDKUIBarcodesBatchScannerViewController</code> barcode results mapping.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK34SBSDKUIBarcodesBatchScannerMapping_") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@protocol SBSDKUIBarcodesBatchScannerMapping
/// Method in which you should load and return information about barcode. The info is returned in block, so async loading is possible.
/// \param barcode Barcode, for which the info should be returned.
///
/// \param completion Block, where you should return mapped info about barcode.
///
- (void)loadMappedDataForBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode completion:(void (^ _Nullable)(SBSDKUIBarcodeMappedData * _Nullable))completion;
@end


/// The configuration for the textual contents of the RTU-UI batch barcode scanner.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK44SBSDKUIBarcodesBatchScannerTextConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodesBatchScannerTextConfiguration : SBSDKUIEnableCameraTextConfiguration
/// String being displayed as description.
@property (nonatomic, copy) NSString * _Nonnull finderTextHint;
/// String being displayed on the cancel button.
@property (nonatomic, copy) NSString * _Nonnull cancelButtonTitle;
/// String being displayed on the flash button.
@property (nonatomic, copy) NSString * _Nonnull flashButtonTitle;
/// String being displayed on the clear button.
@property (nonatomic, copy) NSString * _Nonnull clearButtonTitle;
/// String being displayed on the delete button.
@property (nonatomic, copy) NSString * _Nonnull deleteButtonTitle;
/// String being displayed on the view results button.
@property (nonatomic, copy) NSString * _Nonnull submitButtonTitle;
/// String used for displaying amount of scanned barcodes. Use %d for number formatting symbol.
@property (nonatomic, copy) NSString * _Nonnull barcodesCountText;
/// String used to show process of fetching mapped data for barcodes.
@property (nonatomic, copy) NSString * _Nonnull fetchingStateText;
/// String to show that no barcodes were scanned yet.
@property (nonatomic, copy) NSString * _Nonnull noBarcodesTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The configuration for user interface of the RTU-UI batch barcode scanner.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK42SBSDKUIBarcodesBatchScannerUIConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodesBatchScannerUIConfiguration : NSObject
/// Foreground color of the top bar buttons on the scanning screen.
@property (nonatomic, strong) UIColor * _Nonnull topBarButtonsColor;
/// Background color of the top bar.
@property (nonatomic, strong) UIColor * _Nonnull topBarBackgroundColor;
/// Foreground color of the flash button when flash is off.
@property (nonatomic, strong) UIColor * _Nonnull topBarButtonsInactiveColor;
/// Background color of the detection overlay.
@property (nonatomic, strong) UIColor * _Nonnull cameraOverlayColor;
/// Foreground color of the detection overlay.
@property (nonatomic, strong) UIColor * _Nonnull finderLineColor;
/// Width of finder frame border.
@property (nonatomic) CGFloat finderLineWidth;
/// Aspect ratio of finder frame (width \ height), which is used to build actual finder frame.
@property (nonatomic, strong) SBSDKAspectRatio * _Nonnull finderAspectRatio;
/// Foreground color of the description label.
@property (nonatomic, strong) UIColor * _Nonnull finderTextHintColor;
/// Whether the flash button is hidden or not.
@property (nonatomic) BOOL isFlashButtonHidden;
/// Whether the cancel button is hidden or not.
@property (nonatomic) BOOL isCancelButtonHidden;
/// Allowed orientations for automatic interface rotations.
@property (nonatomic) enum SBSDKOrientationLock orientationLockMode;
/// Text color of the barcodes count label.
@property (nonatomic, strong) UIColor * _Nonnull barcodesCountTextColor;
/// Text color in the details barcodes list. Also affects image background, separator and progress spinner.
@property (nonatomic, strong) UIColor * _Nonnull detailsPrimaryColor;
/// Foreground color of the top bar buttons on the details screen.
@property (nonatomic, strong) UIColor * _Nonnull detailsActionColor;
/// Background color of the details screen.
@property (nonatomic, strong) UIColor * _Nonnull detailsBackgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBSDKUIBarcodesBatchScannerViewControllerDelegate;

/// A highly customizable camera-based view controller to detect barcodes batches.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK41SBSDKUIBarcodesBatchScannerViewController") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodesBatchScannerViewController : SBSDKUICameraViewController <UIViewControllerTransitioningDelegate>
/// Enables or disables the barcode detection.
@property (nonatomic) BOOL isRecognitionEnabled;
/// The receivers delegate.
@property (nonatomic, weak) id <SBSDKUIBarcodesBatchScannerViewControllerDelegate> _Nullable delegate;
/// The mapper object, that conforms to the <code>SBSDKUIBarcodesBatchScannerMapping</code> protocol. Used to get additional info for barcodes.
/// Does not hold strong reference to the object. Can be <code>nil</code>.
@property (nonatomic, weak) id <SBSDKUIBarcodesBatchScannerMapping> _Nullable dataMapper;
/// Creates a new instance of <code>SBSDKUIBarcodesBatchScannerViewController</code> and presents it modally.
/// \param presenter The view controller the new instance should be presented on.
///
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param delegate The delegate of the new detection view controller.
///
///
/// returns:
/// A new instance of <code>SBSDKUIBarcodesBatchScannerViewController</code>.
+ (SBSDKUIBarcodesBatchScannerViewController * _Nonnull)presentOn:(UIViewController * _Nonnull)presenter configuration:(SBSDKUIBarcodesBatchScannerConfiguration * _Nonnull)configuration delegate:(id <SBSDKUIBarcodesBatchScannerViewControllerDelegate> _Nullable)delegate;
/// Creates a new instance of <code>SBSDKUIBarcodesBatchScannerViewController</code>.
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param delegate The delegate of the new detection view controller.
///
///
/// returns:
/// A new instance of <code>SBSDKUIBarcodesBatchScannerViewController</code>.
+ (SBSDKUIBarcodesBatchScannerViewController * _Nonnull)createNewWithConfiguration:(SBSDKUIBarcodesBatchScannerConfiguration * _Nonnull)configuration delegate:(id <SBSDKUIBarcodesBatchScannerViewControllerDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
/// Freezes the cameras preview layer by stopping the camera session.
- (void)freezeCamera;
/// Unfreezes the previously frozen cameras preview layer by restarting the camera session.
- (void)unfreezeCamera;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)updateLayout;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)updateFlashButton;
@property (nonatomic, readonly, strong) UIView * _Null_unspecified containerForEnableCameraView;
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraTextConfiguration * _Nonnull enableCameraTextConfiguration;
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraUIConfiguration * _Nonnull enableCameraUIConfiguration;
- (void)didHideEnableCameraView;
- (void)willShowEnableCameraView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface SBSDKUIBarcodesBatchScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKBarcodeScannerViewControllerDelegate>
- (NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller filterResults:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes SWIFT_WARN_UNUSED_RESULT;
- (void)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller didDetectBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes;
- (BOOL)barcodeScannerControllerShouldDetectBarcodes:(SBSDKBarcodeScannerViewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
@end


@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface SBSDKUIBarcodesBatchScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <UITableViewDataSource, UITableViewDelegate>
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBSDKUIBarcodesBatchScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKBarcodeTrackingOverlayControllerDelegate>
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didChangeSelectedBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)selectedBarcodes;
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didTapOnBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode;
- (SBSDKBarcodeTrackedViewPolygonStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller polygonStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
- (SBSDKBarcodeTrackedViewTextStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller textStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UIViewControllerAnimatedTransitioning;
@protocol UIViewControllerInteractiveTransitioning;

@interface SBSDKUIBarcodesBatchScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
@end


/// Delegate protocol for <code>SBSDKUIBarcodesBatchScannerViewController</code>.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK49SBSDKUIBarcodesBatchScannerViewControllerDelegate_") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@protocol SBSDKUIBarcodesBatchScannerViewControllerDelegate <SBSDKUIViewControllerDelegate>
/// Informs the delegate that one or more barcodes have been detected and the view controller has dismissed.
/// \param viewController The detection view controller that detected barcode(s).
///
/// \param barcodeResults An array of SBSDKBarcodeScannerResult objects containing detected barcodes.
///
- (void)barcodesBatchScannerViewController:(SBSDKUIBarcodesBatchScannerViewController * _Nonnull)viewController didFinishWithResults:(NSArray<SBSDKUIBarcodeMappedResult *> * _Nonnull)barcodeResults;
@optional
/// Informs the delegate that the <code>SBSDKUIBarcodesBatchScannerViewController</code> has been cancelled and dismissed.
/// Optional.
/// \param viewController The <code>SBSDKUIBarcodesBatchScannerViewController</code> that did dismiss.
///
- (void)barcodesBatchScannerViewControllerDidCancel:(SBSDKUIBarcodesBatchScannerViewController * _Nonnull)viewController;
@end


/// Configuration for the camera of all RTU-UI components.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK26SBSDKUICameraConfiguration")
@interface SBSDKUICameraConfiguration : NSObject
/// The camera to be used.
/// Defaults to <code>SBSDKCameraDevice/defaultBackFacingCamera</code>.
@property (nonatomic, strong) SBSDKCameraDevice * _Null_unspecified camera;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// The general style for an action button in a ScanbotSDK alert. Used to customize certain result alerts in SBSDKUI components.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK24SBSDKUIDialogButtonStyle")
@interface SBSDKUIDialogButtonStyle : NSObject
/// The font of the button title.
/// Defaults to System font Regular 17.0.
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The color of the buttons title while not pressed.
/// Defaults to blue.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The color of the buttons title while pressed.
/// Defaults to blue.
@property (nonatomic, strong) UIColor * _Nonnull highlightedTextColor;
/// The background color of the button while not pressed.
/// Defaults to clear color, fully transparent.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// The background color of the button while pressed.
/// Defaults to a light grey color.
@property (nonatomic, strong) UIColor * _Nonnull highlightedBackgroundColor;
/// The default action button style. Use for confirmative actions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIDialogButtonStyle * _Nonnull defaultStyle;)
+ (SBSDKUIDialogButtonStyle * _Nonnull)defaultStyle SWIFT_WARN_UNUSED_RESULT;
/// The cancel action button style. Use for cancel actions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIDialogButtonStyle * _Nonnull cancelStyle;)
+ (SBSDKUIDialogButtonStyle * _Nonnull)cancelStyle SWIFT_WARN_UNUSED_RESULT;
/// The destructive action button style. Use for actions that are not reversible, e.g. deletions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIDialogButtonStyle * _Nonnull destructiveStyle;)
+ (SBSDKUIDialogButtonStyle * _Nonnull)destructiveStyle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIVibrancyEffect;

/// The general style for a dialog in ScanbotSDK. Used to customize certain result dialogs in SBSDKUI components.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK18SBSDKUIDialogStyle")
@interface SBSDKUIDialogStyle : NSObject
/// The color of the screen-covering backdrop view.
/// Defaults to a very transparent <code>UIColor.black</code>.
@property (nonatomic, strong) UIColor * _Nonnull screenBackgroundColor;
/// The general background color of the actual dialog view.
/// Defaults to a very light grey with subtle transparency.
@property (nonatomic, strong) UIColor * _Nonnull dialogBackgroundColor;
/// The visual effect of the dialogs background.
/// Defaults to a system like blur with regular vibrance.
@property (nonatomic, strong) UIVibrancyEffect * _Nonnull dialogBackgroundEffect;
/// The corner radius of the dialog.
/// Defaults to 13 points.
@property (nonatomic) CGFloat cornerRadius;
/// The color of the dialogs title.
/// Defaults to <code>UIColor.black</code>.
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
/// The font of the dialogs title.
/// Defaults to System font Bold 17.0.
@property (nonatomic, strong) UIFont * _Nonnull titleFont;
/// The color of the dialogs message.
/// Defaults to <code>UIColor.black</code>.
@property (nonatomic, strong) UIColor * _Nonnull messageColor;
/// The font of the dialogs message.
/// Defaults to System font Regular 13.0.
@property (nonatomic, strong) UIFont * _Nonnull messageFont;
/// The color of the separators around the dialogs button area.
/// Defaults to a light grey with a small amount of transparency.
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
/// The width of the separators in points.
/// Defaults to 0.5 points.
@property (nonatomic) CGFloat separatorWidth;
/// The default style that mimics an iOS <code>UIAlertController</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIDialogStyle * _Nonnull defaultStyle;)
+ (SBSDKUIDialogStyle * _Nonnull)defaultStyle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Configuration for the user interface of camera based view controllers.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK34SBSDKUIEnableCameraUIConfiguration")
@interface SBSDKUIEnableCameraUIConfiguration : NSObject
/// The color of the <code>Enable Camera</code> button. Defaults to white.
@property (nonatomic, strong) UIColor * _Nonnull enableCameraButtonColor;
/// The color of the description text and icon in the <code>enable camera view</code>. Defaults to semitransparent white.
@property (nonatomic, strong) UIColor * _Nonnull enableCameraDescriptionColor;
/// The background color of the <code>enable camera view</code>. Defaults to black.
@property (nonatomic, strong) UIColor * _Nonnull enableCameraBackgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImageView;

SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK33SBSDKUIEnableCameraViewController")
@interface SBSDKUIEnableCameraViewController : UIViewController
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified enableCameraButton;
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified enableCameraDescriptionLabel;
@property (nonatomic, strong) IBOutlet UIImageView * _Null_unspecified enableCameraImageView;
+ (SBSDKUIEnableCameraViewController * _Nonnull)make SWIFT_WARN_UNUSED_RESULT;
- (IBAction)enableCameraTapped:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// Enumeration of video preview content mode.
typedef SWIFT_ENUM(NSInteger, SBSDKVideoContentMode, open) {
/// The video layers content is filled into the video layer.
/// No visible borders. Video may be cropped to the visible screen area.
  SBSDKVideoContentModeFillIn = 0,
/// The video layers content is fit into the video layer.
/// Video may have visible borders. Video is fully visible within the screen.
  SBSDKVideoContentModeFitIn = 1,
};

/// An enum describing how images can be flipped.
typedef SWIFT_ENUM(NSInteger, SBSDKVideoFlipMode, open) {
/// Do not flip the image.
  SBSDKVideoFlipModeNone = 0,
/// Flip the image horizontally.
  SBSDKVideoFlipModeHorizontal = 1,
/// Flip the image vertically.
  SBSDKVideoFlipModeVertical = 2,
/// Flip the image both, horizontally and vertically.
  SBSDKVideoFlipModeBoth = 3,
};

/// An enum describing the resolution of a video or camera stream.
typedef SWIFT_ENUM(NSInteger, SBSDKVideoFrameResolution, open) {
/// Select the video resolution automatically based on device specifics.
  SBSDKVideoFrameResolutionAuto = 0,
/// Select a full HD (1920x1080) video resolution.
  SBSDKVideoFrameResolutionFullHD = 1,
/// Select a 4k UHD (3840x2160) video resolution.
  SBSDKVideoFrameResolutionUHD = 2,
};


/// Helper class to define a range for zooming.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK14SBSDKZoomRange")
@interface SBSDKZoomRange : NSObject
/// The minimum zoom scale.
/// Defaults to 1.0.
@property (nonatomic, readonly) CGFloat minZoom;
/// The maximum zoom scale.
/// Defaults to 12.0.
@property (nonatomic, readonly) CGFloat maxZoom;
/// Designated initializer.
/// \param minZoom The minimum zoom scale.
///
/// \param maxZoom The maximum zoom scale.
///
- (nonnull instancetype)initWithMinZoom:(CGFloat)minZoom andMaxZoom:(CGFloat)maxZoom OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A scrollable and zoomable <code>UIScrollView</code> subclass that displays images and an overlay view.
/// Zooming and scrolling can be controlled using the standard UIScrollView properties.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKZoomingImageScrollView")
@interface SBSDKZoomingImageScrollView : UIScrollView
/// The image to be displayed. Can be zoomed and scrolled. If the image is zoomed out, it will be automatically centred.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The margins of the displayed image to the bounds of the receiver. Defaults to (20.0, 20.0, 20.0, 20.0).
@property (nonatomic) UIEdgeInsets margins;
/// Pass a transparent view here to display it as a HUD style view above the image view.
/// If set, it will automatically be laid out to match the frame of the image view.
/// Defaults to <code>nil</code>.
@property (nonatomic, strong) UIView * _Nullable overlayView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


@interface SBSDKZoomingImageScrollView (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
@end

@class UIApplication;
@class ScanbotSDKConfiguration;

/// Main class of Scanbot SDK. Lets you install the license and allows basic configuration.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK7Scanbot")
@interface Scanbot : NSObject
/// Enables or disables the Scanbot logging. If enabled Scanbot logs various warnings, errors and info to the console.
/// By default logging is off.
/// \param enabled <code>True</code>, if Scanbot should log, <code>False</code> otherwise.
///
+ (void)setLoggingEnabled:(BOOL)enabled;
/// Enables or disables the Scanbot SDK license logging.
/// If enabled Scanbot SDK logs information about the license to the console.
/// By default license logging is on.
/// \param enabled <code>True</code>, if Scanbot SDK should log the license, <code>False</code> otherwise.
///
+ (void)setLicenseLoggingEnabled:(BOOL)enabled;
/// Checks the active license.
///
/// returns:
/// <code>True</code>, if a valid license is installed and not expired or if the trial period is running. <code>False</code> otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLicenseValid;)
+ (BOOL)isLicenseValid SWIFT_WARN_UNUSED_RESULT;
/// The current license status.
///
/// returns:
/// The status of the currently set license.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum SBSDKLicenseStatus licenseStatus;)
+ (enum SBSDKLicenseStatus)licenseStatus SWIFT_WARN_UNUSED_RESULT;
/// The expiration date for license.
/// Returns <code>nil</code>, if there is no expiration date - for example if the license is invalid or not set.
///
/// returns:
/// Date of license expiration.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDate * _Nullable licenseExpirationDate;)
+ (NSDate * _Nullable)licenseExpirationDate SWIFT_WARN_UNUSED_RESULT;
/// The default license failure handler.
///
/// returns:
/// The default license failure handler.
+ (void (^ _Nonnull)(enum SBSDKLicenseStatus, enum SBSDKFeature, NSString * _Nullable))defaultLicenseFailureHandler SWIFT_WARN_UNUSED_RESULT;
/// Sets up the default license failure handler which is being called when the license or trial time expired.
/// The default handler shows an alert to inform your users about the expired license or trial period.
+ (void)setupDefaultLicenseFailureHandler;
/// Sets up the default license failure handler which is being called when the license or trial time expired.
/// The default handler shows an alert to inform your users about the expired license or trial period.
/// \param completion An optional block being executed after the user pressed the OK-button in the alert.
///
+ (void)setupDefaultLicenseFailureHandlerWithCompletion:(void (^ _Nullable)(void))completion;
/// Sets a closure to handle license failures, such as expiration or invalid licenses.
/// When a license failure occurs, this closure is called, allowing you to perform actions
/// such as displaying an alert to inform users about the issue and potentially terminating the app.
/// <blockquote>
/// Warning: After a license failure, none of the SDK classes and functions will return
/// meaningful results.
///
/// </blockquote>
/// \param handler A closure that will be called when a license failure occurs.
/// The closure should take appropriate actions in response to the failure.
///
+ (void)setLicenseFailureHandler:(void (^ _Nullable)(enum SBSDKLicenseStatus, enum SBSDKFeature, NSString * _Nullable))handler;
/// Installs the Scanbot SDK license from a string.
/// \param licenseString The string containing the license.
///
///
/// returns:
/// <code>True</code>, if the license was installed and is active, <code>False</code> otherwise.
+ (BOOL)setLicense:(NSString * _Nonnull)licenseString;
/// Setting this value to <code>True</code> will include the default image storages in backups of the app to iCloud or iTunes.
/// The default value is <code>False</code>, meaning that default image storages are not being backed up.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL backupImageStoragesEnabled;)
+ (BOOL)backupImageStoragesEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackupImageStoragesEnabled:(BOOL)value;
/// Container for data used for testing.
/// See <code>SBSDKTestData</code> for further information.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKTestData * _Nonnull testData;)
+ (SBSDKTestData * _Nonnull)testData SWIFT_WARN_UNUSED_RESULT;
/// The bundle that ScanbotSDK searches for its additional data bundles.
/// Defaults is <code>Bundle.main</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable resourceBundle;)
+ (NSBundle * _Nullable)resourceBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setResourceBundle:(NSBundle * _Nullable)value;
/// The current UIApplication object set to the Scanbot SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIApplication * _Nonnull sharedApplication;)
+ (UIApplication * _Nonnull)sharedApplication SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedApplication:(UIApplication * _Nonnull)value;
/// Applies a configuration to the Scanbot SDK.
/// \param configuration A <code>ScanbotSDKConfiguration</code> instance containing the desired configuration settings.
///
///
/// returns:
/// A Boolean value indicating whether the configuration was successfully applied.
/// If the license is valid after applying the configuration, it returns <code>True</code>. Otherwise, it returns <code>False</code>.
+ (BOOL)applyConfiguration:(ScanbotSDKConfiguration * _Nonnull)configuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// <code>ScanbotSDKConfiguration</code> is a configuration class that allows you to customize various settings and behavior of the Scanbot SDK.
/// To configure the SDK, create an instance of this class and set the desired properties.
/// You can also use the provided class methods to create a configuration object from JSON data or a JSON file.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK23ScanbotSDKConfiguration")
@interface ScanbotSDKConfiguration : NSObject
/// A Boolean value that determines whether SDK logging is enabled. Defaults to <code>False</code>.
@property (nonatomic) BOOL loggingEnabled;
/// A string containing the license key required to use the SDK features. Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable licenseString;
/// A Boolean value that controls whether license-related logs are enabled. Defaults to <code>True</code>.
@property (nonatomic) BOOL licenseLoggingEnabled;
/// A custom handler for handling license validation failures. Defaults to a built-in handler.
@property (nonatomic, copy) void (^ _Nonnull licenseFailureHandler)(enum SBSDKLicenseStatus, enum SBSDKFeature, NSString * _Nullable);
/// The bundle from which resources like image assets are loaded. Defaults to the main bundle.
@property (nonatomic, strong) NSBundle * _Nonnull resourceBundle;
/// The shared <code>UIApplication</code> instance. Automatically set to the shared application instance if available.
@property (nonatomic, strong) UIApplication * _Nullable sharedApplication;
/// A Boolean value that determines whether the status bar is shown on scanning screens. Defaults to <code>False</code>.
@property (nonatomic) BOOL shouldShowStatusBarOnScanningScreens;
/// The default status bar style for scanning screens. Defaults to <code>.lightContent</code>.
@property (nonatomic) UIStatusBarStyle defaultStatusBarStyle;
/// The image quality used when storing images. Defaults to <code>80</code>.
@property (nonatomic) uint8_t fileStorageImageQuality;
/// The image format used when storing images. Defaults to <code>.JPEG</code>.
@property (nonatomic) enum SBSDKImageFileFormat fileStorageImageFormat;
/// The base directory for storing scanned files. Defaults to <code>nil</code>, which uses the application’s documents directory.
@property (nonatomic, copy) NSURL * _Nullable fileStorageBaseDirectory;
/// The encryption mode for stored files. Defaults to <code>.AES128</code>.
@property (nonatomic) enum SBSDKAESEncrypterMode fileEncryptionMode;
/// The password for file encryption. Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable fileEncryptionPassword;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// A default configuration instance with predefined settings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ScanbotSDKConfiguration * _Nonnull defaultConfiguration;)
+ (ScanbotSDKConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Creates a configuration object from a JSON string.
/// \param JSON A JSON string containing configuration settings in a valid JSON format.
///
///
/// returns:
/// A configured <code>ScanbotSDKConfiguration</code> instance if successful,
/// or <code>nil</code> if there was an issue parsing the JSON or creating the configuration.
+ (ScanbotSDKConfiguration * _Nullable)configurationWithJSON:(NSString * _Nonnull)JSON SWIFT_WARN_UNUSED_RESULT;
/// Creates a configuration object from a JSON file located at the specified URL.
/// \param URL The URL of the JSON file containing configuration settings.
///
///
/// returns:
/// A configured <code>ScanbotSDKConfiguration</code> instance if the JSON file is successfully loaded and parsed,
/// or <code>nil</code> if the file is not found or there was an issue with parsing.
+ (ScanbotSDKConfiguration * _Nullable)configurationWithJSONFromURL:(NSURL * _Nonnull)URL SWIFT_WARN_UNUSED_RESULT;
@end


/// Helper class to configure the properties of the ScanbotSDK RTU-UI (SBSDKUI) components.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK9ScanbotUI")
@interface ScanbotUI : NSObject
/// The SBSDKUI-component-wide encrypter for storing image data to disk. Defaults to <code>nil</code>.
/// If set to <code>nil</code> no encryption is used at all.
/// You can use the built-in encrypter <code>SBSDKAESEncrypter</code> to encrypt your sensitive image data
/// using AES128 or AES256 before storing it to disk.
/// When using encryption you still can access the unencrypted images in the image storage.
/// Of course, encrypted storages cannot be read without the proper encrypter being set here.
/// You are responsible for migrating image storages.
/// <blockquote>
/// Important: If you wish to use the ScanbotSDK RTU-UI-wide encryption setup your encrypter before using any of the ScanbotSDK RTU-UI API.
///
/// </blockquote>
/// A good place to configure it, is your <code>AppDelegate</code>’s entry point, right where the license is set.
/// Once ScanbotSDK RTU-UI API is used the storages are created and any change to the default encrypter is of no effect.
/// note:
/// For standard components, prefixed with SBSDK (without UI) the default encrypter has no effect, since there is
/// no image storage by default. You can, of course, create instances of <code>SBSDKKeyedImageStorage</code>
/// and <code>SBSDKIndexedImageStorage</code> and initialize them with an encrypter of your choice.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <SBSDKStorageCrypting> _Nullable defaultImageStoreEncrypter;)
+ (id <SBSDKStorageCrypting> _Nullable)defaultImageStoreEncrypter SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultImageStoreEncrypter:(id <SBSDKStorageCrypting> _Nullable)value;
/// The SBSDKUI-component-wide encrypter for storing PDF files to disk. Defaults to <code>nil</code>.
/// If set to <code>nil</code> no encryption is used at all.
/// You can use the built-in encrypter <code>SBSDKAESEncrypter</code> to encrypt your sensitive pdf files
/// using AES128 or AES256 before storing it to disk.
/// <blockquote>
/// Important: If you wish to use the ScanbotSDK RTU-UI-wide encryption setup your encrypter before using any of the ScanbotSDK RTU-UI API.
///
/// </blockquote>
/// A good place to configure it, is your <code>AppDelegate</code>’s entry point, right where the license is set.
/// note:
/// For standard components, prefixed with SBSDK (without UI) the default pdf encrypter has no effect.
/// Here you have to set it up for the PDF renderer individually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <SBSDKStorageCrypting> _Nullable defaultPDFEncrypter;)
+ (id <SBSDKStorageCrypting> _Nullable)defaultPDFEncrypter SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPDFEncrypter:(id <SBSDKStorageCrypting> _Nullable)value;
/// A Boolean value that determines whether the status bar is shown on scanning screens. Defaults to <code>False</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldShowStatusBarOnScanningScreens;)
+ (BOOL)shouldShowStatusBarOnScanningScreens SWIFT_WARN_UNUSED_RESULT;
+ (void)setShouldShowStatusBarOnScanningScreens:(BOOL)value;
/// The default status bar style of all ScanbotSDK RTU-UI components upon their initialization. Defaults to <code>.lightContent</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) UIStatusBarStyle defaultStatusBarStyle;)
+ (UIStatusBarStyle)defaultStatusBarStyle SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultStatusBarStyle:(UIStatusBarStyle)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








@interface UIImage (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Applies clockwise 90 degree rotations to the receiver.
/// \param times Number of 90 degree rotations to apply. Can be negative. Uses modulo arithmetics.
///
///
/// returns:
/// The rotated UIImage or <code>nil</code>, if the rotation failed.
- (UIImage * _Nullable)sbsdk_imageRotatedClockwise:(NSInteger)times SWIFT_WARN_UNUSED_RESULT;
/// Applies counter-clockwise 90 degree rotations to the receiver.
/// \param times Number of counter-clockwise 90 degree rotations to apply. Can be negative. Uses modulo arithmetics.
///
///
/// returns:
/// The rotated UIImage or <code>nil</code>, if the rotation failed.
- (UIImage * _Nullable)sbsdk_imageRotatedCounterClockwise:(NSInteger)times SWIFT_WARN_UNUSED_RESULT;
/// Applies a rotation by the specified amount of degrees to the receiver.
/// \param degrees The amount of degrees to rotate the receiver by.
///
///
/// returns:
/// The rotated <code>UIImage</code> or <code>nil</code>, if the rotation failed.
- (UIImage * _Nullable)sbsdk_imageRotatedByDegrees:(CGFloat)degrees SWIFT_WARN_UNUSED_RESULT;
/// Strips the alpha channel from the receiver.
///
/// returns:
/// The image without alpha channel or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageWithStrippedAlpha SWIFT_WARN_UNUSED_RESULT;
/// Transforms the receiver with the given transformation.
/// \param transform The transform to apply.
///
///
/// returns:
/// The transformed image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageTransformedBy:(CGAffineTransform)transform SWIFT_WARN_UNUSED_RESULT;
/// Inverts the colors of the receiver.
///
/// returns:
/// The inverted image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_invertedImage SWIFT_WARN_UNUSED_RESULT;
/// Rotates the receiver and corrects the orientation flag to <code>UIImageOrientationUp</code>.
///
/// returns:
/// The orientation fixed image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageWithNormalizedOrientation SWIFT_WARN_UNUSED_RESULT;
/// Resets the orientation flag of the receiver to <code>UIImageOrientationUp</code> without rotating the image data.
///
/// returns:
/// The image with the resetted orientation flag or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageWithFixedOrientation SWIFT_WARN_UNUSED_RESULT;
/// Non-uniformally scales the receiver to the given size.
/// \param size The new size the image should have.
///
///
/// returns:
/// The scaled image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageScaledToSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Scales down the image to fit into the given size. Does no upscaling.
/// \param size The new fit-in size of the receiver.
///
///
/// returns:
/// The resized image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_limitedToSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Returns a center-crop of the receiver with the given aspect ratio.
/// \param aspectRatio The aspect ratio that the crop should have.
///
///
/// returns:
/// The cropped image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageByCenterCroppingToAspectRatio:(SBSDKAspectRatio * _Nonnull)aspectRatio SWIFT_WARN_UNUSED_RESULT;
/// Checks, if the receiver is monochromatic (grayscale).
///
/// returns:
/// <code>True</code>, if the receiver is monochromatic, <code>False</code> otherwise.
- (BOOL)sbsdk_isMonochrome SWIFT_WARN_UNUSED_RESULT;
/// Converts the receiver to a monochromatic image with less memory usage.
///
/// returns:
/// The monochromatic image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_grayscaledImage SWIFT_WARN_UNUSED_RESULT;
/// Resets the orientation flag to <code>UIImageOrientationUp</code> without rotating the image data.
/// \param imageData The image data to reset the orientation flag on.
///
///
/// returns:
/// The image data with the resetted orientation flag or <code>nil</code> if the operation failed.
+ (NSData * _Nullable)sbsdk_imageDataWithFixedOrientation:(NSData * _Nonnull)imageData SWIFT_WARN_UNUSED_RESULT;
/// Converts a <code>CVPixelBufferRef</code> to <code>UIImage</code>.
/// \param pixelBuffer The pixel buffer to convert.
///
///
/// returns:
/// The converted image or <code>nil</code>, if the operation failed.
+ (UIImage * _Nullable)sbsdk_imageFromPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer SWIFT_WARN_UNUSED_RESULT;
/// Converts a <code>CMSampleBuffer</code> to <code>UIImage</code>.
/// \param sampleBuffer The sample buffer to convert.
///
///
/// returns:
/// The converted image or <code>nil</code>, if the operation failed.
+ (UIImage * _Nullable)sbsdk_imageFromSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer SWIFT_WARN_UNUSED_RESULT;
/// Converts a <code>CVPixelBufferRef</code> to <code>UIImage</code>.
/// \param pixelBuffer The pixel buffer to convert.
///
/// \param orientation The orientation the pixel buffer has. So the final image can be unrotated.
///
///
/// returns:
/// he converted, unrotated image or <code>nil</code>, if the operation failed.
+ (UIImage * _Nullable)sbsdk_imageFromPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer orientation:(AVCaptureVideoOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
/// Converts a <code>CMSampleBuffer</code> to <code>UIImage</code>.
/// \param sampleBuffer The sample buffer to convert.
///
/// \param orientation The orientation the pixel buffer has. So the final image can be unrotated.
///
///
/// returns:
/// he converted, unrotated image or <code>nil</code>, if the operation failed.
+ (UIImage * _Nullable)sbsdk_imageFromSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer orientation:(AVCaptureVideoOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
/// Creates an empty <code>UIImage</code> of the given size, filled with the given color.
/// \param color The fill color.
///
/// \param size The size of the image.
///
///
/// returns:
/// The empty, color-filled image or <code>nil</code> if the operation failed.
+ (UIImage * _Nullable)sbsdk_imageWithColor:(UIColor * _Nonnull)color size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@class NSLayoutConstraint;

@interface UIView (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// \param otherView The view to connect the receiver with.
///
///
/// returns:
/// An array of constraints to connect the receiver with another view.
- (NSArray<NSLayoutConstraint *> * _Nonnull)sbsdk_constraintsForAnchoringToBoundsOf:(UIView * _Nonnull)otherView SWIFT_WARN_UNUSED_RESULT;
@end





@interface UIViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Embeds a view controller as child view controller.
/// The child view controller view is added to the container view, which must be an adjacent view of the receiver’s view.
/// \param viewController The view controller to be embedded into the receiver.
///
/// \param containerView The <code>UIView</code> that holds and layouts the embedded view controller view.
///
- (void)sbsdk_attachViewController:(UIViewController * _Nonnull)viewController inView:(UIView * _Nonnull)containerView;
/// Embeds a view controller as child view controller.
/// The child view controller view is added to the view.
/// \param viewController The view controller to be embedded into the view.
///
/// \param constraints The constraints for the child viewController.
///
- (void)sbsdk_attachViewController:(UIViewController * _Nonnull)viewController withConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints;
/// Detaches a child view controller from the receiver and removes its view from the view hierarchy.
/// \param viewController The child view controller that should be removed from the receiver’s child view controller hierarchy.
///
- (void)sbsdk_detachViewController:(UIViewController * _Nonnull)viewController;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef SCANBOTBARCODESCANNERSDK_SWIFT_H
#define SCANBOTBARCODESCANNERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreMedia;
@import CoreVideo;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ScanbotBarcodeScannerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

enum SBSDKErrorCode : NSInteger;

@interface NSError (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
+ (NSError * _Nonnull)errorWithCode:(enum SBSDKErrorCode)code SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;

/// Protocol for implementing encryption and decryption of (streamed) data.
/// ScanbotSDK comes with a built-in AES encryptor that currently supports AES128 and AES256. If these algorithms
/// are not meeting your requirements you can create and use your own encryption classes in ScanbotSDKs image storages
/// by simply conforming to this protocol and implementing the two methods.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK20SBSDKStorageCrypting_")
@protocol SBSDKStorageCrypting
- (NSData * _Nonnull)encryptData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)decryptData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (BOOL)beginStreamingEncrypt SWIFT_WARN_UNUSED_RESULT;
- (BOOL)beginStreamingDecrypt SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)streamingCryptChunk:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)streamingCryptComplete SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;
enum SBSDKAESEncrypterMode : NSInteger;

/// ScanbotSDK’s default data encrypter. Provides AES128 and AES 256 encryption to your data.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK17SBSDKAESEncrypter")
@interface SBSDKAESEncrypter : NSObject <SBSDKStorageCrypting>
/// The key used for encryption and decryption of the data. It is being derived from the
/// given password, the salt and the iterations using the PBKDF2 function.
/// https://en.wikipedia.org/wiki/PBKDF2
/// For decryption you can use this key directly or generate it using salt, password and the number of iterations.
/// Readonly.
@property (nonatomic, readonly, copy) NSData * _Null_unspecified key;
/// The encryption initialization vector.
/// A fixed value that is needed for decryption on the backend side.
@property (nonatomic, readonly, copy) NSData * _Nonnull iv;
/// The salt data used to derive the encryption key from the password.
/// A fixed value that may be needed for manual decryption key derivation on the backend side.
/// Readonly.
@property (nonatomic, readonly, copy) NSData * _Nonnull salt;
/// The number of iterations used to derive the encryption key from the salt data and the password.
/// A fixed value that may be needed for manual decryption key derivation on the backend side.
/// Readonly.
@property (nonatomic, readonly) NSInteger iterations;
/// Required initializer.
/// Creates a new AES encrypter/decrypter with either AES128 or AES256 encryption.
/// The encryption/decryption key is derived from the password, the salt and the number of iterations
/// using the PBKDF2 function. See https://en.wikipedia.org/wiki/PBKDF2
/// \param password The password phrase used to encrypt or decrypt the data. See notes in class info.
///
/// \param mode The value of  <code>SBSDKAESEncrypterMode</code> that specifies the AES encryption mode to be used.
///
- (nullable instancetype)initWithPassword:(NSString * _Nonnull)password mode:(enum SBSDKAESEncrypterMode)mode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (NSData * _Nonnull)decryptData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)encryptData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (BOOL)beginStreamingEncrypt SWIFT_WARN_UNUSED_RESULT;
- (BOOL)beginStreamingDecrypt SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)streamingCryptChunk:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)streamingCryptComplete SWIFT_WARN_UNUSED_RESULT;
@end

/// An enum containing the available encryption modes for the <code>SBSDKAESEncrypter</code>.
typedef SWIFT_ENUM(NSInteger, SBSDKAESEncrypterMode, open) {
/// AES128 mode with a key length of 16 bytes. Secure and fast.
  SBSDKAESEncrypterModeAES128 = 0,
/// AES256 mode with a key length of 32 bytes. More secure, but slower.
  SBSDKAESEncrypterModeAES256 = 1,
};

/// An enum describing the current state of the app.
typedef SWIFT_ENUM(NSInteger, SBSDKApplicationState, open) {
/// The app is active and in foreground.
  SBSDKApplicationStateActive = 0,
/// The app is inactive and in background.
  SBSDKApplicationStateInactive = 1,
/// The app is in background.
  SBSDKApplicationStateBackground = 2,
};


/// A class that describes an aspect ratio for a document page.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK16SBSDKAspectRatio")
@interface SBSDKAspectRatio : NSObject
/// The width of the document page. Unit independent
@property (nonatomic, readonly) double width;
/// The height of the document page. Unit independent.
@property (nonatomic, readonly) double height;
/// The aspect ratio of the receiver expressed as a <code>Double</code> value of width divided by height.
@property (nonatomic, readonly) double ratio;
/// Designated initializer.
/// \param width The width of the document page.
///
/// \param height The height of the document page.
///
- (nonnull instancetype)initWithWidth:(double)width andHeight:(double)height OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end

/// The format of the australia post code. Can be <code>numeric</code> or <code>alphanumeric</code>.
/// Only relevant for format codes 59 and 62.
typedef SWIFT_ENUM(NSInteger, SBSDKAustraliaPostCustomerFormat, open) {
/// The numeric format.
  SBSDKAustraliaPostCustomerFormatNumeric = 1,
/// The alphanumeric format.
  SBSDKAustraliaPostCustomerFormatAlphanumeric = 2,
};

enum SBSDKBarcodeMSIPlesseyChecksumAlgorithm : NSInteger;
enum SBSDKGS1Handling : NSInteger;

/// A class that contains additional parameters for barcodes detection and filtering.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK32SBSDKBarcodeAdditionalParameters")
@interface SBSDKBarcodeAdditionalParameters : NSObject
/// Minimum required text length of the detected barcode.
/// Defaults to 0.
/// note:
/// Currently works for ITF and MSI Plessey barcodes only!
@property (nonatomic) NSUInteger minimumTextLength;
/// Maximum text length of the detected barcode. Setting to zero removes the limit.
/// Defaults to 0.
/// note:
/// Currently works for ITF and MSI Plessey barcodes only!
@property (nonatomic) NSUInteger maximumTextLength;
/// Minimum required quiet zone on the barcode. Measured in modules (the size of minimal bar on the barcode).
/// Defaults to 10.
/// NOTE: Currently works for ITF and MSI Plessey barcodes only!
@property (nonatomic) NSUInteger minimum1DBarcodesQuietZone;
/// The checksum algorithm for MSI Plessey barcodes.
/// Defaults to <code>SBSDKBarcodeMSIPlesseyChecksumAlgorithm/mod10</code>.
@property (nonatomic) enum SBSDKBarcodeMSIPlesseyChecksumAlgorithm msiPlesseyChecksumAlgorithm;
/// The australia post customer format.
/// Defaults to <code>SBSDKAustraliaPostCustomerFormat/alphanumeric</code>.
@property (nonatomic) enum SBSDKAustraliaPostCustomerFormat australiaPostCustomerFormat;
/// With this option enabled, the scanner removes checks digits for UPC, EAN and MSI Plessey codes.
/// Has no effect if both single and double digit MSI Plessey checksums are enabled.
/// Defaults to <code>False</code>.
@property (nonatomic) BOOL stripCheckDigits;
/// If <code>True</code>, the optional check digit for IATA2OF5 codes is used in validation. Defaults to <code>True</code>.
@property (nonatomic) BOOL useIATA2OF5Checksum;
/// If <code>True</code>, the optional check digit for Code11 codes is used in validation. Defaults to <code>True</code>.
@property (nonatomic) BOOL useCode11Checksum;
/// Defines how GS1-formatted barcodes are handled.
/// Defaults to <code>SBSDKGS1Handling/parse</code>.
@property (nonatomic) enum SBSDKGS1Handling gs1Handling;
/// Adds an additional quiet zone around the source image.
/// Defaults to ‘false’.
@property (nonatomic) BOOL addAdditionalQuietZone;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The barcode dialog text format.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeDialogFormat, open) {
/// Shows the barcode value only.
  SBSDKBarcodeDialogFormatCode = 0,
/// Shows the barcode type and value.
  SBSDKBarcodeDialogFormatTypeAndCode = 1,
};

@class SBSDKGenericDocument;

/// Base class for strongly-typed <code>SBSDKGenericDocument</code> wrappers.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKGenericDocumentWrapper")
@interface SBSDKGenericDocumentWrapper : NSObject
/// The required type of the wrapped document. <code>nil</code> if this wrapper can wrap more than one type of document.
@property (nonatomic, readonly, copy) NSString * _Nullable requiredDocumentType;
/// The wrapped generic document.
@property (nonatomic, readonly, strong) SBSDKGenericDocument * _Nonnull document;
/// Initializes a new wrapper of the given document.
/// note:
/// Returns <code>nil</code> if <code>SBSDKGenericDocumentWrapper/requiredDocumentType</code> is not <code>nil</code> and is not equal to the document’s type name.
/// \param document The wrapped document.
///
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBSDKGenericDocumentField;
@class SBSDKBarcodeDocumentAAMVATitleData;
@class SBSDKBarcodeDocumentAAMVARegistrationData;
@class SBSDKBarcodeDocumentAAMVAMotorCarrierData;
@class SBSDKBarcodeDocumentAAMVARegistrantAndVehicleData;
@class SBSDKBarcodeDocumentAAMVAVehicleOwnerData;
@class SBSDKBarcodeDocumentAAMVAVehicleData;
@class SBSDKBarcodeDocumentAAMVAVehicleSafetyInspectionData;
@class SBSDKBarcodeDocumentAAMVADLID;
@class SBSDKBarcodeDocumentAAMVARawDocument;

/// AAMVA.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK25SBSDKBarcodeDocumentAAMVA")
@interface SBSDKBarcodeDocumentAAMVA : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Issuer Identification Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable issuerIdentificationNumber;
/// Jurisdiction Version Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionVersionNumber;
/// Version.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable version;
/// TitleData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVATitleData * _Nullable titleData;
/// RegistrationData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVARegistrationData * _Nullable registrationData;
/// MotorCarrierData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVAMotorCarrierData * _Nullable motorCarrierData;
/// RegistrantAndVehicleData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVARegistrantAndVehicleData * _Nullable registrantAndVehicleData;
/// VehicleOwnerData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVAVehicleOwnerData * _Nullable vehicleOwnerData;
/// VehicleData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVAVehicleData * _Nullable vehicleData;
/// VehicleSafetyInspectionData.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVAVehicleSafetyInspectionData * _Nullable vehicleSafetyInspectionData;
/// DriverLicense.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVADLID * _Nullable driverLicense;
/// IDCard.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVADLID * _Nullable idCard;
/// EnhancedDriverLicense.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVADLID * _Nullable enhancedDriverLicense;
/// RawDocument.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentAAMVARawDocument * _Nullable rawDocument;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Driver License Or ID Document.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK29SBSDKBarcodeDocumentAAMVADLID")
@interface SBSDKBarcodeDocumentAAMVADLID : SBSDKGenericDocumentWrapper
/// Data element ID “DAI”. City portion of the cardholder address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressCity;
/// Data element ID “DAJ”. State portion of the cardholder address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressJurisdictionCode;
/// Data element ID “DAK”. Postal code portion of the cardholder address in the U.S. and Canada. If the trailing portion of the postal code in the U.S. is not known, zeros will be used to fill the trailing set of numbers up to nine (9) digits.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressPostalCode;
/// Data element ID “DAG”. Street portion of the cardholder address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressStreet1;
/// Data element ID “DAH”. Second line of street portion of the cardholder address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressStreet2;
/// Data element ID “DCJ”. A string of letters and/or numbers that identifies when, where, and by whom a driver license/ID card was made. If audit information is not used on the card or the MRT, it must be included in the driver record.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable adultInformation;
/// Data element ID “DBN”. Other family name by which cardholder is known.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable aliasFamilyName;
/// Data element ID “DBG”. Other given name by which cardholder is known.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable aliasGivenName;
/// Data element ID “DBQ”. Other middle name by which cardholder is known.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable aliasMiddleName;
/// Data element ID “DBR”. Other prefix by which cardholder is known.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable aliasPrefixName;
/// Data element ID “DBS”. Other suffix by which cardholder is known.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable aliasSuffixName;
/// Data element ID “DDB”. DHS required field that indicates date of the most recent version change or modification to the visible format of the DL/ID. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable cardRevisionDate;
/// Data element ID “DDA”. DHS required field that indicates compliance: “F” = compliant; and, “N” = non-compliant.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable complianceType;
/// Data element ID “DCG”. Country in which DL/ID is issued. U.S. = USA, Canada = CAN.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable countryIdentification;
/// Data element ID “DCS”. Family name of the cardholder. (Family name is sometimes also called “last name” or “surname.”) Collect full name for record, print as many characters as possible on portrait side of DL/ID.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable customerFamilyName;
/// Data element ID “DAC”. First name of the cardholder.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable customerFirstName;
/// Data element ID “DCT”. Given names of the cardholder. (Given names include all names other than the Family Name. This includes all those names sometimes also called “first” and “middle” names.)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable customerGivenNames;
/// Data element ID “DAQ”. The number assigned or calculated by the issuing authority.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable customerIdNumber;
/// Data element ID “DAD”. Middle name(s) of the cardholder. In the case of multiple middle names they shall be separated by a comma “,”.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable customerMiddleName;
/// Data element ID “DBB”. Date on which the cardholder was born. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateOfBirth;
/// Data element ID “DCF”. Number must uniquely identify a particular document issued to that customer from others that may have been issued in the past. This number may serve multiple purposes of document discrimination, audit information number, and/or inventory control.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentDiscriminator;
/// Data element ID “DBA”. Date on which the driving and identification privileges granted by the document are no longer valid. The format is ISO8601 with delimtiers.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentExpirationDate;
/// Data element ID “DBD”. Date on which the document was issued. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentIssueDate;
/// Data element ID “DBL”. Alternative dates given as date of birth.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverAliasDateOfBirthField;
/// Data element ID “DBP”. Alternative fist name or given name of the individual holding the Driver License or ID. Hyphenated names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverAliasFirstName;
/// Data element ID “DBO”. Alternative last name or surname of the individual holding the Driver License or ID. Hyphenated names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverAliasLastName;
/// Data element ID “DBM”. DriverAliasSocialSecurityNumber.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverAliasSocialSecurityNumber;
/// Data element ID “DAB”. Last name or surname of the individual holding the Driver License or ID. Hyphenated names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverLastName;
/// Data element ID “DAR”. A=Class A; B=Class B; C=Class C (Class A, B and C are defined by Federal Highway regulations); M=Class M motorcycle as defined by AAMVA; others are defined by DL Classification Code Standards.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverLicenseClassificationCode;
/// Data element ID “DAT”. Any endorsements on a driver license which authorize the operation of specified types of vehicles or the operation of vehicles carrying specified loads. Endorsements shall be specific to classification of a driver license.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverLicenseEndorsementsCode;
/// Data element ID “DAA”. Name of the individual holding the Driver License or ID as defined in ANSI D20 Data Dictionary. (Lastname@Firstname@MI@ suffix if any) (Machine, Mag Stripe uses ‘$’ and Bar Code uses ‘,’ in place of ‘@’) Firstname, Middle Initial, Lastname (Human)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverLicenseName;
/// Data element ID “DAS”. A restriction applicable to a driver license.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverLicenseRestrictionCode;
/// Data element ID “DAF”. Prefix to Driver Name. Not defined in ANSI D20. Freeform as defined by issuing jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverNamePrefix;
/// Data element ID “DAE”. An affix occurring at the end of a word, e.g.; Sr., Jr., II, III, IV, etc.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverNameSuffix;
/// Data element ID “PAA”. Identifies the type of permit as defined by ANSI D20.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverPermitClassificationCode;
/// Data element ID “PAF”. Permit endorsements as defined by ANSI D20.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverPermitEndorsementCode;
/// Data element ID “PAD”.  Date permit was issued. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverPermitIssueDate;
/// Data element ID “PAE”. Permit restrictions as defined by ANSI D20.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverPermitRestrictionCode;
/// Data element ID “DAN”. Name of city for mailing address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverResidenceCity;
/// Data element ID “DAO”. Jurisdiction code for mailing address. Conforms to Canadian, Mexican and US Jurisdictions as appropriate. Codes for provinces (Canada) and states (US and Mexico).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverResidenceJurisdictionCode;
/// Data element ID “DAP”. Postal code of residence.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverResidencePostalCode;
/// Data element ID “DAL”. Street address line 1 (mailing).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverResidenceStreetAddress1;
/// Data element ID “DAM”. Street address line 2 (mailing).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable driverResidenceStreetAddress2;
/// Data element ID “DDE”. A code that indicates whether a field has been truncated (T), has not been truncated (N), or – unknown whether truncated (U).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable familyNameTruncation;
/// Data element ID “DCH”. Federal Commercial Vehicle Codes.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable federalCommercialVehicleCodes;
/// Data element ID “DDF”. A code that indicates whether a field has been truncated (T), has not been truncated (N), or – unknown whether truncated (U).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstNameTruncation;
/// Data element ID “DDC”. Date on which the hazardous material endorsement granted by the document is no longer valid. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable hazmatEndorsementExpirationDate;
/// Data element ID “DAZ”. Color of cardholder’s hair. ANSI D-20 codes converted to human readable format according to the ANSI D20 Data Dictionary.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable hairColor;
/// Data element ID “DAV”. Height in centimeters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable height;
/// Data element ID “DCK”. A string of letters and/or numbers that is affixed to the raw materials (card stock, laminate, etc.) used in producing driver licenses and ID cards. (DHS recommended field).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inventoryControlNumber;
/// Data element ID “DBE”. A string used by some jurisdictions to validate the document against their data base.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable issueTimeStamp;
/// Data element ID “DCQ”. Text that explains the jurisdiction-specific code(s) that indicates additional driving privileges granted to the cardholder beyond the vehicle class.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificEndorsementCodeDescription;
/// Data element ID “DCD”. Jurisdiction-specific codes that represent additional privileges granted to the cardholder beyond the vehicle class (such as transportation of passengers, hazardous materials, operation of motorcycles, etc.).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificEndorsementCodes;
/// Data element ID “DCR”. Text describing the jurisdiction-specific restriction code(s) that curtail driving privileges.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificRestrictionCodeDescription;
/// Data element ID “DCB”. Jurisdiction-specific codes that represent restrictions to driving privileges (such as airbrakes, automatic transmission, daylight only, etc.).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificRestrictionCodes;
/// Data element ID “DCA”. Jurisdiction-specific vehicle class / group code, designating the type of vehicle the cardholder has privilege to drive.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificVehicleClass;
/// Data element ID “DCP”. Text that explains the jurisdiction-specific code(s) for classifications of vehicles cardholder is authorized to drive.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdictionSpecificVehicleClassificationDescription;
/// Data element ID “DDD”. DHS required field that indicates that the cardholder has temporary lawful status = “1”.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable limitedDurationDocumentIndicator;
/// Data element ID “DDG”. A code that indicates whether a field has been truncated (T), has not been truncated (N), or – unknown whether truncated (U).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable middleNameTruncation;
/// Data element ID “DCU”. Name Suffix (If jurisdiction participates in systems requiring name suffix (PDPS, CDLIS, etc.), the suffix must be collected and displayed on the DL/ID and in the MRT). Collect full name for record, print as many characters as possible on portrait side of DL/ID. JR (Junior), SR (Senior), 1ST or I (First), 2ND or II (Second),  3RD or III (Third),  4TH or IV (Fourth), 5TH or V (Fifth), 6TH or VI (Sixth), 7TH or VII (Seventh), 8TH or VIII (Eighth), 9TH or IX (Ninth).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable nameSuffix;
/// Data element ID “DBI”. “Y”; Used by some jurisdictions to indicate holder of the document is a non-resident.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable nonResidentIndicator;
/// Data element ID “DBF”. Number of duplicate cards issued for a license or ID if any.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfDuplicates;
/// Data element ID “DBH”. Organ Donor.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable organDonor;
/// Data element ID “DDK”. Field that indicates that the cardholder is an organ donor = “1”.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable organDonorIndicator;
/// Data element ID “PAB”. Date permit expires, The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable permitExpirationDate;
/// Data element ID “PAC”. Type of permit.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable permitIdentifier;
/// Data element ID “DAY”. Color of cardholder’s eyes. ANSI D-20 codes converted to human readable format according to the ANSI D20 Data Dictionary.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable physicalDescriptionEyeColor;
/// Data element ID “DAU”. Height of cardholder. Inches (in): number of inches followed by “ in” or Centimeters (cm): number of centimeters followed by “ cm.”
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable physicalDescriptionHeight;
/// Data element ID “DBC”. Gender of the cardholder. “Male” or “Female”.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable physicalDescriptionSex;
/// Data element ID “DCE”. Indicates the approximate weight range of the cardholder: 0 = up to 31 kg (up to 70 lbs), 1 = 32 – 45 kg (71 – 100 lbs), 2 = 46 - 59 kg (101 – 130 lbs), 3 = 60 - 70 kg (131 – 160 lbs), 4 = 71 - 86 kg (161 – 190 lbs), 5 = 87 - 100 kg (191 – 220 lbs), 6 = 101 - 113 kg (221 – 250 lbs), 7 = 114 - 127 kg (251 – 280 lbs), 8 = 128 – 145 kg (281 – 320 lbs), 9 = 146+ kg (321+ lbs).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable physicalDescriptionWeightRange;
/// Data element ID “DCI”. Country and municipality and/or state/province.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable placeOfBirth;
/// Data element ID “DCL”. Codes for race or ethnicity of the cardholder. ANSI D-20 codes converted to human readable format according to the ANSI D20 Data Dictionary.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable raceEthnicity;
/// Data element ID “DBK”. The number assigned to an individual by the Social Security Administration.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable socialSecurityNumber;
/// Data element ID “DCN”. Standard endorsement code(s) for cardholder. See codes in D20. This data element is a placeholder for future efforts to standardize endorsement codes.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable standardEndorsementCode;
/// Data element ID “DCO”. Standard restriction code(s) for cardholder. See codes in D20. This data element is a placeholder for future efforts to standardize restriction codes.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable standardRestrictionCode;
/// Data element ID “DCM”. Standard vehicle classification code(s) for cardholder. This data element is a placeholder for future efforts to standardize vehicle classifications.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable standardVehicleClassification;
/// Data element ID “DDH”. Date on which the cardholder turns 18 years old. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable under18Until;
/// Data element ID “DDI”. Date on which the cardholder turns 19 years old. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable under19Until;
/// Data element ID “DDJ”. Date on which the cardholder turns 21 years old. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable under21Until;
/// Data element ID “DBJ”. A number or alphanumeric string used by some jurisdictions to identify a “customer” across multiple data bases.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable uniqueCustomerIdentifier;
/// Data element ID “DDL”. Field that indicates that the cardholder is a veteran = “1”.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable veteranIndicator;
/// Data element ID “DAX”. Cardholder weight in kilograms Ex. 84 kg = “084”
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable weightKilograms;
/// Data element ID “DAW”. Cardholder weight in pounds Ex. 185 lb = “185”
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable weightPounds;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Motor Carrier Data. File type “MC”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK41SBSDKBarcodeDocumentAAMVAMotorCarrierData")
@interface SBSDKBarcodeDocumentAAMVAMotorCarrierData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “MAA”. The name of the carrier responsible for safety. This can be an individual, partnership or corporation responsible for the transportation of persons or property. This is the name that is recognized by law.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable carrierName;
/// Data element ID “MAL”. This is the city for the mailing address of the individual carrier. This information is utilized by the base jurisdiction to send information to the carrier that purchased the IRP credentials.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable city;
/// Data element ID “MAI”. This is the jurisdiction of the residential address of the individual carrier. This information is utilized by the base jurisdiction to send information to the carrier that purchased the IRP credentials.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdiction;
/// Data element ID “MAK”. This is the mailing address of the individual carrier. This information is utilized by the base jurisdiction to send information to the carrier that purchased the IRP credentials.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable streetAddress;
/// Data element ID “MAN”. A unique identifier assigned to the carrier responsible for safety issued by the U.S. Department of Transportation – Federal Motor Carrier Safety Administration.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable usdotNumber;
/// Data element ID “MAO”. The ZIP or Postal code of the resident address of the vehicle owner.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable zip;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// The raw document as was parsed from the barcode. The original field key names and field values as they appear in the barcode are left as-is. The mnemonic field keys from the AAMVA specification are not replaced with human-readable names. No field value normalization, like ISO 8601 date reformatting, etc., is done.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKBarcodeDocumentAAMVARawDocument")
@interface SBSDKBarcodeDocumentAAMVARawDocument : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Registrant And Vehicle Data. File type “IR”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK49SBSDKBarcodeDocumentAAMVARegistrantAndVehicleData")
@interface SBSDKBarcodeDocumentAAMVARegistrantAndVehicleData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “RBI”. The first line of the registrant’s residence address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable address;
/// Data element ID “RAU”. The declared base jurisdiction registration weight.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable baseJurisdictionRegisteredWeight;
/// Data element ID “RBC”. The name of the first registrant of a vehicle. Registrant’s name may be a combined individual name or the name of a business.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable carrierNameRegistrant;
/// Data element ID “RBK”. The registrant’s residence city name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable city;
/// Data element ID “VAT”. The unladen weight of the vehicle (e.g., single-unit truck, truck combination) plus the weight of the maximum load for which vehicle registration fees have been paid within a particular jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable grossVehicleWeight;
/// Data element ID “RBL”. The state or province of the registrant’s residence address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable jurisdiction;
/// Data element ID “VAL”. The year which is assigned to a vehicle by the manufacturer. The format is YY.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable modelYear;
/// Data element IDs “RAP”, “VBC”. The seat capacity of a commercial vehicle designed for transportation of more than then passengers. The number of common axles of rotation of one or more wheels of a vehicle, whether power design or freely rotating.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfSeats;
/// Data element ID “RAD”. The number assigned to the registration decal in those jurisdictions that issue decals.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationDecalNumber;
/// Data element ID “RAF”. The registration enforcement date is the date that the current registration was enforced. This may or may not be the original registration date. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationEnforcementDate;
/// Data element ID “RAG”. The date in which the registration expired. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationExpirationDate;
/// Data element ID “IFJ”. The date in which the registration was issued. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationIssueDate;
/// Data element ID “RAM”. The characters assigned to a registration plate or tag affixed to the vehicle, assigned by the jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationPlateNumber;
/// Data element ID “RBT”. This field is the registration year assigned by the jurisdiction. The format is CCYY.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationYear;
/// Data element ID “VBB”. The type of vehicle operated for the transportation of persons or property in the furtherance of any commercial or industrial enterprise, for hire or not for hire. Not all states will use all values.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable typeOfVehicle;
/// Data element ID “IEG”. A number, assigned by the registrant of the commercial vehicle or trailer, to identify the vehicle or trailer in the fleet. No two units in a fleet can have the same number. A.K.A vehicle unit number or owner’s equipment number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable unitNumber;
/// Data element ID “VAD”. A unique combination of alphanumeric characters that identifies a specific vehicle or component. The VIN is affixed to the vehicle in specific locations and formulated by the manufacturer. State agencies under some controlled instances may assign a VIN to a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleIdentificationNumber;
/// Data element ID “VAK”. The distinctive (coded) name applied to a group of vehicles by a manufacturer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleMake;
/// Data element ID “RBM”. The ZIP or Postal code of the resident address of the registrant.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable zipCode;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Registration Data. File type “RG”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK41SBSDKBarcodeDocumentAAMVARegistrationData")
@interface SBSDKBarcodeDocumentAAMVARegistrationData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “RBK”. City portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressCity;
/// Data element ID “RBL”. Jurisdiction portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressJurisdictionCode;
/// Data element ID “RBI”. Street portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressStreet;
/// Data element ID “RBM”. The Zip code or Postal code of the vehicle owner’s residence address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressZipCode;
/// Data element ID “VBC”. The number of common axles of rotation of one or more wheels of a vehicle, whether power driven or freely rotating.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable axles;
/// Data element ID “BBC”. The business name of the first registrant of a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable businessName;
/// Data element ID “FUL”. The type of fuel used by the vehicle. In most cases, the fuel type would be diesel.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable fuel;
/// Data element ID “VAT”. The unladen weight of the vehicle (e.g., the single-unit truck, truck combination) plus the weight of the load being carried at a specific point in time.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable grossVehicleWeight;
/// Data element ID “RBD”. Family name (commonly called surname or last name) of the registered owner of a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrantFamilyName;
/// Data element ID “RBE”. Given name or names (includes all of what are commonly referred to as first and middle names) of the registered owner of a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrantGivenName;
/// Data element ID “RAG”. The date in which the registration expired. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationExpiryDate;
/// Data element ID “RBB”. The date in which the registration was issued. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationIssueDate;
/// Data element ID “RAM”. The characters assigned to a registration plate or tag affixed to the vehicle, assigned by the jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationPlateNumber;
/// Data element ID “RBU”. A unique number printed on the tab/decal and stored as part of the registration record.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationWindowStickerDecal;
/// Data element ID “RBT”. The year of registration.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable registrationYear;
/// Data element ID “VAO”. The general configuration or shape of a vehicle distinguished by characteristics such as number of doors, seats, windows, roofline, and type of top. The vehicle body type is 2-character alphanumeric.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleBodyStyle;
/// Data element ID “VBD”. Where the vehicle is one color, this is the appropriate code describing that color. When the vehicle is two colors, this is the code for the top-most or front-most color.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleColor;
/// Data element ID “VAD”. A unique combination of alphanumeric characters that identifies a specific vehicle or component. The VIN is affixed to the vehicle in specific locations and formulated by the manufacturer. State agencies under some controlled instances my assign a VIN to a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleIdentificationNumber;
/// Data element ID “VAK”. The distinctive (coded) name applied to a group of vehicles by a manufacturer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleMake;
/// Data element ID “VAM”. A code denoting a family of vehicles (within a make), which has a degree of similarity in construction, such as body, chassis, etc. The field does not necessarily contain a standard code; it may contain a value provided by the originator of the field.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModel;
/// Data element ID “VAL”. The year which is assigned to a vehicle by the manufacturer. The format is CCYY.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModelYear;
/// Data element ID “VPC”. Indicates the use of the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleUse;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Title Data. File type “TD”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK34SBSDKBarcodeDocumentAAMVATitleData")
@interface SBSDKBarcodeDocumentAAMVATitleData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “NAT”. City portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressCity;
/// Data element ID “NAU”. Jurisdiction portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressJurisdictionCode;
/// Data element ID “NAR”. Street portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressStreet;
/// Data element ID “NAV”. The ZIP code or Postal code portion of the owner’s address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable addressZipCode;
/// Data element ID “BBC”. The name of business that owns the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable businessName;
/// Data element ID “NAA”. Family name (commonly called surname or last name) of the owner of the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable familyName;
/// Data element ID “LAF”. A code that uniquely identifies the first holder of a lien.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstLienHolderId;
/// Data element ID “LAA”. Name of the first lien holder of the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstLienHolderName;
/// Data element ID “NAE”. Given name or names (includes all of what are commonly referred to as first and middle names) of the owner of the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable givenName;
/// Data element ID “TAW”. This code represents whether the vehicle/vessel is new or used. Note: jurisdictions’ definitions of these classifications may vary a little due to state regulations on demo vehicles, slates between dealers, application of state taxes, etc. N = New, U = Used.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable newUsedIndicator;
/// Data element ID “TAH”. The date the odometer reading was recorded by the jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable odometerDate;
/// Data element ID “TAG”. This is the federal odometer mileage disclosure. The mandatory information is: (1) Actual vehicle mileage; (2) Mileage exceeds mechanical limitations; (3) Not actual mileage; (4) Mileage disclosure not required.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable odometerDisclosure;
/// Data element ID “TAI”. This is the odometer reading registered with the DMV either at the time of titling or registration renewal in kilometers.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable odometerReadingKilometers;
/// Data element ID “TAF”. This is the odometer reading registered with the DMV either at the time of titling or registration renewal.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable odometerReadingMileage;
/// Data element ID “TAZ”. The title number assigned to the vehicle by the previous titling jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable previousTitleNumber;
/// Data element ID “TPJ”. The code for the jurisdiction (U.S., Canadian, or Mexican) that titled the vehicle immediately prior to the current titling jurisdiction.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable previousTitlingJurisdiction;
/// Data element ID “TAY”. Code providing information about the brand applied to the title.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable titleBrand;
/// Data element ID “TAV”. The date the jurisdiction’s titling authority issued a title to the owner of the vehicle. The format is CCYYMMDD.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable titleIssueDate;
/// Data element ID “TAA”. The date the jurisdiction’s titling authority issued a title to the owner of the vehicle. The format is CCYYMMDD.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable titleNumber;
/// Data element ID “TAC”. A unique set of alphanumeric characters assigned by the titling jurisdiction to the certificate of title of a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable titlingJurisdiction;
/// Data element ID “VAO”. The general configuration or shape of a vehicle distinguished by characteristics such as number of doors, seats, windows, roofline, and type of top. The vehicle body type is 2-character alphanumeric.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleBodyStyle;
/// Data element ID “VBD”. Where the vehicle/vessel is one color, this is the appropriate code describing that color. When the vehicle is two colors, this is the code for the top-most or front-most color.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleColor;
/// Data element ID “VAD”. A unique combination of alphanumeric characters that identifies a specific vehicle or component. The VIN is affixed to the vehicle in specific locations and formulated by the manufacturer. State agencies under some controlled instances may assign a VIN to a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleIdentificationNumber;
/// Data element ID “VAK”. The distinctive (coded) name applied to a group of vehicles by a manufacturer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleMake;
/// Data element ID “VAM”. A code denoting a family of vehicles (within a make), which has a degree of similarity in construction, such as body, chassis, etc. The field does not necessarily contain a standard code; it may contain a value provided by the originator of the field.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModel;
/// Data element ID “VAL”. The year that is assigned to a vehicle by the manufacturer. The format is CCYY.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModelYear;
/// Data element ID “TAU”. The date a vehicle was purchased by the current owner. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehiclePurchaseDate;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Vehicle Data. File type “VH”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKBarcodeDocumentAAMVAVehicleData")
@interface SBSDKBarcodeDocumentAAMVAVehicleData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “VAO”. Vehicle manufacture body style.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable bodyStyle;
/// Data element ID “VAG”. Date vehicle reported junked. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateJunked;
/// Data element ID “VAJ”. Date vehicle reported recovered. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateRecovered;
/// Data element ID “VAI”. Date vehicle reported stolen. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateStolen;
/// Data element ID “VAW”. Manufacturer’s rated engine displacement.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable engineDisplacement;
/// Data element ID “VAR”. The size of a vehicle’s engine.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable engineSize;
/// Data element ID “VAN”. Type of fuel the vehicle utilizes.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable fuelType;
/// Data element ID “VAU”. Manufacturer’s rated horsepower.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable horsepower;
/// Data element ID “VAY”. International fuel tax indicator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable iftaIndicator;
/// Data element ID “VAX”. International registration plan indicator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable irpIndicator;
/// Data element ID “VAF”. Vehicle has been junked.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable junkedIndicator;
/// Data element ID “VAE”. Manufacturer’s Suggested Retail Price. No decimal places. Right Justified Zero or space fill.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable msrp;
/// Data element ID “VAA”. State to provide definition.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable majorCode;
/// Data element ID “VAL”. Vehicle manufacture year.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable makeYear;
/// Data element ID “VAT”. Manufacturer’s gross vehicle weight rating.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable manufactureGrossWeight;
/// Data element ID “VAB”. State to provide definition.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable minorCode;
/// Data element ID “VBC”. Number of axles the vehicle has.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfAxles;
/// Data element ID “VAQ”. Number of cylinders the vehicle has.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfCylinders;
/// Data element ID “VAP”. Number of doors on the vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfDoors;
/// Data element ID “VAH”. Indicates stolen vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable stolenIndicator;
/// Data element ID “VAC”. Type of transmission the vehicle carries.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable transmissionCode;
/// Data element ID “VAV”. Gross weight of the vehicle unloaded.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable unladenWeight;
/// Data element ID “VAZ”. Vehicle license tax calculation from date of purchase.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vltClacFromDate;
/// Data element ID “VBA”. Unique number to identify the vehicle record.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleIdNumber;
/// Data element ID “VAD”. A unique combination of alphanumeric characters that identifies a specific vehicle or component. The VIN is affixed to the vehicle in specific locations and formulated by the manufacturer. State agencies under some controlled instances may assign a VIN to a vehicle.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleIdentificationNumber;
/// Data element ID “VAK”. The distinctive (coded) name applied to a group of vehicles by a manufacturer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleMake;
/// Data element ID “VAM”. Vehicle manufacture model.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModel;
/// Data element ID “VAS”. This is the status of the vehicle (e.g., active, suspend, etc.)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleStatusCode;
/// Data element ID “VBB”. EPA vehicle classification.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleTypeCode;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Vehicle Owner Data. File type “OW”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK41SBSDKBarcodeDocumentAAMVAVehicleOwnerData")
@interface SBSDKBarcodeDocumentAAMVAVehicleOwnerData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “NAX”. The unique customer number/ID of the first vehicle owner.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerIdNumber;
/// Data element ID “NAB”. Last Name or Surname of the Owner. Hyphenated names acceptable, spaces between names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerLastName;
/// Data element ID “NBA”. The legal status of the first vehicle owner. This is only used when a vehicle has multiple owners. A legal status may be (“AND”, “OR”).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerLegalStatus;
/// Data element ID “NAD”. Middle Name(s) or Initial(s) of the Owner. Hyphenated names acceptable, spaces, between names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerMiddleName;
/// Data element ID “NAC”. First Name or Given Name of the Owner. Hyphenated names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerName;
/// Data element ID “NAA”. Name of the (or one of the) individual(s) who owns the Vehicle as defined in the ANSI D- 20 Data Element Dictionary. (Lastname@Firstname@MI@Suffix if any.)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstOwnerTotalName;
/// Data element ID “NAR”. Street address line 1. (Mailing)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable mailingAddress1;
/// Data element ID “NAS”. Street address line 2. (Mailing)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable mailingAddress2;
/// Data element ID “NAT”. Name of city for mailing address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable mailingCity;
/// Data element ID “NAU”. Jurisdiction code for mailing address. Conforms to Canadian, Mexican and US jurisdictions as appropriate. Codes for provinces (Canada) and states (US and Mexico).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable mailingJurisdictionCode;
/// Data element ID “NAV”. The ZIP code or Postal code used for mailing. (As used by Canadian, Mexican and US jurisdictions.)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable mailingZipCode;
/// Data element ID “NAM”. Street address line 1. (Mailing)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable residenceAddress1;
/// Data element ID “NAN”. Street address line 2. (Mailing)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable residenceAddress2;
/// Data element ID “NAO”. Name of city for mailing address.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable residenceCity;
/// Data element ID “NAP”. Jurisdiction code for mailing address. Conforms to Canadian, Mexican and US jurisdictions as appropriate. Codes for provinces (Canada) and states (US and Mexico).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable residenceJurisdictionCode;
/// Data element ID “NAQ”. The ZIP code or Postal code used for mailing. (As used by Canadian, Mexican and US jurisdictions).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable residenceZipCode;
/// Data element ID “NAY”. The unique customer number/ID of the second vehicle owner.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerIdNumber;
/// Data element ID “NAF”. Last Name or Surname of the Owner. Hyphenated names acceptable, spaces between names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerLastName;
/// Data element ID “NBB”. The legal status of the second vehicle owner. This is only used when a vehicle has multiple owners. A legal status may be (“AND”, “OR”).
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerLegalStatus;
/// Data element ID “NAH”. Middle Name(s) or Initial(s) of the Owner. Hyphenated names acceptable, spaces between names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerMiddleName;
/// Data element ID “NAG”. First Name or Given Name of the Owner. Hyphenated names acceptable, but no other use of special symbols.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerName;
/// Data element ID “NAE”. Name of the (or one of the) individual(s) who owns the Vehicle as defined in the ANSI D- 20 Data Element Dictionary. (Lastname@Firstname@MI@Suffix if any.)
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondOwnerTotalName;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Vehicle Safety Inspection Data. File type “VS”.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK52SBSDKBarcodeDocumentAAMVAVehicleSafetyInspectionData")
@interface SBSDKBarcodeDocumentAAMVAVehicleSafetyInspectionData : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Data element ID “IAN”. The street name and number, city, state and zip code of the inspection facility.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionAddress;
/// Data element ID “IPD”. Identifies whether the pollution control devices meet the minimum inspection criteria.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionAirPollutionDeviceConditions;
/// Data element ID “IFI”. The unique number assigned to an inspection facility.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionFacilityIdentifier;
/// Data element ID “INC”. A unique number assigned to a current vehicle inspection form for identification purposes or a preprinted unique number on the motor vehicle inspection sticker currently issued to a motor vehicle which has passed inspection.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionFormOrStickerNumberCurrent;
/// Data element ID “INP”. The number of the last inspection form excluding the current inspection or the certification number of the last inspection sticker, excluding the current inspection.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionFormOrStickerNumberPrevious;
/// Data element ID “ISC”. An indicator that specifies whether or not the vehicle has a current smog certificate.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionSmogCertificateIndicator;
/// Data element ID “ISN”. Station number performing the inspection.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectionStationNumber;
/// Data element ID “IIN”. A unique number assigned to each licensed vehicle inspector.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable inspectorIdentificationNumber;
/// Data element ID “ORI”. The vehicle’s odometer reading (to the nearest mile or kilometer) at the time of inspection.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable odometerReadingAtInspection;
/// Data element ID “VAO”. The general configuration or shape of a vehicle distinguished by characteristics such as number of doors, seats, windows, roofline, and type of top. The vehicle body type is 2- character alphanumeric.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleBodyType;
/// Data element ID “VAK”. The distinctive (coded) name applied to a group of vehicles by a manufacturer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleMake;
/// Data element ID “VAL”. The year which is assigned to a vehicle by the manufacturer. The format is CCYY.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable vehicleModelYear;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentBoardingPassLeg;

/// Boarding Pass.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK32SBSDKBarcodeDocumentBoardingPass")
@interface SBSDKBarcodeDocumentBoardingPass : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Electronic Ticket.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable electronicTicket;
/// Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable name;
/// Number Of Legs.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable numberOfLegs;
/// Security Data.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable securityData;
/// Leg.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentBoardingPassLeg *> * _Nullable legs;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Leg of the journey.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK35SBSDKBarcodeDocumentBoardingPassLeg")
@interface SBSDKBarcodeDocumentBoardingPassLeg : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Airline Designator Of Boarding Pass Issuer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable airlineDesignatorOfBoardingPassIssuer;
/// Airline Numeric Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable airlineNumericCode;
/// Baggage Tag License Plate Numbers.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable baggageTagLicensePlateNumbers;
/// Check In Sequence Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable checkInSequenceNumber;
/// Compartment Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable compartmentCode;
/// Date Of Boarding Pass Issuance Julian.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateOfBoardingPassIssuanceJulian;
/// Date Of Flight Julian.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateOfFlightJulian;
/// Departure Airport Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable departureAirportCode;
/// Destination Airport Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable destinationAirportCode;
/// Document Form Serial Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentFormSerialNumber;
/// Document Type.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentType;
/// Fast Track.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable fastTrack;
/// First Non Consecutive Baggage Tag License Plate Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstNonConsecutiveBaggageTagLicensePlateNumber;
/// Flight Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable flightNumber;
/// For Individual Airline Use.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable forIndividualAirlineUse;
/// Free Baggage Allowance.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable freeBaggageAllowance;
/// Frequent Flyer Airline Designator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable frequentFlyerAirlineDesignator;
/// Frequent Flyer Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable frequentFlyerNumber;
/// IDAD Indicator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable idadIndicator;
/// International Documentation Verification.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable internationalDocumentationVerification;
/// Marketing Carrier Designator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable marketingCarrierDesignator;
/// Operating Carrier Designator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable operatingCarrierDesignator;
/// Operating Carrier PNR Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable operatingCarrierPNRCode;
/// Passenger Description.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable passengerDescription;
/// Passenger Status.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable passengerStatus;
/// Seat Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable seatNumber;
/// Second Non Consecutive Baggage Tag License Plate Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable secondNonConsecutiveBaggageTagLicensePlateNumber;
/// Selectee Indicator.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable selecteeIndicator;
/// Source Of Boarding Pass Issuance.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable sourceOfBoardingPassIssuance;
/// Source Of Check In.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable sourceOfCheckIn;
/// VersionNumber.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable versionNumber;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK29SBSDKBarcodeDocumentConstants")
@interface SBSDKBarcodeDocumentConstants : NSObject
/// Document type name of the “BoardingPass” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassDocumentType;)
+ (NSString * _Nonnull)boardingPassDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “BoardingPass.Leg” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull legDocumentType;)
+ (NSString * _Nonnull)legDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “SwissQR” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDocumentType;)
+ (NSString * _Nonnull)swissQRDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDocumentType;)
+ (NSString * _Nonnull)deMedicalPlanDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Patient” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull patientDocumentType;)
+ (NSString * _Nonnull)patientDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Doctor” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull doctorDocumentType;)
+ (NSString * _Nonnull)doctorDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Subheading” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull subheadingDocumentType;)
+ (NSString * _Nonnull)subheadingDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Subheading.Medicine” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicineDocumentType;)
+ (NSString * _Nonnull)medicineDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Subheading.Medicine.Substance” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull substanceDocumentType;)
+ (NSString * _Nonnull)substanceDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “DEMedicalPlan.Subheading.Prescription” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull prescriptionDocumentType;)
+ (NSString * _Nonnull)prescriptionDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “IDCardPDF417” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417DocumentType;)
+ (NSString * _Nonnull)idCardPDF417DocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “GS1” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1DocumentType;)
+ (NSString * _Nonnull)gs1DocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “GS1.Element” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull elementDocumentType;)
+ (NSString * _Nonnull)elementDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “GS1.Element.ValidationError” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull validationErrorDocumentType;)
+ (NSString * _Nonnull)validationErrorDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “SEPA” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaDocumentType;)
+ (NSString * _Nonnull)sepaDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “MedicalCertificate” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateDocumentType;)
+ (NSString * _Nonnull)medicalCertificateDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vCardDocumentType;)
+ (NSString * _Nonnull)vCardDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Entry” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull entryDocumentType;)
+ (NSString * _Nonnull)entryDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Version” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionDocumentType;)
+ (NSString * _Nonnull)versionDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Source” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sourceDocumentType;)
+ (NSString * _Nonnull)sourceDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Kind” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kindDocumentType;)
+ (NSString * _Nonnull)kindDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.XML” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull xmlDocumentType;)
+ (NSString * _Nonnull)xmlDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Name” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull nameDocumentType;)
+ (NSString * _Nonnull)nameDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.FirstName” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull firstNameDocumentType;)
+ (NSString * _Nonnull)firstNameDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Nickname” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull nicknameDocumentType;)
+ (NSString * _Nonnull)nicknameDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Birthday” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull birthdayDocumentType;)
+ (NSString * _Nonnull)birthdayDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Anniversary” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull anniversaryDocumentType;)
+ (NSString * _Nonnull)anniversaryDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Gender” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull genderDocumentType;)
+ (NSString * _Nonnull)genderDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.DeliveryAddress” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deliveryAddressDocumentType;)
+ (NSString * _Nonnull)deliveryAddressDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Photo” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull photoDocumentType;)
+ (NSString * _Nonnull)photoDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.TelephoneNumber” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull telephoneNumberDocumentType;)
+ (NSString * _Nonnull)telephoneNumberDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Email” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull emailDocumentType;)
+ (NSString * _Nonnull)emailDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.IMPP” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull imppDocumentType;)
+ (NSString * _Nonnull)imppDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Languages” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull languagesDocumentType;)
+ (NSString * _Nonnull)languagesDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.TimeZone” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull timeZoneDocumentType;)
+ (NSString * _Nonnull)timeZoneDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.GeoLocation” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull geoLocationDocumentType;)
+ (NSString * _Nonnull)geoLocationDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Title” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull titleDocumentType;)
+ (NSString * _Nonnull)titleDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Role” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull roleDocumentType;)
+ (NSString * _Nonnull)roleDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Logo” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull logoDocumentType;)
+ (NSString * _Nonnull)logoDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Organisation” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull organisationDocumentType;)
+ (NSString * _Nonnull)organisationDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Member” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull memberDocumentType;)
+ (NSString * _Nonnull)memberDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Related” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull relatedDocumentType;)
+ (NSString * _Nonnull)relatedDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Categories” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull categoriesDocumentType;)
+ (NSString * _Nonnull)categoriesDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Note” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull noteDocumentType;)
+ (NSString * _Nonnull)noteDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.ProductId” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull productIdDocumentType;)
+ (NSString * _Nonnull)productIdDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Revision” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull revisionDocumentType;)
+ (NSString * _Nonnull)revisionDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Sound” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull soundDocumentType;)
+ (NSString * _Nonnull)soundDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.UID” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uidDocumentType;)
+ (NSString * _Nonnull)uidDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.ClientPIDMap” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientPIDMapDocumentType;)
+ (NSString * _Nonnull)clientPIDMapDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.URL” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull urlDocumentType;)
+ (NSString * _Nonnull)urlDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.PublicKey” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull publicKeyDocumentType;)
+ (NSString * _Nonnull)publicKeyDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.BusyTimeURL” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull busyTimeURLDocumentType;)
+ (NSString * _Nonnull)busyTimeURLDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.CalendarURIForRequests” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull calendarURIForRequestsDocumentType;)
+ (NSString * _Nonnull)calendarURIForRequestsDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.CalendarURI” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull calendarURIDocumentType;)
+ (NSString * _Nonnull)calendarURIDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “VCard.Custom” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customDocumentType;)
+ (NSString * _Nonnull)customDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaDocumentType;)
+ (NSString * _Nonnull)aamvaDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.TitleData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull titleDataDocumentType;)
+ (NSString * _Nonnull)titleDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.RegistrationData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull registrationDataDocumentType;)
+ (NSString * _Nonnull)registrationDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.MotorCarrierData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull motorCarrierDataDocumentType;)
+ (NSString * _Nonnull)motorCarrierDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.RegistrantAndVehicleData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull registrantAndVehicleDataDocumentType;)
+ (NSString * _Nonnull)registrantAndVehicleDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.VehicleOwnerData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vehicleOwnerDataDocumentType;)
+ (NSString * _Nonnull)vehicleOwnerDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.VehicleData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vehicleDataDocumentType;)
+ (NSString * _Nonnull)vehicleDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.VehicleSafetyInspectionData” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vehicleSafetyInspectionDataDocumentType;)
+ (NSString * _Nonnull)vehicleSafetyInspectionDataDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.DLID” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dlidDocumentType;)
+ (NSString * _Nonnull)dlidDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.DriverLicense” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull driverLicenseDocumentType;)
+ (NSString * _Nonnull)driverLicenseDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.IDCard” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardDocumentType;)
+ (NSString * _Nonnull)idCardDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.EnhancedDriverLicense” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull enhancedDriverLicenseDocumentType;)
+ (NSString * _Nonnull)enhancedDriverLicenseDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Document type name of the “AAMVA.RawDocument” document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rawDocumentDocumentType;)
+ (NSString * _Nonnull)rawDocumentDocumentType SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ElectronicTicket” field type in document type “BoardingPass”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassElectronicTicketFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassElectronicTicketFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Name” field type in document type “BoardingPass”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassNameFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfLegs” field type in document type “BoardingPass”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassNumberOfLegsFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassNumberOfLegsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecurityData” field type in document type “BoardingPass”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassSecurityDataFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassSecurityDataFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AirlineDesignatorOfBoardingPassIssuer” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegAirlineDesignatorOfBoardingPassIssuerFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegAirlineDesignatorOfBoardingPassIssuerFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AirlineNumericCode” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegAirlineNumericCodeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegAirlineNumericCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BaggageTagLicensePlateNumbers” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegBaggageTagLicensePlateNumbersFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegBaggageTagLicensePlateNumbersFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CheckInSequenceNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegCheckInSequenceNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegCheckInSequenceNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CompartmentCode” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegCompartmentCodeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegCompartmentCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateOfBoardingPassIssuanceJulian” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDateOfBoardingPassIssuanceJulianFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDateOfBoardingPassIssuanceJulianFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateOfFlightJulian” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDateOfFlightJulianFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDateOfFlightJulianFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DepartureAirportCode” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDepartureAirportCodeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDepartureAirportCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DestinationAirportCode” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDestinationAirportCodeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDestinationAirportCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentFormSerialNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDocumentFormSerialNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDocumentFormSerialNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentType” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegDocumentTypeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegDocumentTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FastTrack” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFastTrackFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFastTrackFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstNonConsecutiveBaggageTagLicensePlateNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFirstNonConsecutiveBaggageTagLicensePlateNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFirstNonConsecutiveBaggageTagLicensePlateNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FlightNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFlightNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFlightNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ForIndividualAirlineUse” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegForIndividualAirlineUseFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegForIndividualAirlineUseFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FreeBaggageAllowance” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFreeBaggageAllowanceFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFreeBaggageAllowanceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FrequentFlyerAirlineDesignator” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFrequentFlyerAirlineDesignatorFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFrequentFlyerAirlineDesignatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FrequentFlyerNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegFrequentFlyerNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegFrequentFlyerNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IDADIndicator” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegIDADIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegIDADIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InternationalDocumentationVerification” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegInternationalDocumentationVerificationFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegInternationalDocumentationVerificationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MarketingCarrierDesignator” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegMarketingCarrierDesignatorFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegMarketingCarrierDesignatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OperatingCarrierDesignator” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegOperatingCarrierDesignatorFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegOperatingCarrierDesignatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OperatingCarrierPNRCode” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegOperatingCarrierPNRCodeFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegOperatingCarrierPNRCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PassengerDescription” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegPassengerDescriptionFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegPassengerDescriptionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PassengerStatus” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegPassengerStatusFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegPassengerStatusFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SeatNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegSeatNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegSeatNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondNonConsecutiveBaggageTagLicensePlateNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegSecondNonConsecutiveBaggageTagLicensePlateNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegSecondNonConsecutiveBaggageTagLicensePlateNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SelecteeIndicator” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegSelecteeIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegSelecteeIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SourceOfBoardingPassIssuance” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegSourceOfBoardingPassIssuanceFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegSourceOfBoardingPassIssuanceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SourceOfCheckIn” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegSourceOfCheckInFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegSourceOfCheckInFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VersionNumber” field type in document type “BoardingPass.Leg”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull boardingPassLegVersionNumberFieldNormalizedName;)
+ (NSString * _Nonnull)boardingPassLegVersionNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AdditionalBillingInformation” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRAdditionalBillingInformationFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRAdditionalBillingInformationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AdditionalInfoTrailer” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRAdditionalInfoTrailerFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRAdditionalInfoTrailerFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AdditionalInfoUnstructured” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRAdditionalInfoUnstructuredFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRAdditionalInfoUnstructuredFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AlternativeProcedureParameter” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRAlternativeProcedureParameterFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRAlternativeProcedureParameterFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Amount” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRAmountFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRAmountFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Currency” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRCurrencyFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRCurrencyFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorAddressType” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorAddressTypeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorAddressTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorBuildingOrAddressLine2” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorBuildingOrAddressLine2FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorBuildingOrAddressLine2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorCountry” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorCountryFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorCountryFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorName” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorNameFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorPlace” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorPlaceFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorPlaceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorPostalCode” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorPostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorPostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DebtorStreetOrAddressLine1” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDebtorStreetOrAddressLine1FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDebtorStreetOrAddressLine1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DueDate” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRDueDateFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRDueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Encoding” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQREncodingFieldNormalizedName;)
+ (NSString * _Nonnull)swissQREncodingFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeeAddressType” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeeAddressTypeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeeAddressTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeeBuildingOrAddressLine2” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeeBuildingOrAddressLine2FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeeBuildingOrAddressLine2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeeCountry” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeeCountryFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeeCountryFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeeName” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeeNameFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeeNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeePlace” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeePlaceFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeePlaceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeePostalCode” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeePostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeePostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FinalPayeeStreetOrAddressLine1” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRFinalPayeeStreetOrAddressLine1FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRFinalPayeeStreetOrAddressLine1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IBAN” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRIBANFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRIBANFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeeAddressType” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeeAddressTypeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeeAddressTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeeBuildingOrAddressLine2” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeeBuildingOrAddressLine2FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeeBuildingOrAddressLine2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeeCountry” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeeCountryFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeeCountryFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeeName” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeeNameFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeeNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeePlace” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeePlaceFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeePlaceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeePostalCode” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeePostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeePostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PayeeStreetOrAddressLine1” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPayeeStreetOrAddressLine1FieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPayeeStreetOrAddressLine1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PaymentReference” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPaymentReferenceFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPaymentReferenceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PaymentReferenceType” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRPaymentReferenceTypeFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRPaymentReferenceTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Version” field type in document type “SwissQR”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swissQRVersionFieldNormalizedName;)
+ (NSString * _Nonnull)swissQRVersionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CurrentPage” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanCurrentPageFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanCurrentPageFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentVersionNumber” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDocumentVersionNumberFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDocumentVersionNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GUID” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanGUIDFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanGUIDFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “LanguageCountryCode” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanLanguageCountryCodeFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanLanguageCountryCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PatchVersionNumber” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatchVersionNumberFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatchVersionNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TotalNumberOfPages” field type in document type “DEMedicalPlan”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanTotalNumberOfPagesFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanTotalNumberOfPagesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AllergiesAndIntolerances” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientAllergiesAndIntolerancesFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientAllergiesAndIntolerancesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BirthDate” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientBirthDateFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientBirthDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BreastFeeding” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientBreastFeedingFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientBreastFeedingFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CreatinineValue” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientCreatinineValueFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientCreatinineValueFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstName” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientFirstNameFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientFirstNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Gender” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientGenderFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientGenderFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Height” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientHeightFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientHeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “LastName” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PatientFreeText” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientPatientFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientPatientFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PatientID” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientPatientIDFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientPatientIDFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PreName” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientPreNameFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientPreNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Pregnant” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientPregnantFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientPregnantFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Suffix” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientSuffixFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientSuffixFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Title” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientTitleFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientTitleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Weight” field type in document type “DEMedicalPlan.Patient”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanPatientWeightFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanPatientWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DoctorNumber” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorDoctorNumberFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorDoctorNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Email” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorEmailFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorEmailFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “HospitalID” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorHospitalIDFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorHospitalIDFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IssuerName” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorIssuerNameFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorIssuerNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IssuingDateAndTime” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorIssuingDateAndTimeFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorIssuingDateAndTimeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PharmacyID” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorPharmacyIDFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorPharmacyIDFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Place” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorPlaceFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorPlaceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PostalCode” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorPostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorPostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Street” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorStreetFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorStreetFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TelephoneNumber” field type in document type “DEMedicalPlan.Doctor”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanDoctorTelephoneNumberFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanDoctorTelephoneNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GeneralNote” field type in document type “DEMedicalPlan.Subheading”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingGeneralNoteFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingGeneralNoteFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “KeyWords” field type in document type “DEMedicalPlan.Subheading”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingKeyWordsFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingKeyWordsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SubheadingFreeText” field type in document type “DEMedicalPlan.Subheading”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingSubheadingFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingSubheadingFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DosageForm” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDosageFormFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDosageFormFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DosageFormFreeText” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDosageFormFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDosageFormFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DosageFreeText” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDosageFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDosageFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DosingUnit” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDosingUnitFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDosingUnitFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DosingUnitFreeText” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDosingUnitFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDosingUnitFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DrugName” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineDrugNameFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineDrugNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Evening” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineEveningFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineEveningFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GeneralNotes” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineGeneralNotesFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineGeneralNotesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Midday” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineMiddayFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineMiddayFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Morning” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineMorningFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineMorningFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Night” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineNightFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineNightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PharmaceuticalNumber” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicinePharmaceuticalNumberFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicinePharmaceuticalNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ReasonForTreatment” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineReasonForTreatmentFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineReasonForTreatmentFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RelevantInfo” field type in document type “DEMedicalPlan.Subheading.Medicine”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineRelevantInfoFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineRelevantInfoFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ActiveSubstance” field type in document type “DEMedicalPlan.Subheading.Medicine.Substance”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineSubstanceActiveSubstanceFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineSubstanceActiveSubstanceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Potency” field type in document type “DEMedicalPlan.Subheading.Medicine.Substance”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingMedicineSubstancePotencyFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingMedicineSubstancePotencyFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GeneralInformation” field type in document type “DEMedicalPlan.Subheading.Prescription”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingPrescriptionGeneralInformationFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingPrescriptionGeneralInformationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PrescriptionFreeText” field type in document type “DEMedicalPlan.Subheading.Prescription”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deMedicalPlanSubheadingPrescriptionPrescriptionFreeTextFieldNormalizedName;)
+ (NSString * _Nonnull)deMedicalPlanSubheadingPrescriptionPrescriptionFreeTextFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BirthDate” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417BirthDateFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417BirthDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateExpired” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417DateExpiredFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417DateExpiredFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateIssued” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417DateIssuedFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417DateIssuedFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentCode” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417DocumentCodeFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417DocumentCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstName” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417FirstNameFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417FirstNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “LastName” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417LastNameFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417LastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Optional” field type in document type “IDCardPDF417”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idCardPDF417OptionalFieldNormalizedName;)
+ (NSString * _Nonnull)idCardPDF417OptionalFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ApplicationIdentifier” field type in document type “GS1.Element”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementApplicationIdentifierFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementApplicationIdentifierFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DataTitle” field type in document type “GS1.Element”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementDataTitleFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementDataTitleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ElementDescription” field type in document type “GS1.Element”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementElementDescriptionFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementElementDescriptionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RawValue” field type in document type “GS1.Element”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementRawValueFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementRawValueFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Code” field type in document type “GS1.Element.ValidationError”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementValidationErrorCodeFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementValidationErrorCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Reason” field type in document type “GS1.Element.ValidationError”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gs1ElementValidationErrorReasonFieldNormalizedName;)
+ (NSString * _Nonnull)gs1ElementValidationErrorReasonFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Amount” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaAmountFieldNormalizedName;)
+ (NSString * _Nonnull)sepaAmountFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CharacterSet” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaCharacterSetFieldNormalizedName;)
+ (NSString * _Nonnull)sepaCharacterSetFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Identification” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaIdentificationFieldNormalizedName;)
+ (NSString * _Nonnull)sepaIdentificationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Information” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaInformationFieldNormalizedName;)
+ (NSString * _Nonnull)sepaInformationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Purpose” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaPurposeFieldNormalizedName;)
+ (NSString * _Nonnull)sepaPurposeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ReceiverBIC” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaReceiverBICFieldNormalizedName;)
+ (NSString * _Nonnull)sepaReceiverBICFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ReceiverIBAN” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaReceiverIBANFieldNormalizedName;)
+ (NSString * _Nonnull)sepaReceiverIBANFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ReceiverName” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaReceiverNameFieldNormalizedName;)
+ (NSString * _Nonnull)sepaReceiverNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Remittance” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaRemittanceFieldNormalizedName;)
+ (NSString * _Nonnull)sepaRemittanceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ServiceTag” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaServiceTagFieldNormalizedName;)
+ (NSString * _Nonnull)sepaServiceTagFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Version” field type in document type “SEPA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sepaVersionFieldNormalizedName;)
+ (NSString * _Nonnull)sepaVersionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Accident” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateAccidentFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateAccidentFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AssignedToAccidentInsuranceDoctor” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateAssignedToAccidentInsuranceDoctorFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateAssignedToAccidentInsuranceDoctorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BirthDate” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateBirthDateFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateBirthDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ChildNeedsCareFrom” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateChildNeedsCareFromFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateChildNeedsCareFromFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ChildNeedsCareUntil” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateChildNeedsCareUntilFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateChildNeedsCareUntilFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Diagnose” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateDiagnoseFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateDiagnoseFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DiagnosedOn” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateDiagnosedOnFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateDiagnosedOnFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DoctorNumber” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateDoctorNumberFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateDoctorNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentDate” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateDocumentDateFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateDocumentDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstName” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateFirstNameFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateFirstNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “HealthInsuranceNumber” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateHealthInsuranceNumberFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateHealthInsuranceNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IncapableOfWorkSince” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateIncapableOfWorkSinceFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateIncapableOfWorkSinceFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IncapableOfWorkUntil” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateIncapableOfWorkUntilFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateIncapableOfWorkUntilFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InitialCertificate” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateInitialCertificateFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateInitialCertificateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InsuredPersonNumber” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateInsuredPersonNumberFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateInsuredPersonNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “LastName” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PlaceOfOperationNumber” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificatePlaceOfOperationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificatePlaceOfOperationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RenewedCertificate” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateRenewedCertificateFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateRenewedCertificateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RequiresCare” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateRequiresCareFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateRequiresCareFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Status” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateStatusFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateStatusFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “WorkAccident” field type in document type “MedicalCertificate”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalCertificateWorkAccidentFieldNormalizedName;)
+ (NSString * _Nonnull)medicalCertificateWorkAccidentFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RawValue” field type in document type “VCard.Entry”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vCardEntryRawValueFieldNormalizedName;)
+ (NSString * _Nonnull)vCardEntryRawValueFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TypeModifier” field type in document type “VCard.Entry”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vCardEntryTypeModifierFieldNormalizedName;)
+ (NSString * _Nonnull)vCardEntryTypeModifierFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Value” field type in document type “VCard.Entry”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vCardEntryValueFieldNormalizedName;)
+ (NSString * _Nonnull)vCardEntryValueFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IssuerIdentificationNumber” field type in document type “AAMVA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaIssuerIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaIssuerIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionVersionNumber” field type in document type “AAMVA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaJurisdictionVersionNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaJurisdictionVersionNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Version” field type in document type “AAMVA”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVersionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVersionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressCity” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataAddressCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataAddressCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressJurisdictionCode” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataAddressJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataAddressJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressStreet” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataAddressStreetFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataAddressStreetFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressZipCode” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataAddressZipCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataAddressZipCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BusinessName” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataBusinessNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataBusinessNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FamilyName” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataFamilyNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataFamilyNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstLienHolderId” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataFirstLienHolderIdFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataFirstLienHolderIdFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstLienHolderName” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataFirstLienHolderNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataFirstLienHolderNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GivenName” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataGivenNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataGivenNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NewUsedIndicator” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataNewUsedIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataNewUsedIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OdometerDate” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataOdometerDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataOdometerDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OdometerDisclosure” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataOdometerDisclosureFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataOdometerDisclosureFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OdometerReadingKilometers” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataOdometerReadingKilometersFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataOdometerReadingKilometersFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OdometerReadingMileage” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataOdometerReadingMileageFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataOdometerReadingMileageFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PreviousTitleNumber” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataPreviousTitleNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataPreviousTitleNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PreviousTitlingJurisdiction” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataPreviousTitlingJurisdictionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataPreviousTitlingJurisdictionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TitleBrand” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataTitleBrandFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataTitleBrandFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TitleIssueDate” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataTitleIssueDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataTitleIssueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TitleNumber” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataTitleNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataTitleNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TitlingJurisdiction” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataTitlingJurisdictionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataTitlingJurisdictionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleBodyStyle” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleBodyStyleFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleBodyStyleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleColor” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleColorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleColorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleIdentificationNumber” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleMake” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleMakeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleMakeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModel” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleModelFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleModelFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModelYear” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehicleModelYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehicleModelYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehiclePurchaseDate” field type in document type “AAMVA.TitleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaTitleDataVehiclePurchaseDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaTitleDataVehiclePurchaseDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressCity” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataAddressCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataAddressCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressJurisdictionCode” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataAddressJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataAddressJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressStreet” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataAddressStreetFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataAddressStreetFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressZipCode” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataAddressZipCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataAddressZipCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Axles” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataAxlesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataAxlesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BusinessName” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataBusinessNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataBusinessNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Fuel” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataFuelFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataFuelFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GrossVehicleWeight” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataGrossVehicleWeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataGrossVehicleWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrantFamilyName” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrantFamilyNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrantFamilyNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrantGivenName” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrantGivenNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrantGivenNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationExpiryDate” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrationExpiryDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrationExpiryDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationIssueDate” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrationIssueDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrationIssueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationPlateNumber” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrationPlateNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrationPlateNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationWindowStickerDecal” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrationWindowStickerDecalFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrationWindowStickerDecalFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationYear” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataRegistrationYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataRegistrationYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleBodyStyle” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleBodyStyleFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleBodyStyleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleColor” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleColorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleColorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleIdentificationNumber” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleMake” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleMakeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleMakeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModel” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleModelFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleModelFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModelYear” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleModelYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleModelYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleUse” field type in document type “AAMVA.RegistrationData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrationDataVehicleUseFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrationDataVehicleUseFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CarrierName” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataCarrierNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataCarrierNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “City” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Jurisdiction” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataJurisdictionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataJurisdictionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “StreetAddress” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataStreetAddressFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataStreetAddressFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “USDOTNumber” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataUSDOTNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataUSDOTNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Zip” field type in document type “AAMVA.MotorCarrierData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaMotorCarrierDataZipFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaMotorCarrierDataZipFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Address” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataAddressFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataAddressFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BaseJurisdictionRegisteredWeight” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataBaseJurisdictionRegisteredWeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataBaseJurisdictionRegisteredWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CarrierNameRegistrant” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataCarrierNameRegistrantFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataCarrierNameRegistrantFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “City” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “GrossVehicleWeight” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataGrossVehicleWeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataGrossVehicleWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Jurisdiction” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataJurisdictionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataJurisdictionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ModelYear” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataModelYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataModelYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfSeats” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataNumberOfSeatsFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataNumberOfSeatsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationDecalNumber” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationDecalNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationDecalNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationEnforcementDate” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationEnforcementDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationEnforcementDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationExpirationDate” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationExpirationDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationExpirationDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationIssueDate” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationIssueDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationIssueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationPlateNumber” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationPlateNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationPlateNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RegistrationYear” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataRegistrationYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataRegistrationYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TypeOfVehicle” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataTypeOfVehicleFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataTypeOfVehicleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “UnitNumber” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataUnitNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataUnitNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleIdentificationNumber” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataVehicleIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataVehicleIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleMake” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataVehicleMakeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataVehicleMakeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ZipCode” field type in document type “AAMVA.RegistrantAndVehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaRegistrantAndVehicleDataZipCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaRegistrantAndVehicleDataZipCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerIdNumber” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerIdNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerIdNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerLastName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerLegalStatus” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerLegalStatusFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerLegalStatusFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerMiddleName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerMiddleNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerMiddleNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstOwnerTotalName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataFirstOwnerTotalNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataFirstOwnerTotalNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MailingAddress1” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataMailingAddress1FieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataMailingAddress1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MailingAddress2” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataMailingAddress2FieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataMailingAddress2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MailingCity” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataMailingCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataMailingCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MailingJurisdictionCode” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataMailingJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataMailingJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MailingZipCode” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataMailingZipCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataMailingZipCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ResidenceAddress1” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataResidenceAddress1FieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataResidenceAddress1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ResidenceAddress2” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataResidenceAddress2FieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataResidenceAddress2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ResidenceCity” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataResidenceCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataResidenceCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ResidenceJurisdictionCode” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataResidenceJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataResidenceJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ResidenceZipCode” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataResidenceZipCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataResidenceZipCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerIdNumber” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerIdNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerIdNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerLastName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerLegalStatus” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerLegalStatusFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerLegalStatusFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerMiddleName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerMiddleNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerMiddleNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SecondOwnerTotalName” field type in document type “AAMVA.VehicleOwnerData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleOwnerDataSecondOwnerTotalNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleOwnerDataSecondOwnerTotalNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “BodyStyle” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataBodyStyleFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataBodyStyleFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateJunked” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataDateJunkedFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataDateJunkedFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateRecovered” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataDateRecoveredFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataDateRecoveredFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateStolen” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataDateStolenFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataDateStolenFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “EngineDisplacement” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataEngineDisplacementFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataEngineDisplacementFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “EngineSize” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataEngineSizeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataEngineSizeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FuelType” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataFuelTypeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataFuelTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Horsepower” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataHorsepowerFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataHorsepowerFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IFTAIndicator” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataIFTAIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataIFTAIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IRPIndicator” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataIRPIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataIRPIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JunkedIndicator” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataJunkedIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataJunkedIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MSRP” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataMSRPFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataMSRPFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MajorCode” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataMajorCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataMajorCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MakeYear” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataMakeYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataMakeYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ManufactureGrossWeight” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataManufactureGrossWeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataManufactureGrossWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MinorCode” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataMinorCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataMinorCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfAxles” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataNumberOfAxlesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataNumberOfAxlesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfCylinders” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataNumberOfCylindersFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataNumberOfCylindersFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfDoors” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataNumberOfDoorsFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataNumberOfDoorsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “StolenIndicator” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataStolenIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataStolenIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “TransmissionCode” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataTransmissionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataTransmissionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “UnladenWeight” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataUnladenWeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataUnladenWeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VLTClacFromDate” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVLTClacFromDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVLTClacFromDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleIdNumber” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleIdNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleIdNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleIdentificationNumber” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleMake” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleMakeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleMakeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModel” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleModelFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleModelFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleStatusCode” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleStatusCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleStatusCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleTypeCode” field type in document type “AAMVA.VehicleData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleDataVehicleTypeCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleDataVehicleTypeCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionAddress” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionAddressFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionAddressFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionAirPollutionDeviceConditions” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionAirPollutionDeviceConditionsFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionAirPollutionDeviceConditionsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionFacilityIdentifier” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionFacilityIdentifierFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionFacilityIdentifierFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionFormOrStickerNumberCurrent” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionFormOrStickerNumberCurrentFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionFormOrStickerNumberCurrentFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionFormOrStickerNumberPrevious” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionFormOrStickerNumberPreviousFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionFormOrStickerNumberPreviousFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionSmogCertificateIndicator” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionSmogCertificateIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionSmogCertificateIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectionStationNumber” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectionStationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectionStationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InspectorIdentificationNumber” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataInspectorIdentificationNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataInspectorIdentificationNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OdometerReadingAtInspection” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataOdometerReadingAtInspectionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataOdometerReadingAtInspectionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleBodyType” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataVehicleBodyTypeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataVehicleBodyTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleMake” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataVehicleMakeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataVehicleMakeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VehicleModelYear” field type in document type “AAMVA.VehicleSafetyInspectionData”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvaVehicleSafetyInspectionDataVehicleModelYearFieldNormalizedName;)
+ (NSString * _Nonnull)aamvaVehicleSafetyInspectionDataVehicleModelYearFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressCity” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAddressCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAddressCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressJurisdictionCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAddressJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAddressJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressPostalCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAddressPostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAddressPostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressStreet1” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAddressStreet1FieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAddressStreet1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AddressStreet2” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAddressStreet2FieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAddressStreet2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AdultInformation” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAdultInformationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAdultInformationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AliasFamilyName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAliasFamilyNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAliasFamilyNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AliasGivenName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAliasGivenNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAliasGivenNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AliasMiddleName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAliasMiddleNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAliasMiddleNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AliasPrefixName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAliasPrefixNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAliasPrefixNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “AliasSuffixName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidAliasSuffixNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidAliasSuffixNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CardRevisionDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCardRevisionDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCardRevisionDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “ComplianceType” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidComplianceTypeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidComplianceTypeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CountryIdentification” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCountryIdentificationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCountryIdentificationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CustomerFamilyName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCustomerFamilyNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCustomerFamilyNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CustomerFirstName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCustomerFirstNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCustomerFirstNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CustomerGivenNames” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCustomerGivenNamesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCustomerGivenNamesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CustomerIdNumber” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCustomerIdNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCustomerIdNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “CustomerMiddleName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidCustomerMiddleNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidCustomerMiddleNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DateOfBirth” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDateOfBirthFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDateOfBirthFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentDiscriminator” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDocumentDiscriminatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDocumentDiscriminatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentExpirationDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDocumentExpirationDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDocumentExpirationDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DocumentIssueDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDocumentIssueDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDocumentIssueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverAliasDateOfBirthField” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverAliasDateOfBirthFieldFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverAliasDateOfBirthFieldFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverAliasFirstName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverAliasFirstNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverAliasFirstNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverAliasLastName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverAliasLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverAliasLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverAliasSocialSecurityNumber” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverAliasSocialSecurityNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverAliasSocialSecurityNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverLastName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverLastNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverLastNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverLicenseClassificationCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverLicenseClassificationCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverLicenseClassificationCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverLicenseEndorsementsCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverLicenseEndorsementsCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverLicenseEndorsementsCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverLicenseName” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverLicenseNameFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverLicenseNameFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverLicenseRestrictionCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverLicenseRestrictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverLicenseRestrictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverNamePrefix” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverNamePrefixFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverNamePrefixFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverNameSuffix” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverNameSuffixFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverNameSuffixFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverPermitClassificationCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverPermitClassificationCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverPermitClassificationCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverPermitEndorsementCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverPermitEndorsementCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverPermitEndorsementCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverPermitIssueDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverPermitIssueDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverPermitIssueDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverPermitRestrictionCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverPermitRestrictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverPermitRestrictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverResidenceCity” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverResidenceCityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverResidenceCityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverResidenceJurisdictionCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverResidenceJurisdictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverResidenceJurisdictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverResidencePostalCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverResidencePostalCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverResidencePostalCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverResidenceStreetAddress1” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverResidenceStreetAddress1FieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverResidenceStreetAddress1FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “DriverResidenceStreetAddress2” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidDriverResidenceStreetAddress2FieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidDriverResidenceStreetAddress2FieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FamilyNameTruncation” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidFamilyNameTruncationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidFamilyNameTruncationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FederalCommercialVehicleCodes” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidFederalCommercialVehicleCodesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidFederalCommercialVehicleCodesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “FirstNameTruncation” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidFirstNameTruncationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidFirstNameTruncationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “HAZMATEndorsementExpirationDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidHAZMATEndorsementExpirationDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidHAZMATEndorsementExpirationDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “HairColor” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidHairColorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidHairColorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Height” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidHeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidHeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “InventoryControlNumber” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidInventoryControlNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidInventoryControlNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “IssueTimeStamp” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidIssueTimeStampFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidIssueTimeStampFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificEndorsementCodeDescription” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificEndorsementCodeDescriptionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificEndorsementCodeDescriptionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificEndorsementCodes” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificEndorsementCodesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificEndorsementCodesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificRestrictionCodeDescription” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificRestrictionCodeDescriptionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificRestrictionCodeDescriptionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificRestrictionCodes” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificRestrictionCodesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificRestrictionCodesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificVehicleClass” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificVehicleClassFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificVehicleClassFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “JurisdictionSpecificVehicleClassificationDescription” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidJurisdictionSpecificVehicleClassificationDescriptionFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidJurisdictionSpecificVehicleClassificationDescriptionFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “LimitedDurationDocumentIndicator” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidLimitedDurationDocumentIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidLimitedDurationDocumentIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “MiddleNameTruncation” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidMiddleNameTruncationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidMiddleNameTruncationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NameSuffix” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidNameSuffixFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidNameSuffixFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NonResidentIndicator” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidNonResidentIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidNonResidentIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “NumberOfDuplicates” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidNumberOfDuplicatesFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidNumberOfDuplicatesFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OrganDonor” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidOrganDonorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidOrganDonorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “OrganDonorIndicator” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidOrganDonorIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidOrganDonorIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PermitExpirationDate” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPermitExpirationDateFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPermitExpirationDateFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PermitIdentifier” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPermitIdentifierFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPermitIdentifierFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PhysicalDescriptionEyeColor” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPhysicalDescriptionEyeColorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPhysicalDescriptionEyeColorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PhysicalDescriptionHeight” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPhysicalDescriptionHeightFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPhysicalDescriptionHeightFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PhysicalDescriptionSex” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPhysicalDescriptionSexFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPhysicalDescriptionSexFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PhysicalDescriptionWeightRange” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPhysicalDescriptionWeightRangeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPhysicalDescriptionWeightRangeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “PlaceOfBirth” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidPlaceOfBirthFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidPlaceOfBirthFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “RaceEthnicity” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidRaceEthnicityFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidRaceEthnicityFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “SocialSecurityNumber” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidSocialSecurityNumberFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidSocialSecurityNumberFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “StandardEndorsementCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidStandardEndorsementCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidStandardEndorsementCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “StandardRestrictionCode” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidStandardRestrictionCodeFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidStandardRestrictionCodeFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “StandardVehicleClassification” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidStandardVehicleClassificationFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidStandardVehicleClassificationFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Under18Until” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidUnder18UntilFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidUnder18UntilFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Under19Until” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidUnder19UntilFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidUnder19UntilFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “Under21Until” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidUnder21UntilFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidUnder21UntilFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “UniqueCustomerIdentifier” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidUniqueCustomerIdentifierFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidUniqueCustomerIdentifierFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “VeteranIndicator” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidVeteranIndicatorFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidVeteranIndicatorFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “WeightKilograms” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidWeightKilogramsFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidWeightKilogramsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
/// Normalized full name of the “WeightPounds” field type in document type “AAMVA.DLID”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aamvadlidWeightPoundsFieldNormalizedName;)
+ (NSString * _Nonnull)aamvadlidWeightPoundsFieldNormalizedName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentDEMedicalPlanPatient;
@class SBSDKBarcodeDocumentDEMedicalPlanDoctor;
@class SBSDKBarcodeDocumentDEMedicalPlanSubheading;

/// Medical Plan.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK33SBSDKBarcodeDocumentDEMedicalPlan")
@interface SBSDKBarcodeDocumentDEMedicalPlan : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Current Page.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable currentPage;
/// Document Version Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentVersionNumber;
/// GUID.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable guid;
/// Language Country Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable languageCountryCode;
/// Patch Version Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable patchVersionNumber;
/// Total Number Of Pages.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable totalNumberOfPages;
/// Patient.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentDEMedicalPlanPatient * _Nullable patient;
/// Doctor.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentDEMedicalPlanDoctor * _Nullable doctor;
/// Subheading.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentDEMedicalPlanSubheading *> * _Nullable subheadings;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Doctor.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK39SBSDKBarcodeDocumentDEMedicalPlanDoctor")
@interface SBSDKBarcodeDocumentDEMedicalPlanDoctor : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Doctor Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable doctorNumber;
/// Email.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable email;
/// Hospital ID.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable hospitalID;
/// Issuer Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable issuerName;
/// Issuing Date And Time.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable issuingDateAndTime;
/// Pharmacy ID.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable pharmacyID;
/// Place.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable place;
/// Postal Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable postalCode;
/// Street.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable street;
/// Telephone Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable telephoneNumber;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Patient.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK40SBSDKBarcodeDocumentDEMedicalPlanPatient")
@interface SBSDKBarcodeDocumentDEMedicalPlanPatient : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Allergies And Intolerances.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable allergiesAndIntolerances;
/// Birth Date.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable birthDate;
/// Breast Feeding.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable breastFeeding;
/// Creatinine Value.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable creatinineValue;
/// First Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstName;
/// Gender.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable gender;
/// Height.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable height;
/// Last Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable lastName;
/// Patient Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable patientFreeText;
/// Patient ID.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable patientID;
/// Pre Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable preName;
/// Pregnant.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable pregnant;
/// Name Suffix.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable suffix;
/// Title.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable title;
/// Weight.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable weight;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicine;
@class SBSDKBarcodeDocumentDEMedicalPlanSubheadingPrescription;

/// Subheading.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK43SBSDKBarcodeDocumentDEMedicalPlanSubheading")
@interface SBSDKBarcodeDocumentDEMedicalPlanSubheading : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// General Note.
@property (nonatomic, readonly, copy) NSArray<SBSDKGenericDocumentField *> * _Nullable generalNotes;
/// Key Words.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable keyWords;
/// Subheading Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable subheadingFreeText;
/// Medicine.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicine *> * _Nullable medicines;
/// Prescription.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentDEMedicalPlanSubheadingPrescription *> * _Nullable prescriptions;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicineSubstance;

/// Medicine.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK51SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicine")
@interface SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicine : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Dosage Form.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dosageForm;
/// Dosage Form Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dosageFormFreeText;
/// Dosage Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dosageFreeText;
/// Dosing Unit.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dosingUnit;
/// Dosing Unit Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dosingUnitFreeText;
/// Drug Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable drugName;
/// Evening Intake Dose.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable evening;
/// General Notes.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable generalNotes;
/// Midday Intake Dose.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable midday;
/// Morning Intake Dose.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable morning;
/// Night Intake Dose.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable night;
/// Pharmaceutical Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable pharmaceuticalNumber;
/// Reason For Treatment.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable reasonForTreatment;
/// Relevant Info.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable relevantInfo;
/// Substance.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicineSubstance *> * _Nullable substances;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Substance.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK60SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicineSubstance")
@interface SBSDKBarcodeDocumentDEMedicalPlanSubheadingMedicineSubstance : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Active Substance.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable activeSubstance;
/// Potency.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable potency;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Prescription.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK55SBSDKBarcodeDocumentDEMedicalPlanSubheadingPrescription")
@interface SBSDKBarcodeDocumentDEMedicalPlanSubheadingPrescription : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// General Information.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable generalInformation;
/// Prescription Free Text.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable prescriptionFreeText;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentGS1Element;

/// GS1.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK23SBSDKBarcodeDocumentGS1")
@interface SBSDKBarcodeDocumentGS1 : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Element.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentGS1Element *> * _Nullable elements;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentGS1ElementValidationError;

/// GS1 Element.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK30SBSDKBarcodeDocumentGS1Element")
@interface SBSDKBarcodeDocumentGS1Element : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Application Identifier.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable applicationIdentifier;
/// Data Title.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dataTitle;
/// Description.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable elementDescription;
/// Raw Value.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable rawValue;
/// ValidationError.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentGS1ElementValidationError *> * _Nullable validationErrors;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Validation Errors.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK45SBSDKBarcodeDocumentGS1ElementValidationError")
@interface SBSDKBarcodeDocumentGS1ElementValidationError : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Error Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable code;
/// Reason.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable reason;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// ID Card.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK32SBSDKBarcodeDocumentIDCardPDF417")
@interface SBSDKBarcodeDocumentIDCardPDF417 : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Birth Date. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable birthDate;
/// Date Expired. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateExpired;
/// Date Issued. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dateIssued;
/// Document Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentCode;
/// First Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstName;
/// Last Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable lastName;
/// Optional.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable optional;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// Medical Certificate.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK38SBSDKBarcodeDocumentMedicalCertificate")
@interface SBSDKBarcodeDocumentMedicalCertificate : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Accident.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable accident;
/// Assigned To Accident Insurance Doctor.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable assignedToAccidentInsuranceDoctor;
/// Birth Date. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable birthDate;
/// Child Needs Care From.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable childNeedsCareFrom;
/// Child Needs Care Until.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable childNeedsCareUntil;
/// Diagnose.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable diagnose;
/// Diagnosed On. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable diagnosedOn;
/// Doctor Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable doctorNumber;
/// Document Date. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable documentDate;
/// First Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable firstName;
/// Health Insurance Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable healthInsuranceNumber;
/// Incapable Of Work Since. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable incapableOfWorkSince;
/// Incapable Of Work Until. The format is ISO8601 with delimiters.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable incapableOfWorkUntil;
/// Initial Certificate.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable initialCertificate;
/// Insured Person Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable insuredPersonNumber;
/// Last Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable lastName;
/// Place Of Operation Number.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable placeOfOperationNumber;
/// Renewed Certificate.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable renewedCertificate;
/// Requires Care.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable requiresCare;
/// Status.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable status;
/// Work Accident.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable workAccident;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// A class to parse a raw string value (usually taken from the barcode) into a formatted document of the supported type.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK26SBSDKBarcodeDocumentParser")
@interface SBSDKBarcodeDocumentParser : NSObject
/// Parses the string into one of the supported document type or returns nil if none of the supported document types was detected.
/// \param inputString The string to be parsed.
///
///
/// returns:
/// Generic document or nil.
- (SBSDKGenericDocument * _Nullable)parseDocumentWithInputString:(NSString * _Nonnull)inputString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

/// A generic documents type.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK24SBSDKGenericDocumentType")
@interface SBSDKGenericDocumentType : NSObject
/// A dictionary of the default display strings for generic document types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nonnull userDocumentTypeDisplayTexts;)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)userDocumentTypeDisplayTexts SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserDocumentTypeDisplayTexts:(NSDictionary<NSString *, NSString *> * _Nonnull)value;
/// A dictionary of the default display strings for generic document types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull defaultDocumentTypeDisplayTexts;)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)defaultDocumentTypeDisplayTexts SWIFT_WARN_UNUSED_RESULT;
/// The local document type name.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The unique global document type name prefixed with the document types of all containing documents.
@property (nonatomic, copy) NSString * _Nonnull fullName;
/// The normalized global document type name.
/// Common document types appearing as child documents in different places will often have the same normalized type name.
@property (nonatomic, copy) NSString * _Nonnull normalizedName;
/// The friendly, human-readable display name of this document type in English.
@property (nonatomic, readonly, copy) NSString * _Nullable displayText;
@property (nonatomic, strong) NSNumber * _Nullable listIndex;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name fullName:(NSString * _Nonnull)fullName normalizedName:(NSString * _Nonnull)normalizedName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Root document type.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK28SBSDKBarcodeDocumentRootType")
@interface SBSDKBarcodeDocumentRootType : SBSDKGenericDocumentType
/// Array of all available document root types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull allDocumentTypes;)
+ (NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull)allDocumentTypes SWIFT_WARN_UNUSED_RESULT;
/// Creates a strongly-typed wrapper of the given document.
/// Returns nil if the document type is not part of this document schema.
+ (SBSDKGenericDocumentWrapper * _Nullable)wrap:(SBSDKGenericDocument * _Nonnull)document SWIFT_WARN_UNUSED_RESULT;
/// Returns root type corresponding to the given document.
+ (SBSDKBarcodeDocumentRootType * _Nullable)rootTypeFrom:(SBSDKGenericDocument * _Nonnull)document SWIFT_WARN_UNUSED_RESULT;
/// BoardingPass document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull boardingPass;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)boardingPass SWIFT_WARN_UNUSED_RESULT;
/// SwissQR document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull swissQR;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)swissQR SWIFT_WARN_UNUSED_RESULT;
/// DEMedicalPlan document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull deMedicalPlan;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)deMedicalPlan SWIFT_WARN_UNUSED_RESULT;
/// IDCardPDF417 document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull idCardPDF417;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)idCardPDF417 SWIFT_WARN_UNUSED_RESULT;
/// GS1 document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull gs1;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)gs1 SWIFT_WARN_UNUSED_RESULT;
/// SEPA document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull sepa;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)sepa SWIFT_WARN_UNUSED_RESULT;
/// MedicalCertificate document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull medicalCertificate;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)medicalCertificate SWIFT_WARN_UNUSED_RESULT;
/// VCard document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull vCard;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)vCard SWIFT_WARN_UNUSED_RESULT;
/// AAMVA document type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeDocumentRootType * _Nonnull aamva;)
+ (SBSDKBarcodeDocumentRootType * _Nonnull)aamva SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name fullName:(NSString * _Nonnull)fullName normalizedName:(NSString * _Nonnull)normalizedName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class SBSDKBarcodeType;

@interface SBSDKBarcodeDocumentRootType (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Retrieves the supported barcode types for a given array of barcode document formats.
/// \param documentFormats An array of barcode document formats.
///
///
/// returns:
/// An array of supported barcode types.
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)supportedBarcodeTypesFor:(NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull)documentFormats SWIFT_WARN_UNUSED_RESULT;
@end


/// SEPA.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK24SBSDKBarcodeDocumentSEPA")
@interface SBSDKBarcodeDocumentSEPA : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Amount.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable amount;
/// Character Set.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable characterSet;
/// Identification.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable identification;
/// Information.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable information;
/// Amount.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable purpose;
/// Receiver BIC.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable receiverBIC;
/// Receiver IBAN.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable receiverIBAN;
/// Receiver Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable receiverName;
/// Remittance.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable remittance;
/// Service Tag.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable serviceTag;
/// Version.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable version;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// SwissQR.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKBarcodeDocumentSwissQR")
@interface SBSDKBarcodeDocumentSwissQR : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Additional Billing Information.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable additionalBillingInformation;
/// Additional Info Trailer.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable additionalInfoTrailer;
/// Additional Info Unstructured.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable additionalInfoUnstructured;
/// Alternative Procedure Parameter.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable alternativeProcedureParameter;
/// Amount.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable amount;
/// Currency.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable currency;
/// Debtor Address Type.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorAddressType;
/// Debtor Building Or Address Line 2.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorBuildingOrAddressLine2;
/// Debtor Country.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorCountry;
/// Debtor Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorName;
/// Debtor Place.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorPlace;
/// Debtor Postal Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorPostalCode;
/// Debtor Street Or Address Line 1.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable debtorStreetOrAddressLine1;
/// Due Date.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable dueDate;
/// Encoding.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable encoding;
/// Final Payee Address Type.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeeAddressType;
/// Final Payee Building Or Address Line 2.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeeBuildingOrAddressLine2;
/// Final Payee Country.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeeCountry;
/// Final Payee Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeeName;
/// Final Payee Place.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeePlace;
/// Final Payee Postal Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeePostalCode;
/// Final Payee Street Or Address Line 1.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable finalPayeeStreetOrAddressLine1;
/// IBAN.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable iban;
/// Payee Address Type.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeeAddressType;
/// Payee Building Or Address Line 2.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeeBuildingOrAddressLine2;
/// Payee Country.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeeCountry;
/// Payee Name.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeeName;
/// Payee Place.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeePlace;
/// Payee Postal Code.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeePostalCode;
/// Payee Street Or Address Line 1.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable payeeStreetOrAddressLine1;
/// Payment Reference.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable paymentReference;
/// Payment Reference Type.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable paymentReferenceType;
/// Version.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable version;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKBarcodeDocumentVCardEntry;

/// VCard.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK25SBSDKBarcodeDocumentVCard")
@interface SBSDKBarcodeDocumentVCard : SBSDKGenericDocumentWrapper
/// The name of the wrapped document type.
@property (nonatomic, readonly, copy) NSString * _Nonnull requiredDocumentType;
/// Version.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable version;
/// Source.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable source;
/// Kind.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable kind;
/// XML.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable xml;
/// Name.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable name;
/// FirstName.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable firstName;
/// Nickname.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable nickname;
/// Birthday.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable birthday;
/// Anniversary.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable anniversary;
/// Gender.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable gender;
/// DeliveryAddress.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable deliveryAddress;
/// Photo.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable photo;
/// TelephoneNumber.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable telephoneNumber;
/// Email.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable email;
/// IMPP.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable impp;
/// Languages.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable languages;
/// TimeZone.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable timeZone;
/// GeoLocation.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable geoLocation;
/// Title.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable title;
/// Role.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable role;
/// Logo.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable logo;
/// Organisation.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable organisation;
/// Member.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable member;
/// Related.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable related;
/// Categories.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable categories;
/// Note.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable note;
/// ProductId.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable productId;
/// Revision.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable revision;
/// Sound.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable sound;
/// UID.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable uid;
/// ClientPIDMap.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable clientPIDMap;
/// URL.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable url;
/// PublicKey.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable publicKey;
/// BusyTimeURL.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable busyTimeURL;
/// CalendarURIForRequests.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable calendarURIForRequests;
/// CalendarURI.
@property (nonatomic, readonly, strong) SBSDKBarcodeDocumentVCardEntry * _Nullable calendarURI;
/// Custom.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeDocumentVCardEntry *> * _Nullable customs;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end


/// VCard Entry.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK30SBSDKBarcodeDocumentVCardEntry")
@interface SBSDKBarcodeDocumentVCardEntry : SBSDKGenericDocumentWrapper
/// Raw Value.
@property (nonatomic, readonly, strong) SBSDKGenericDocumentField * _Nullable rawValue;
/// Type Modifier.
@property (nonatomic, readonly, copy) NSArray<SBSDKGenericDocumentField *> * _Nullable typeModifiers;
/// Value.
@property (nonatomic, readonly, copy) NSArray<SBSDKGenericDocumentField *> * _Nullable values;
- (nullable instancetype)initWithGenericDocument:(SBSDKGenericDocument * _Nullable)document OBJC_DESIGNATED_INITIALIZER;
@end

/// The engine mode of the barcode recognizer.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeEngineMode, open) {
/// Legacy mode.
  SBSDKBarcodeEngineModeLegacy = 0,
/// Next generation engine mode based on machine learning.
  SBSDKBarcodeEngineModeNextGen = 1,
};

/// The type of the barcode image generation.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeImageGenerationType, open) {
/// No barcode image generation.
  SBSDKBarcodeImageGenerationTypeNone = 0,
/// Generating a barcode image from the last video frame. Faster, but has lower resolution.
  SBSDKBarcodeImageGenerationTypeFromVideoFrame = 1,
/// Generating a barcode image from separately captured frame. Higher resolution, but might have a slight delay.
  SBSDKBarcodeImageGenerationTypeCapturedImage = 2,
};

/// The checksum algorithm for MSI-Plessey type barcodes.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeMSIPlesseyChecksumAlgorithm, open) {
/// None.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmNone = 0,
/// Mod10.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod10 = 0x1,
/// Mod11IBM.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod11IBM = 0x2,
/// Mod11NCR.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod11NCR = 0x4,
/// Mod1010.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod1010 = 0x8,
/// Mod1110IBM.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod1110IBM = 0x10,
/// Mod1110NCR.
  SBSDKBarcodeMSIPlesseyChecksumAlgorithmMod1110NCR = 0x20,
};

/// The barcode overlay text format.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeOverlayFormat, open) {
/// Shows the barcode overlay frame only.
  SBSDKBarcodeOverlayFormatNone = 0,
/// Shows the barcode value.
  SBSDKBarcodeOverlayFormatCode = 1,
/// Shows the barcode value with the barcode format.
  SBSDKBarcodeOverlayFormatCodeAndType = 2,
};

/// The capture mode of the barcode scan and count.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodeScanAndCountCaptureMode, open) {
/// Uses the last frame form the camera input to detect barcodes on.
  SBSDKBarcodeScanAndCountCaptureModeVideoFrame = 0,
/// Captures a still image and detects barcodes on it.
  SBSDKBarcodeScanAndCountCaptureModeCapturedImage = 1,
};

@class SBSDKBaseScannerGeneralConfiguration;
@class SBSDKBaseScannerZoomConfiguration;
@class SBSDKBaseScannerEnergyConfiguration;
@class SBSDKBaseScannerViewFinderConfiguration;
@class SBSDKCameraDevice;
enum SBSDKFinderViewStyle : NSInteger;
@class UIView;
@class UIColor;
@class UIImage;
@class NSBundle;
@class NSCoder;
@class UITraitCollection;
@protocol UIViewControllerTransitionCoordinator;

/// A highly customizable camera view controller that delivers a basic camera functionality along with video
/// frame extraction and preprocessing, orientation correction and still image capturing.
/// Additionally you can opt-in several features using the SBSDKBaseScannerXXXConfiguration classes, e.g. zooming,
/// energy management and view finder.
/// This class provides functions to be used and overwritten by subclasses to implement different detectors and recognizers.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK30SBSDKBaseScannerViewController")
@interface SBSDKBaseScannerViewController : UIViewController
/// The general configuration of the receiver. Lets you customize some of the basic behavior.
/// It is copied on setting, so mutating the configuration after setting will not change the behavior.
/// Instead, re-configure your instance and set it again.
@property (nonatomic, strong) SBSDKBaseScannerGeneralConfiguration * _Nonnull generalConfiguration;
/// The zoom configuration of the receiver. Lets you enable customize the zooming behavior.
/// It is copied on setting, so mutating the configuration after setting will not change the behavior.
/// Instead, re-configure your instance and set it again.
@property (nonatomic, strong) SBSDKBaseScannerZoomConfiguration * _Nonnull zoomConfiguration;
/// The energy configuration of the receiver. Lets you enable and customize the energy management.
/// It is copied on setting, so mutating the configuration after setting will not change the behavior.
/// Instead, re-configure your instance and set it again.
@property (nonatomic, strong) SBSDKBaseScannerEnergyConfiguration * _Nonnull energyConfiguration;
/// The view finder configuration of the receiver. Lets you enable and customize the view finder.
/// It is copied on setting, so mutating the configuration after setting will not change the behavior.
/// Instead, re-configure your instance and set it again.
@property (nonatomic, strong) SBSDKBaseScannerViewFinderConfiguration * _Nonnull viewFinderConfiguration;
/// Sets or gets the used camera device. Can be used to toggle between the front and back cameras, tele and wide lens.
@property (nonatomic, strong) SBSDKCameraDevice * _Nonnull cameraDevice;
/// Whether the camera permission status is accepted or not. Readonly.
@property (nonatomic, readonly) BOOL isCameraUsageAuthorized;
/// Returns <code>True</code>, after the receivers viewDidAppear method was called and <code>False</code> after viewWillDisappear was called. Readonly.
@property (nonatomic, readonly) BOOL isVisible;
/// Set to <code>False</code>, if you want to stop the recognition. Set to <code>True</code> otherwise.
@property (nonatomic) BOOL isRecognitionEnabled;
/// Returns <code>True</code>, if the camera session is currently being interrupted, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isSessionInterrupted;
/// Whether the receiver is currently capturing a still image or not. Readonly.
@property (nonatomic, readonly) BOOL isCapturingStillImage;
/// Returns <code>True</code>, if the video light is available on the device, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isFlashLightAvailable;
/// Enables or disables the video light on the device.
@property (nonatomic) BOOL isFlashLightEnabled;
/// Returns <code>True</code>, if energy saving currently is active and the recognition runs at a very low rate, <code>False</code> otherwise.
@property (nonatomic, readonly) BOOL isEnergySavingActive;
/// The current camera zoom factor: a value between 0.0 (the minimum value of the zoom range)
/// and 1.0 (the maximum value of the zoom range). Readonly.
@property (nonatomic, readonly) CGFloat cameraZoomFactor;
/// The current absolute camera zoom factor: a value between 1.0x and the maximum video zoom factor of the camera device. Readonly.
@property (nonatomic, readonly) CGFloat cameraZoomFactorAbsolute;
/// Returns <code>True</code>, if focus lock is enabled, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isFocusLockEnabled;
/// Returns <code>True</code> if the camera is currently frozen, <code>False</code> otherwise.
@property (nonatomic, readonly) BOOL isCameraFrozen;
/// The time interval since the last successful recognition.
@property (nonatomic, readonly) NSTimeInterval timeIntervalSinceLastSuccessfulRecognition;
/// A block being called when the flashlight is toggled. Defaults to <code>nil</code>.
@property (nonatomic, copy) void (^ _Nullable flashLightDidChangeHandler)(void);
/// A block being called when the application status was changed. Defaults to <code>nil</code>.
@property (nonatomic, copy) void (^ _Nullable applicationStateDidChangeHandler)(enum SBSDKApplicationState);
/// A block being executed when the zoom factor has changed. The new absolute zoom factor is provided as parameter.
@property (nonatomic, copy) void (^ _Nullable zoomFactorDidChangeHandler)(CGFloat);
/// A block being called whenever the view finder rectangle changes.
/// Can be uses to layout UI elements with respect to the view finder position. Defaults to <code>nil</code>.
/// Equals to CGRectZero, if the view finder is not active.
@property (nonatomic, copy) void (^ _Nullable viewFinderRectDidChangeHandler)(CGRect);
/// The drawing style of the finder view.
/// Defaults to <code>SBSDKFinderView/Style/stroke</code>.
@property (nonatomic) enum SBSDKFinderViewStyle viewFinderStyle;
/// The area where the finder should be placed in the coordinate system of the receiver.
/// Is ignored if finder safe area is empty (zero height or width).
/// Defaults to the zero rectangle.
@property (nonatomic) CGRect finderSafeArea;
/// A transparent view sitting on top of the camera layer being automatically layouted to match the camera layer.
/// Can be used to render additional contents above the camera layer.
@property (nonatomic, readonly, strong) UIView * _Nonnull overlayView;
/// The background color of the receivers view.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Disables auto-focus and locks the lens at the specified lens position.
/// \param lensPosition The position of the lens. Values can be between 0.0f (minimum focusing distance) and
/// 1.0f (maximum focusing distance). The value will be clamped to [0.0f, 1.0f].
///
///
/// returns:
/// <code>True</code>, if the attempt to lock the focus was successful, <code>False</code> if the attempt failed or if focus lock is
/// not available.
- (BOOL)beginFocusLockAtLensPosition:(CGFloat)lensPosition;
/// Ends the focus lock and returns to standard continuous auto-focus.
- (void)endFocusLock;
/// Sets the zoom factor to the specified value.
/// The zoom range must be specified in the receivers zoomConfigurations zoomRange property.
/// A zoom animation will be played if the receivers zoomConfigurations shouldAnimateZooming property is set to <code>True</code>.
/// \param factor A value between 0.0 (the minimum value of the zoom range) and 1.0
/// (the maximum value of the zoom range). Values outside the (0.0 - 1.0) range will be clipped.
///
- (void)setCameraZoomFactor:(CGFloat)factor;
/// Sets the zoom factor to the specified value, optionally animated.
/// The zoom range must be specified in the receivers zoomConfigurations zoomRange property.
/// A zoom animation will be played if the receivers zoomConfigurations shouldAnimateZooming property is set to <code>True</code>.
/// \param factor A value between 0.0 (the minimum value of the zoom range) and 1.0
/// (the maximum value of the zoom range). Values outside the (0.0 - 1.0) range will be clipped.
///
/// \param animated <code>True</code>, if the zoom should be animated. <code>False</code> otherwise.
///
- (void)setCameraZoomFactor:(CGFloat)factor animated:(BOOL)animated;
/// Resets the zoom factor to the value 0.0: the minimum value of the zoom range
/// specified in the receivers zoomConfigurations zoomRange property.
- (void)resetZoom;
/// Manually starts energy saving mode.
- (void)startEnergySaving;
/// Manually ends energy saving mode.
- (void)endEnergySaving;
/// Plays standard bleep sound.
- (void)playBleepSound;
///
/// returns:
/// The current rect of the view finder in the coordinate system of the receivers view.
/// If no view finder is active CGRectZero is returned.
- (CGRect)currentViewFinderRect SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The current rect of the secondary view finder in the coordinate system of the receivers view.
/// If no secondary view finder is active CGRectZero is returned.
- (CGRect)currentSecondaryViewFinderRect SWIFT_WARN_UNUSED_RESULT;
/// Captures a still image asynchronously and passes either the UIImage or an error to the completion handler.
/// \param completion The completion handler that is called when the still image has been captured.
///
- (void)captureStillImageWithCompletionHandler:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completion;
/// Freezes the cameras preview layer by stopping the camera session.
- (void)freezeCamera;
/// Unfreezes the previously frozen cameras preview layer by restarting the camera session.
- (void)unfreezeCamera;
/// Embeds the receiver as a child view controller of the parent view controller.
/// The scanner controller view is added to the parent view, which must be an adjacent view of the receivers view.
/// \param parentViewController The UIViewController that the receiver will be embedded into.
///
/// \param parentView The UIView that holds and layouts the receivers view. 
///
///
/// returns:
/// <code>True</code>, if embedding the receiver was successful, <code>False</code> otherwise.
- (BOOL)attachWithParentViewController:(UIViewController * _Nonnull)parentViewController parentView:(UIView * _Nonnull)parentView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end

@protocol SBSDKBarcodeScanAndCountViewControllerDelegate;
enum SBSDKBarcodesExtensionFilter : NSInteger;
@class SBSDKScanAndCountPolygonStyle;
@class SBSDKBarcodeScannerAccumulatingResult;

/// A <code>UIViewController</code> subclass to show a camera screen with the barcode detector.
/// Screen also shows snap, scan more and reset buttons.
/// The snap button starts the scanning when tapped.
/// The snap button resets the scanning when tapped again.
/// Instead it is installing itself as a child view controller onto a given parent view controller.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK38SBSDKBarcodeScanAndCountViewController")
@interface SBSDKBarcodeScanAndCountViewController : SBSDKBaseScannerViewController
/// The delegate of the receiver. Weak.
@property (nonatomic, weak) id <SBSDKBarcodeScanAndCountViewControllerDelegate> _Nullable delegate;
/// Barcode types (EAN, DataMatrix, Aztec, QR, etc) that can be returned in <code>didDetectBarcodes</code> delegate method.
/// If you pass an empty array, it will be initialized with <code>SBSDKBarcodeType/commonTypes</code>.
/// Defaults to <code>SBSDKBarcodeType/commonTypes</code>.
@property (nonatomic, copy) NSArray<SBSDKBarcodeType *> * _Nonnull acceptedBarcodeTypes;
/// Filter for extended EAN and UPC barcodes.
/// Defaults to disabled <code>SBSDKBarcodesExtensionFilter/noFilter</code>.
@property (nonatomic) enum SBSDKBarcodesExtensionFilter extensionFilter;
/// Additional parameters for tweaking the detection of barcodes.
@property (nonatomic, strong) SBSDKBarcodeAdditionalParameters * _Nonnull additionalDetectionParameters;
/// The barcode detector engine mode.
/// Defaults to <code>SBSDKBarcodeEngineMode/nextGen</code>.
@property (nonatomic) enum SBSDKBarcodeEngineMode engineMode;
/// The barcode scan and count capture mode.
/// Defaults to <code>SBSDKBarcodeScanAndCountCaptureMode/videoFrame</code>.
@property (nonatomic) enum SBSDKBarcodeScanAndCountCaptureMode captureMode;
/// Whether the shutter button is hidden or not.
/// Defaults to <code>False</code>.
@property (nonatomic) BOOL shutterButtonHidden;
/// The default style for the polygon around the barcodes.
/// Defaults to blueish-green style.
@property (nonatomic, strong) SBSDKScanAndCountPolygonStyle * _Nonnull polygonStyle;
/// Stores all the scanned barcode results accumulated through multiple scans.
/// The storage is cleared only after the reset method has been called.
@property (nonatomic, readonly, copy) NSArray<SBSDKBarcodeScannerAccumulatingResult *> * _Nonnull countedBarcodes;
/// Installs the receiver as child view controller onto the parent view controllers view using its entire bounds area.
/// If <code>parentViewController</code> conforms to <code>SBSDKBarcodeScanAndCountViewControllerDelegate</code>, it is automatically set as delegate.
/// \param parentViewController The view controller the newly created instance is embedded into.
///
/// \param parentView The view the newly created instance is embedded into.
///
- (nullable instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController parentView:(UIView * _Nonnull)parentView;
/// Installs the receiver as child view controller onto the parent view controllers view using its entire bounds area.
/// If <code>parentViewController</code> conforms to <code>SBSDKBarcodeScanAndCountViewControllerDelegate</code> and if the delegate is <code>nil</code>, it is
/// automatically set as delegate.
/// \param parentViewController The view controller the newly created instance is embedded into.
///
/// \param parentView The view the newly created instance is embedded into.
///
/// \param delegate The delegate for the receiver.
///
- (nullable instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController parentView:(UIView * _Nonnull)parentView delegate:(id <SBSDKBarcodeScanAndCountViewControllerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of this class with the default configuration.
/// note:
/// It’s recommended to use the <code>init(parentViewController:parentView:delegate:)</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Clears the <code>countedBarcodes</code> property.
- (void)clearCountedBarcodes;
/// Extracts the image, freezes the camera and scans the image for barcodes.
- (void)scanAndCount;
/// Resumes the camera and prepares the receiver for another scan.
- (void)continueScanning;
- (void)viewDidLoad;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end

@class SBSDKBarcodeScannerResult;

/// A delegate protocol to handle the barcode results from <code>SBSDKBarcodeScanAndCountViewController</code>.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK46SBSDKBarcodeScanAndCountViewControllerDelegate_")
@protocol SBSDKBarcodeScanAndCountViewControllerDelegate
/// Informs the delegate that the receiver has detected some barcodes.
/// \param controller The calling <code>SBSDKBarcodeScanAndCountViewController</code>.
///
/// \param codes Array of <code>SBSDKBarcodeScannerResult</code> containing the detected barcodes.
///
- (void)barcodeScanAndCountController:(SBSDKBarcodeScanAndCountViewController * _Nonnull)controller didDetectBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes;
@optional
/// Asks the delegate to filter the detected barcodes.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScanAndCountViewController</code>.
///
/// \param codes Array of <code>SBSDKBarcodeScannerResult</code> containing the detected barcodes.
///
///
/// returns:
/// The filtered array of barcodes to be delivered to the post-processing.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)barcodeScanAndCountController:(SBSDKBarcodeScanAndCountViewController * _Nonnull)controller filterResults:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to provide a custom barcode overlay polygon style for the given barcode.
/// If not implemented, the default style is used.
/// Is not called if a custom overlay is used.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScanAndCountViewController</code>.
///
/// \param code Instance of <code>SBSDKBarcodeScannerResult</code> containing the detected barcode.
///
///
/// returns:
/// The style to draw the polygon.
- (SBSDKScanAndCountPolygonStyle * _Nonnull)barcodeScanAndCountController:(SBSDKBarcodeScanAndCountViewController * _Nonnull)controller polygonStyleForBarcode:(SBSDKBarcodeScannerResult * _Nonnull)code SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to provide the overlay view for a given code.
/// If not implemented, a default green checkmark is drawn as an overlay.
/// If implemented, but <code>nil</code> is returned for the given code, no overlay is drawn for that code.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScanAndCountViewController</code>.
///
/// \param code Instance of <code>SBSDKBarcodeScannerResult</code> containing the detected barcode.
///
///
/// returns:
/// Overlay for the barcode as a <code>UIView</code>.
- (UIView * _Nullable)barcodeScanAndCountController:(SBSDKBarcodeScanAndCountViewController * _Nonnull)controller overlayForBarcode:(SBSDKBarcodeScannerResult * _Nonnull)code SWIFT_WARN_UNUSED_RESULT;
/// Informs the delegate when it starts scanning.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScanAndCountViewController</code>.
///
- (void)barcodeScanAndCountControllerDidStartScanning:(SBSDKBarcodeScanAndCountViewController * _Nonnull)controller;
@end


/// Creates an <code>SBSDKBarcodeScanner</code> with no frame accumulator for detecting all supported barcode types.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK19SBSDKBarcodeScanner")
@interface SBSDKBarcodeScanner : NSObject
/// Barcode types to limit detection results to.
/// If you pass an empty array, it will be initialized with <code>SBSDKBarcodeType/commonTypes</code>.
/// Defaults to <code>SBSDKBarcodeType/commonTypes</code>.
@property (nonatomic, copy) NSArray<SBSDKBarcodeType *> * _Nonnull acceptedBarcodeTypes;
/// Barcode document types to limit detection results to.
/// When it’s empty - all documents can be returned.
/// Defaults to an empty array.
@property (nonatomic, copy) NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull acceptedDocumentTypes;
/// Filter for extended EAN and UPC barcodes.
/// By default the filter is disabled <code>SBSDKBarcodesExtensionFilter/noFilter</code>.
@property (nonatomic) enum SBSDKBarcodesExtensionFilter extensionFilter;
/// Regular expression pattern to limit detection results.
/// Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable regularExpressionPattern;
/// Additional parameters for tweaking the detection of barcodes.
@property (nonatomic, strong) SBSDKBarcodeAdditionalParameters * _Nonnull additionalParameters;
/// The barcode detectors engine mode.
/// Defaults to <code>SBSDKBarcodeEngineMode/nextGen</code>.
@property (nonatomic) enum SBSDKBarcodeEngineMode engineMode;
/// Set to <code>True</code>, if you want to recognize barcodes on consecutive video frames.
/// Otherwise, if you want to recognize on a single image, set to <code>False</code>.
/// Defaults to <code>False</code>.
@property (nonatomic) BOOL useLiveMode;
/// Creates an <code>SBSDKBarcodeScanner</code> with no frame accumulator for detecting all <code>SBSDKBarcodeType/commonTypes</code> barcode types.
- (nonnull instancetype)init;
/// Creates an <code>SBSDKBarcodeScanner</code> with no frame accumulator for detecting only the given barcode types.
/// \param barCodeTypes Barcode types to limit detection results to.
///
- (nonnull instancetype)initWithTypes:(NSArray<SBSDKBarcodeType *> * _Nonnull)barCodeTypes;
/// Creates an <code>SBSDKBarcodeScanner</code> that accumulates multiple frames before returning a detection result.
/// The barcode scanner’s detect methods will return empty results until they’ve been called the
/// given number of times. Then, they will perform detection on the frame with the least
/// amount of blur. Intended for using with live detection.
/// \param barCodeTypes Barcode types to limit detection results to.
///
/// \param useLiveMode Whether you want to recognize in live mode or not.
///
- (nonnull instancetype)initWithTypes:(NSArray<SBSDKBarcodeType *> * _Nonnull)barCodeTypes liveMode:(BOOL)useLiveMode OBJC_DESIGNATED_INITIALIZER;
/// Search and decode specified types of barcodes on given image.
/// Strong recommendation is to use this method with static image barcode detection and not live detection.
/// The reason is that video stream returns rotated image, so for example for portrait device orientation, every frame returned will be in landscape left orientation.
/// \param image The image where search is to be done.
///
///
/// returns:
/// List of found barcodes.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nullable)detectBarCodesOnImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Search and decode specified types of barcodes on given image.
/// The reason is that video stream returns rotated image, so for example for portrait device orientation, every frame returned will be in landscape left orientation.
/// Strong recommendation is to use this method with static image barcode detection and not live detection.
/// This method does not handle this orientation difference.
/// For live detection using  <code>detectBarCodes(on:orientation:in:)-9qxu2</code>  or <code>detectBarCodes(on:orientation:in:)-7ue2l</code>  is more preferable.
/// \param image The image where search is to be done.
///
/// \param rect Rectangle in image coordinates in which to perform the search. Must be inside the image.
///
///
/// returns:
/// List of found barcodes.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nullable)detectBarCodesOnImage:(UIImage * _Nonnull)image inRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Search and decode specified types of barcodes on given image.
/// This function is intended to be used use with live detection.
/// Video stream from device returns a rotated image, so for example for portrait device orientation, every frame returned will be in landscape left orientation.
/// This function handles these orientation differences, so you shouldn’t fix or rotate the input image.
/// \param image The image where search is to be done.
///
/// \param videoOrientation Video frame orientation. Should be the orientation that the device currently has, not actual image orientation.
///
/// \param rect Rectangle in image coordinates in which to perform the search. Must be within the image frame.
///
///
/// returns:
/// List of found barcodes.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nullable)detectBarCodesOnImage:(UIImage * _Nonnull)image orientation:(AVCaptureVideoOrientation)videoOrientation inRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Search and decode specified types of barcodes from sample buffer reference.
/// This function is intended to be used with live detection.
/// Video stream from device returns a rotated image, so for example for portrait device orientation, every frame returned will be in landscape left orientation.
/// This function handles these orientation differences, so you shouldn’t fix or rotate the input buffer.
/// Keep in mind, that the buffer received from the video stream is handled by the system. So in some cases it might be cleaned or changed by the system
/// before recognition occurs. You may convert the buffer to UIImage upon receiving it and use <code>detectBarCodesOnImage:orientation:inRect:</code>
/// function, if that is an issue.
/// \param sampleBuffer The sample buffer reference.
///
/// \param videoOrientation Video frame orientation. Should be the orientation that the device currently has, not actual image orientation.
///
///
/// returns:
/// List of found barcodes.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nullable)detectBarCodesOnSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer orientation:(AVCaptureVideoOrientation)videoOrientation SWIFT_WARN_UNUSED_RESULT;
/// Search and decode specified types of barcodes from sample buffer reference.
/// This function is intended to be used with live detection.
/// Video stream from device returns a rotated image, so for example for portrait device orientation, every frame returned will be in landscape left orientation.
/// This function handles these orientation differences, so you shouldn’t fix or rotate the input buffer.
/// Keep in mind, that the buffer received from the video stream is handled by the system. So in some cases it might be cleaned or changed by the system
/// before recognition occurs. You may convert the buffer to UIImage upon receiving it and use <code>detectBarCodesOnImage:orientation:inRect:</code>
/// function, if that is an issue.
/// \param sampleBuffer The sample buffer reference.
///
/// \param videoOrientation Video frame orientation. Should be the orientation that the device currently has, not actual image orientation.
///
/// \param rect Rectangle in image coordinates in which to perform the search. Must be inside the image.
///
///
/// returns:
/// List of found barcodes.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nullable)detectBarCodesOnSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer orientation:(AVCaptureVideoOrientation)videoOrientation inRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
@end


/// A class to keep track of a detected barcode and the number of times it is scanned.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK37SBSDKBarcodeScannerAccumulatingResult")
@interface SBSDKBarcodeScannerAccumulatingResult : NSObject
/// The detected barcode.
@property (nonatomic, readonly, strong) SBSDKBarcodeScannerResult * _Nonnull code;
/// The number of times the code has been scanned.
/// Defaults to 1.
@property (nonatomic) NSInteger scanCount;
/// Designated initializer.
/// \param barcodeResult An instance of the barcode scanner result object.
///
- (nonnull instancetype)initWithBarcodeResult:(SBSDKBarcodeScannerResult * _Nonnull)barcodeResult OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBSDKPolygon;
@class NSDate;

/// This class encapsulates the result of a barcode detection.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK25SBSDKBarcodeScannerResult")
@interface SBSDKBarcodeScannerResult : NSObject
/// The barcode metadata key for the EAN/UPC extensions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKBarcodeMetadataEANUPCExtensionKey;)
+ (NSString * _Nonnull)SBSDKBarcodeMetadataEANUPCExtensionKey SWIFT_WARN_UNUSED_RESULT;
/// The barcode metadata key for the GS1 messages.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKBarcodeMetadataIsGS1MessageKey;)
+ (NSString * _Nonnull)SBSDKBarcodeMetadataIsGS1MessageKey SWIFT_WARN_UNUSED_RESULT;
/// The barcode metadata key for the GS1 Composite 2D type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKBarcodeMetadataGS1Composite2DTypeKey;)
+ (NSString * _Nonnull)SBSDKBarcodeMetadataGS1Composite2DTypeKey SWIFT_WARN_UNUSED_RESULT;
/// The barcode metadata key for the Databar stack size.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKBarcodeMetadataDatabarStacksizeKey;)
+ (NSString * _Nonnull)SBSDKBarcodeMetadataDatabarStacksizeKey SWIFT_WARN_UNUSED_RESULT;
/// SBSDKPolygon instance where the barcode was found.
@property (nonatomic, strong) SBSDKPolygon * _Nonnull polygon;
/// The barcodes type.
@property (nonatomic, readonly, strong) SBSDKBarcodeType * _Nonnull type;
/// The barcodes extension string or nil.
@property (nonatomic, readonly, copy) NSString * _Nullable extension;
/// A perspective corrected image of the barcode.
@property (nonatomic, readonly, strong) UIImage * _Nonnull barcodeImage;
/// The source image where the barcode has been detected on.
@property (nonatomic, readonly, strong) UIImage * _Nullable sourceImage;
/// The raw content value of the found barcode.
@property (nonatomic, readonly, copy) NSString * _Nonnull rawTextString;
/// The raw content value of the found barcode including an eventual extension from the metadata.
@property (nonatomic, readonly, copy) NSString * _Nonnull rawTextStringWithExtension;
/// The raw content bytes of the found barcode.
@property (nonatomic, readonly, copy) NSData * _Nonnull rawBytes;
/// The parsed known document format (if parsed successfully).
@property (nonatomic, readonly, strong) SBSDKGenericDocument * _Nullable parsedDocument;
/// The date when this barcode has been detected the last time.
@property (nonatomic, copy) NSDate * _Nonnull dateOfDetection;
/// Time interval since the last detection.
@property (nonatomic, readonly) NSTimeInterval age;
/// The metadata of the found barcode.
/// Accessible via public keys e.g. metadata[SBSDKBarcodeScannerResult.SBSDKBarcodeMetadataEANUPCExtensionKey].
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull metadata;
/// Initializer.
- (nonnull instancetype)initWithPolygon:(SBSDKPolygon * _Nonnull)polygon type:(SBSDKBarcodeType * _Nonnull)type barcodeImage:(UIImage * _Nonnull)barcodeImage sourceImage:(UIImage * _Nullable)sourceImage rawTextString:(NSString * _Nonnull)rawTextString rawBytes:(NSData * _Nonnull)rawBytes metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol SBSDKBarcodeScannerViewControllerDelegate;
@class SBSDKBarcodeTrackingOverlayController;

/// A <code>UIViewController</code> subclass to show a camera screen with the barcode detector.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK33SBSDKBarcodeScannerViewController")
@interface SBSDKBarcodeScannerViewController : SBSDKBaseScannerViewController
/// The weak delegate. See <code>SBSDKBarcodeScannerViewControllerDelegate</code> protocol.
@property (nonatomic, weak) id <SBSDKBarcodeScannerViewControllerDelegate> _Nullable delegate;
/// Machine code types (EAN, DataMatrix, Aztec, QR, etc) that can be returned in <code>SBSDKBarcodeScannerViewControllerDelegate/barcodeScannerController(_:didDetectBarcodes:)</code> delegate method.
/// If you pass an empty array, it will be initialized with <code>SBSDKBarcodeType/commonTypes</code>.
/// Defaults to <code>SBSDKBarcodeType/commonTypes</code>.
@property (nonatomic, copy) NSArray<SBSDKBarcodeType *> * _Nonnull acceptedBarcodeTypes;
/// Filter for extended EAN and UPC barcodes.
/// Defaults to disabled <code>SBSDKBarcodesExtensionFilter/noFilter</code>.
@property (nonatomic) enum SBSDKBarcodesExtensionFilter extensionFilter;
/// Additional parameters for tweaking the detection of barcodes.
@property (nonatomic, strong) SBSDKBarcodeAdditionalParameters * _Nonnull additionalDetectionParameters;
/// Barcode document types to limit detection results to.
/// When it’s empty - all documents can be returned.
/// Defaults to an empty array.
@property (nonatomic, copy) NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull acceptedDocumentTypes;
/// Regular expression pattern to limit detection results.
/// Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable regularExpressionPattern;
/// The barcode detectors engine mode.
/// Defaults to <code>SBSDKBarcodeEngineMode/nextGen</code>.
@property (nonatomic) enum SBSDKBarcodeEngineMode engineMode;
/// Specifies the way of barcode images generation or disables this generation at all.
/// Use, if you want to receive a full sized image with barcodes.
/// Defaults to <code>SBSDKBarcodeImageGenerationType/none</code>.
/// note:
/// This property has no effect if <code>SBSDKBarcodeScannerViewController/isTrackingOverlayEnabled</code> is set to <code>True</code>.
/// With the tracking overlay enabled, barcode images cannot be generated.
@property (nonatomic) enum SBSDKBarcodeImageGenerationType barcodeImageGenerationType;
/// Displays an augmented reality view that draws the frames, content and type text of the found barcodes when it finds them.
/// Defaults to <code>False</code>.
@property (nonatomic) BOOL isTrackingOverlayEnabled;
/// The barcode tracking overlay controller that shows the detected barcodes.
/// Assign its delegate or set a new instance to take over control of the tracked barcode overlay.
@property (nonatomic, readonly, strong) SBSDKBarcodeTrackingOverlayController * _Null_unspecified trackingOverlayController;
@property (nonatomic) BOOL isRecognitionEnabled;
/// Installs the receiver as child view controller onto the parent view controllers view using its entire bounds area.
/// If parentViewController conforms to <code>SBSDKBarcodeScannerViewControllerDelegate</code>, it is automatically set as delegate.
/// \param parentViewController The view controller, the newly created instance is embedded into.
///
/// \param parentView The view, the newly created instance is embedded into.
///
- (nullable instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController parentView:(UIView * _Nonnull)parentView;
/// Installs the receiver as child view controller onto the parent view controllers view using its entire bounds area.
/// If <code>parentViewController</code> conforms to <code>SBSDKBarcodeScannerViewControllerDelegate</code> and if the delegate is <code>nil</code>, it is
/// automatically set as delegate.
/// \param parentViewController The view controller the newly created instance is embedded into.
///
/// \param parentView The view, the newly created instance is embedded into.
///
/// \param delegate The delegate for the receiver.
///
- (nullable instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController parentView:(UIView * _Nonnull)parentView delegate:(id <SBSDKBarcodeScannerViewControllerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of this class with the default configuration.
/// note:
/// It’s recommended to use the <code>init(parentViewController:parentView:delegate:)</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
/// Resets the barcode results accumulator that is used for smoother results.
/// It is recommended to explicitly reset it, when there is the intention to scan for another barcode.
- (void)resetAccumulation;
@end


/// The delegate protocol of <code>SBSDKBarcodeScannerViewController</code> that provides methods for
/// enabling/disabling detection and managing detected barcodes.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK41SBSDKBarcodeScannerViewControllerDelegate_")
@protocol SBSDKBarcodeScannerViewControllerDelegate
/// Informs the delegate that the receiver has detected some barcodes.
/// \param controller The calling <code>SBSDKBarcodeScannerViewController</code>.
///
/// \param codes Array of <code>SBSDKBarcodeScannerResult</code> containing the detected barcodes.
///
- (void)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller didDetectBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes;
@optional
/// Asks the delegate if the receiver should detect barcodes on the next video frame.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScannerViewController</code>.
///
///
/// returns:
/// <code>True</code>, if barcodes should be detected on the next video frame. <code>False</code> otherwise.
- (BOOL)barcodeScannerControllerShouldDetectBarcodes:(SBSDKBarcodeScannerViewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to filter the detected barcodes.
/// Optional.
/// \param controller The calling <code>SBSDKBarcodeScannerViewController</code>.
///
/// \param codes Array of <code>SBSDKBarcodeScannerResult</code> containing the detected barcodes.
///
///
/// returns:
/// The filtered array of barcodes to be delivered to the post-processing.
- (NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller filterResults:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes SWIFT_WARN_UNUSED_RESULT;
@end


/// A class that represents the style of the polygon rendered around a barcode in <code>SBSDKBarcodeTrackingOverlayController</code>.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK35SBSDKBarcodeTrackedViewPolygonStyle")
@interface SBSDKBarcodeTrackedViewPolygonStyle : NSObject
/// Turns polygon drawing on or off.
@property (nonatomic) BOOL polygonDrawingEnabled;
/// The color of the barcode polygon when not selected.
@property (nonatomic, strong) UIColor * _Nonnull polygonColor;
/// The color of the barcode polygon when selected.
@property (nonatomic, strong) UIColor * _Nonnull polygonSelectedColor;
/// The color of the barcode polygon’s background when not selected.
@property (nonatomic, strong) UIColor * _Nonnull polygonBackgroundColor;
/// The color of the barcode polygon’s background when selected.
@property (nonatomic, strong) UIColor * _Nonnull polygonBackgroundSelectedColor;
/// The width of the border around the barcode polygon.
@property (nonatomic) CGFloat borderWidth;
/// The corner radius of the border around the barcode polygon.
@property (nonatomic) CGFloat cornerRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIFont;

/// A class that represents the style and kind of the text rendered below a barcode in <code>SBSDKBarcodeTrackingOverlayController</code>.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK32SBSDKBarcodeTrackedViewTextStyle")
@interface SBSDKBarcodeTrackedViewTextStyle : NSObject
/// Turns text drawing on or off.
@property (nonatomic) BOOL textDrawingEnabled;
/// Determines the format of the text displayed on the barcode overlay.
/// Default: <code>SBSDKBarcodeOverlayFormat.codeAndType</code>
@property (nonatomic) enum SBSDKBarcodeOverlayFormat trackingOverlayTextFormat;
/// The font used for displaying barcode information.
@property (nonatomic, strong) UIFont * _Nonnull textFont;
/// The color of the barcode text.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The color of the barcode text when highlighted.
@property (nonatomic, strong) UIColor * _Nonnull selectedTextColor;
/// The background color of the barcode text.
@property (nonatomic, strong) UIColor * _Nonnull textBackgroundColor;
/// The background color of the barcode text when highlighted.
@property (nonatomic, strong) UIColor * _Nonnull textBackgroundSelectedColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBSDKTrackedBarcodeInfoViewable;

/// A class that represents the configuration options for a <code>SBSDKBarcodeTrackingOverlayController</code>.
/// This overlay is used to visualize the detected barcodes on the screen.
/// The class provides various customization options for the appearance and behavior of the overlay.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK40SBSDKBarcodeTrackingOverlayConfiguration")
@interface SBSDKBarcodeTrackingOverlayConfiguration : NSObject
/// Determines the default style of the polygon rendered around the barcode.
@property (nonatomic, strong) SBSDKBarcodeTrackedViewPolygonStyle * _Nonnull polygonStyle;
/// Determines the default style and kind of the text rendered around the barcode when not using a custom tracked view.
@property (nonatomic, strong) SBSDKBarcodeTrackedViewTextStyle * _Nonnull textStyle;
/// Determines whether the barcode polygons should be automatically selected and highlighted if tapped.
/// Default: <code>True</code>
@property (nonatomic) BOOL isSelectable;
/// Determines whether automatic barcode selection is enabled. When enabled, the detected barcodes will be automatically selected.
/// Default: <code>False</code>
@property (nonatomic) BOOL isAutomaticSelectionEnabled;
/// A custom view that can be displayed over the barcode. Must conform to <code>SBSDKTrackedBarcodeInfoView</code>.
@property (nonatomic, strong) UIView <SBSDKTrackedBarcodeInfoViewable> * _Nullable customView;
/// A custom view type that can be displayed over the barcode. Must conform to <code>SBSDKTrackedBarcodeInfoView</code>.
@property (nonatomic) SWIFT_METATYPE(UIView) <SBSDKTrackedBarcodeInfoViewable> _Nullable customViewType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBSDKBarcodeTrackingOverlayControllerDelegate;

/// A class that represents an overlay used for visualizing detected barcodes.
/// It provides a customizable user interface for displaying barcodes and supports interaction with them.
/// The overlay can be used to highlight and select barcodes based on user input.
/// note:
/// To use the barcode tracking overlay, you should set its <code>configuration</code> property to customize the appearance and behavior of the overlay.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK37SBSDKBarcodeTrackingOverlayController")
@interface SBSDKBarcodeTrackingOverlayController : NSObject
/// The configuration object that controls the appearance and behavior of the barcode tracking overlay.
@property (nonatomic, strong) SBSDKBarcodeTrackingOverlayConfiguration * _Nonnull configuration;
/// The delegate for the tracking overlay controller.
@property (nonatomic, weak) id <SBSDKBarcodeTrackingOverlayControllerDelegate> _Nullable delegate;
/// Wether the tracking overlay is hidden or not.
@property (nonatomic) BOOL isHidden;
/// Initializes and returns a barcode tracking overlay controller with the default configuration and no delegate.
///
/// returns:
/// An initialized <code>SBSDKBarcodeTrackingOverlay</code> instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Resets the tracking overlay, removes all tracked barcode views and clears the selected barcodes.
- (void)reset;
@end


/// The delegation protocol for the barcode tracking overlay controller.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK45SBSDKBarcodeTrackingOverlayControllerDelegate_")
@protocol SBSDKBarcodeTrackingOverlayControllerDelegate
@optional
/// Called when a barcode is being tapped on.
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param barcode The barcode the user tapped on.
///
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didTapOnBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode;
/// Called when the barcode selection has changed.
/// Only called if the barcode tracking overlay controllers configuration has its isSelectable property set to <code>True</code>.
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param selectedBarcodes The barcodes that are currently selected.
///
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didChangeSelectedBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)selectedBarcodes;
/// Asks the delegate to provide a custom style for a tracked barcodes polygon. Is called when drawing the polygon
/// view for the tracked barcode.
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param barcode The barcode that should be drawn on the overlay.
///
///
/// returns:
/// The polygon style to be used when drawing the polygon for the tracked barcode.
- (SBSDKBarcodeTrackedViewPolygonStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller polygonStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to provide a custom style for a tracked barcodes info view. Is called when drawing the
/// info view for the tracked barcode.
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param barcode The barcode that should be drawn on the overlay.
///
///
/// returns:
/// The text style to be used when drawing the polygon for the tracked barcode.
- (SBSDKBarcodeTrackedViewTextStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller textStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate to create a custom tracking view for the given barcode,
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param barcode The barcode the custom tracking view should represent.
///
///
/// returns:
/// The custom view.
- (UIView * _Nonnull)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller customViewFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
/// Informs the delegate that a custom tracked barcode view has been generated.
/// \param controller The barcode tracking overlay controller that the tracked barcode view belongs to.
///
/// \param view The custom view object that has been created. Can be used to perform additional configuration.
///
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didCreateCustomView:(UIView * _Nonnull)view;
/// Informs the delegate to update the custom tracking view for the given barcode.
/// \param controller The barcode tracking overlay controller that the tracking view belongs to.
///
/// \param view The custom tracking view.
///
/// \param barcode The barcode that is represented by the custom tracking view.
///
/// \param barcodeFrame The bounding rectangle of the barcode in view coordinates.
///
/// \param selected Whether the barcode is selected or not.
///
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller updateCustomView:(UIView * _Nonnull)view for:(SBSDKBarcodeScannerResult * _Nonnull)barcode barcodeFrame:(CGRect)barcodeFrame selected:(BOOL)selected;
@end


/// Class that represents a barcode type.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK16SBSDKBarcodeType")
@interface SBSDKBarcodeType : NSObject
/// The barcode type Aztec.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull aztec;)
+ (SBSDKBarcodeType * _Nonnull)aztec SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Codabar.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull codaBar;)
+ (SBSDKBarcodeType * _Nonnull)codaBar SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code25.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code25;)
+ (SBSDKBarcodeType * _Nonnull)code25 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code39.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code39;)
+ (SBSDKBarcodeType * _Nonnull)code39 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code93.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code93;)
+ (SBSDKBarcodeType * _Nonnull)code93 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code128.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code128;)
+ (SBSDKBarcodeType * _Nonnull)code128 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type DataMatrix.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull dataMatrix;)
+ (SBSDKBarcodeType * _Nonnull)dataMatrix SWIFT_WARN_UNUSED_RESULT;
/// The barcode type EAN-8.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull ean8;)
+ (SBSDKBarcodeType * _Nonnull)ean8 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type EAN-13.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull ean13;)
+ (SBSDKBarcodeType * _Nonnull)ean13 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Interleaved two-of-five (ITF).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull itf;)
+ (SBSDKBarcodeType * _Nonnull)itf SWIFT_WARN_UNUSED_RESULT;
/// The barcode type PDF-417.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull pdf417;)
+ (SBSDKBarcodeType * _Nonnull)pdf417 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type QR.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull qrCode;)
+ (SBSDKBarcodeType * _Nonnull)qrCode SWIFT_WARN_UNUSED_RESULT;
/// The barcode type MicroQR.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull microQrCode;)
+ (SBSDKBarcodeType * _Nonnull)microQrCode SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Databar.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull databar;)
+ (SBSDKBarcodeType * _Nonnull)databar SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Databar Expanded.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull databarExpanded;)
+ (SBSDKBarcodeType * _Nonnull)databarExpanded SWIFT_WARN_UNUSED_RESULT;
/// The barcode type UPC-A.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull upcA;)
+ (SBSDKBarcodeType * _Nonnull)upcA SWIFT_WARN_UNUSED_RESULT;
/// The barcode type UPC-E.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull upcE;)
+ (SBSDKBarcodeType * _Nonnull)upcE SWIFT_WARN_UNUSED_RESULT;
/// The barcode type MSI-PLESSEY.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull msiPlessey;)
+ (SBSDKBarcodeType * _Nonnull)msiPlessey SWIFT_WARN_UNUSED_RESULT;
/// The barcode type IATA_2_OF_5.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull iata2Of5;)
+ (SBSDKBarcodeType * _Nonnull)iata2Of5 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type INDUSTRIAL_2_OF_5.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull industrial2Of5;)
+ (SBSDKBarcodeType * _Nonnull)industrial2Of5 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type USPS Intelligent Mail, a.k.a. USPS OneCode, USPS-STD-11.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull uspsIntelligentMail;)
+ (SBSDKBarcodeType * _Nonnull)uspsIntelligentMail SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Royal Mail Four-State Customer Code, a.k.a. RM4SCC, CBC, BPO 4 State Code.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull royalMail;)
+ (SBSDKBarcodeType * _Nonnull)royalMail SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Japan Post Four-State.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull japanPost;)
+ (SBSDKBarcodeType * _Nonnull)japanPost SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Royal TNT Post Four-State Barcode, a.k.a. KIX, Klant IndeX.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull royalTNTPpost;)
+ (SBSDKBarcodeType * _Nonnull)royalTNTPpost SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Australia Post Four-State Customer Code.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull australiaPost;)
+ (SBSDKBarcodeType * _Nonnull)australiaPost SWIFT_WARN_UNUSED_RESULT;
/// The barcode type GS1 DataBar Limited.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull databarLimited;)
+ (SBSDKBarcodeType * _Nonnull)databarLimited SWIFT_WARN_UNUSED_RESULT;
/// The barcode type GS1 Composite.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull gs1Composite;)
+ (SBSDKBarcodeType * _Nonnull)gs1Composite SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Micro PDF 417.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull microPdf417;)
+ (SBSDKBarcodeType * _Nonnull)microPdf417 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type MAXI_CODE.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull maxiCode;)
+ (SBSDKBarcodeType * _Nonnull)maxiCode SWIFT_WARN_UNUSED_RESULT;
/// The barcode type RMQR Code.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull rmqrCode;)
+ (SBSDKBarcodeType * _Nonnull)rmqrCode SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code11.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code11;)
+ (SBSDKBarcodeType * _Nonnull)code11 SWIFT_WARN_UNUSED_RESULT;
/// The barcode type Code32.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBarcodeType * _Nonnull code32;)
+ (SBSDKBarcodeType * _Nonnull)code32 SWIFT_WARN_UNUSED_RESULT;
/// Name of the barcode type.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSInteger value;
/// Whether the barcode type can have extensions or not.
@property (nonatomic, readonly) BOOL isExtendedType;
/// Returns an array of all valid barcode types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeType *> * _Nonnull allTypes;)
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)allTypes SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of all commonly-used barcode types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeType *> * _Nonnull commonTypes;)
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)commonTypes SWIFT_WARN_UNUSED_RESULT;
/// Returns an array containing all 1-D barcode types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeType *> * _Nonnull oneDTypes;)
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)oneDTypes SWIFT_WARN_UNUSED_RESULT;
/// Returns an array containing all 2-D barcode types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeType *> * _Nonnull twoDTypes;)
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)twoDTypes SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of postal barcode types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKBarcodeType *> * _Nonnull postalTypes;)
+ (NSArray<SBSDKBarcodeType *> * _Nonnull)postalTypes SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKBarcodeType * _Nullable)typeWith:(NSUInteger)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBSDKUI2BarcodeFormat;

@interface SBSDKBarcodeType (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Converts from <code>SBSDKBarcodeType</code> to <code>SBSDKUI2BarcodeFormat</code>.
- (SBSDKUI2BarcodeFormat * _Nonnull)fromSDKType SWIFT_WARN_UNUSED_RESULT;
@end

/// Filter for extended EAN and UPC barcodes.
typedef SWIFT_ENUM(NSInteger, SBSDKBarcodesExtensionFilter, open) {
/// EAN and UPC barcoded with or without extensions will be returned.
  SBSDKBarcodesExtensionFilterNoFilter = 0,
/// Only EAN and UPC barcoded with extensions will be returned.
  SBSDKBarcodesExtensionFilterOnlyWithExtensions = 1,
/// Only EAN and UPC barcoded without extensions will be returned.
  SBSDKBarcodesExtensionFilterOnlyWithoutExtensions = 2,
};


/// The energy management configuration object for a ‘SBSDKBaseScannerViewController’ and its subclasses.
/// ‘SBSDKBaseScannerViewController’ and subclasses sport a customizable energy management system.
/// Since detectors and recognizers running on a live video feed can put a lot of load onto the CPU and/or GPU
/// of the device, causing the battery to drain quickly and running the device hot, you can customize the energy
/// consumption using this class by configuring the rate of detections/recognitions per second in performance mode as
/// well as in energy saving mode.
/// In performance mode the detectors/recognizers will be fed with a higher, configurable rate of
/// video frames per second.
/// After a certain, configurable period of inactivity the energy save mode will be engaged and the rate
/// of detections/recognitions will be reduced to a lower (configurable) rate.
/// You can also configure the time of inactivity before the automatic mode switches from performance to energy save mode.
/// Inactivity here means that both of the following conditions are met:
/// <ol>
///   <li>
///     The device did not register significant motion for this period.
///   </li>
///   <li>
///     No positive detector/recognizer results have been registered during this period.
///     Once in energy save mode the device can only return to performance mode if it is moved significantly or a positive
///     detection/recognition result was registered.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK35SBSDKBaseScannerEnergyConfiguration")
@interface SBSDKBaseScannerEnergyConfiguration : NSObject
/// Set to <code>True</code>, if automatic energy saving should be enabled. With automatic energy saving enabled the
/// base scanner view controller will, after a certain time of inactivity, enter the energy save mode by lowering the
/// detection/recognition rate.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isEnergySavingEnabled;
/// The rate of detections/recognitions per second in normal performance mode.
/// Defaults to 20, meaning that 20 frames per second are detected/recognized, equally distributed over one second.
/// When the video frame rate is 30, 10 frames will be skipped and 20 frames will be detected/recognized.
/// Note: if you set the detection rate greater to or equal to the video frame rate, no frames will be skipped,
/// the actual detection rate is limited by the video frame rate.
@property (nonatomic) NSUInteger detectionRate;
/// The rate of detections/recognitions per second in energy save mode.
/// Defaults to 1, meaning that 1 frame per second is detected/recognized.
/// When the video frame rate is 30, 29 frames will be skipped, 1 frame is detected/recognized.
/// Note: if you set the detection rate greater to or equal to the video frame rate, no frames will be skipped,
/// the actual detection rate is limited by the video frame rate.
/// Note: Usually you set a much lower value here as for the detectionRate property to save energy.
@property (nonatomic) NSUInteger energySaveDetectionRate;
/// The amount of time in seconds of no activity in performance mode before the energy save mode will be engaged.
/// Defaults to 4 seconds.
@property (nonatomic) NSTimeInterval inactivityTimeout;
/// The sensitivity to device motion. The lower the value the less motion of the device is required to prevent the scanner from entering energy save mode.
/// Defaults to 4.0
@property (nonatomic) CGFloat motionSensitivity;
/// This is the default configuration with the properties initialized as mentioned in their description.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBaseScannerEnergyConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKBaseScannerEnergyConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A wrapper class for video frames.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK21SBSDKBaseScannerFrame")
@interface SBSDKBaseScannerFrame : NSObject
/// The <code>UIImage</code>representation of the receiver.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// The JPEG-data representation of the receiver.
@property (nonatomic, readonly, copy) NSData * _Nullable imageData;
/// Initializes a frame from a sample buffer as it is typically aquired from the camera.
/// \param sampleBuffer The sample buffer to initialize the receiver from.
///
- (nonnull instancetype)initWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer OBJC_DESIGNATED_INITIALIZER;
/// Initializes a frame from a sample buffer as it is typically aquired from the camera and rotates it according to the given orientation.
/// \param sampleBuffer The sample buffer to initialize the receiver from.
///
/// \param orientation The orientation of the sample buffer.
///
- (nonnull instancetype)initWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer orientation:(AVCaptureVideoOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
/// Initializes a frame from an image.
/// \param image The <code>UIImage</code> to initialize the frame with.
///
/// \param ignoreOrientation If set to <code>True</code>, the orientation of the images metadata is ignored. Set to ‘False’ to rotate the image data according to its metadata.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image ignoreOrientation:(BOOL)ignoreOrientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SBSDKVideoFrameResolution : NSInteger;
enum SBSDKVideoContentMode : NSInteger;
enum SBSDKVideoFlipMode : NSInteger;
enum SBSDKCapturePhotoQualityPrioritization : NSInteger;

/// The general configuration object for a ‘SBSDKBaseScannerViewController’ and its subclasses.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKBaseScannerGeneralConfiguration")
@interface SBSDKBaseScannerGeneralConfiguration : NSObject
/// The video frame resolution of the preview layer.
/// Defaults to <code>SBSDKVideoFrameResolution/auto</code>.
/// Higher resolutions may improve scanning results but slow down the scanning performance.
/// In some cases a higher resolution may even decrease the scanning quality.
/// It is therefore recommended to keep this setting at <code>SBSDKVideoFrameResolution/auto</code>.
@property (nonatomic) enum SBSDKVideoFrameResolution videoFrameResolution;
/// The content mode of the video preview layer: fit-in or fill-in. Defaults to <code>SBSDKVideoContentMode/fillIn</code>.
@property (nonatomic) enum SBSDKVideoContentMode videoContentMode;
/// Defines how video frames, still images and the camera previer layer are flipped.
/// Defaults to <code>SBSDKVideoFlipMode/none</code>.
@property (nonatomic) enum SBSDKVideoFlipMode videoFlipMode;
/// The prioritization of still image quality and capturing speed.
/// Defaults to <code>SBSDKCapturePhotoQualityPrioritization/balanced</code>.
/// If you experience lots of blurry still images try to set this property to SBSDKCapturePhotoQualityPrioritization.
@property (nonatomic) enum SBSDKCapturePhotoQualityPrioritization photoQualityPrioritization;
/// If set to <code>True</code>, the camera session will be stopped entirely, when the base scanner view controller disappears and restarts when it reappears.
/// The base scanner view controller will cause no CPU load after it disappeared.
/// Setting it to <code>False</code> will NOT stop the camera session, but pauses the delivery of video frames from the camera session to the base scanner view controller.
/// There is some low CPU activity while the base scanner view controller is not on screen, but there is also no delay when the receiver returns to the screen.
@property (nonatomic) BOOL stopsCameraSessionWhenDisappeared;
/// The delay of recognition after appearance in seconds. Defaults to 0 seconds.
@property (nonatomic) NSTimeInterval initialScanDelay;
/// Disables auto-focus and locks the lens at the specified focus lens position. The default value is <code>False</code>.
@property (nonatomic) BOOL isFocusLockEnabled;
/// The position of the lens. Values can be between 0.0 (minimum focusing distance) and 1.0 (maximum focusing distance). The value will be clamped to [0.0, 1.0].
/// Defaults to 0.0.
@property (nonatomic) CGFloat focusLockPosition;
/// Whether the receiver plays a flash-light animation when capturing images or not. Defaults to <code>False</code>. */
@property (nonatomic) BOOL playFlashAnimation;
/// To prevent blurred images before the video frame is sent to the detector, the device must have registered no significant motion for a certain amount of time.
/// This property defines this amount of time.
/// By default it is set to 0.0 seconds for the most scanners.
@property (nonatomic) NSTimeInterval minimumTimeWithoutDeviceMotionBeforeDetection;
/// This is the default configuration with the properties initialized as mentioned in their description.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBaseScannerGeneralConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKBaseScannerGeneralConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@class SBSDKCameraSession;

/// The  delegate protocol for <code>SBSDKCameraSession</code>.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK26SBSDKCameraSessionDelegate_")
@protocol SBSDKCameraSessionDelegate
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didOutput:(SBSDKBaseScannerFrame * _Nonnull)frame;
@end


@interface SBSDKBaseScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKCameraSessionDelegate>
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didOutput:(SBSDKBaseScannerFrame * _Nonnull)frame;
@end




/// A multicast-oberserver protocol that informs its oberservers about state changes of a camera session.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK27SBSDKCameraSessionObserving_")
@protocol SBSDKCameraSessionObserving
@optional
/// Informs the observer that the camera device has been changed.
/// \param session The camera session that changed the camera device.
///
/// \param device The new camera device of the camera session.
///
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didChangeDevice:(SBSDKCameraDevice * _Nonnull)device;
/// Informs the observer that the torch light has been toggled on or off.
/// \param session The camera session that toggled the torch light.
///
/// \param enabled Whether the light was turned on or off.
///
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didToggleTorchlight:(BOOL)enabled;
/// Informs the observer that the zoom value has changed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     session: The camera session that changed the zoom.
///   </li>
///   <li>
///     zoomValue: The new zoom value of the camera session.
///   </li>
/// </ul>
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didChangeZoom:(CGFloat)zoomValue;
@end


@interface SBSDKBaseScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKCameraSessionObserving>
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didToggleTorchlight:(BOOL)enabled;
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didChangeZoom:(CGFloat)zoomValue;
- (void)cameraSession:(SBSDKCameraSession * _Nonnull)session didChangeDevice:(SBSDKCameraDevice * _Nonnull)device;
@end

@class SBSDKFinderView;

/// The delegate protocol for the <code>SBSDKFinderView</code> class.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK23SBSDKFinderViewDelegate_")
@protocol SBSDKFinderViewDelegate
@optional
/// Informs the delegate, that the finder view has changed its finder rectangle.
/// Optional.
/// \param view The finder view that changed its finder viewport rectangle. Can be <code>nil</code>, if it has been removed.
///
/// \param rect The new rectangle of the finder viewport.
///
- (void)finderView:(SBSDKFinderView * _Nonnull)view didChangeRect:(CGRect)rect;
@end


@interface SBSDKBaseScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKFinderViewDelegate>
- (void)finderView:(SBSDKFinderView * _Nonnull)view didChangeRect:(CGRect)didChangeRect;
@end



@class UIVisualEffect;

/// The view finder configuration object for a ‘SBSDKBaseScannerViewController’ and its subclasses.
/// Sometimes it is necessary to limit a live video frame detection or recognition to a certain rectangular area with
/// a specific aspect ratio: the region or rectangle of interest. This is where a view finder comes in.
/// It crops the video frame to that region of interest before passing it to any detector or recognizer. Usually
/// the performance of detectors/recognizers gain a benefit from it because less pixels must be processed.
/// Additionally, to guide the user, the view finder visualizes the region of interest by drawing a rectangle around
/// on the user interface.
/// Since the display resp. the camera view size differs from device to device specifying the region of interest
/// in absolute screen points would require some additional calculations and therefore be inconvenient.
/// Instead a combination of aspect ratio and minimum distances to the view(screen) edges is used.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK39SBSDKBaseScannerViewFinderConfiguration")
@interface SBSDKBaseScannerViewFinderConfiguration : NSObject
/// Set to <code>True</code> to enable and display the region of interest, to <code>False</code> otherwise.
/// Defaults to <code>False</code>.
@property (nonatomic) BOOL isViewFinderEnabled;
/// The drawing style of the finder view.
/// Defaults to <code>SBSDKFinderView/Style/stroke</code>.
@property (nonatomic) enum SBSDKFinderViewStyle style;
/// The aspect ratio of the region of interest. Defaults to 4:3.
@property (nonatomic, strong) SBSDKAspectRatio * _Nonnull aspectRatio;
/// The minimum space from view finders outer edges to the view/screen edges.
/// Defaults to {20, 20, 20, 20}.
@property (nonatomic) UIEdgeInsets minimumInset;
/// If positive, the receiver will try to maintain the preferred height and the aspect ratio for the finder by dynamically
/// changing the inset. If negative this property will be ignored.
/// Defaults to -1;
@property (nonatomic) CGFloat preferredHeight;
/// The offset of the view finder.
/// Defaults to {0, 0}.
@property (nonatomic) CGPoint offset;
/// The area where the finder should be placed in the coordinate system of the receiver.
/// Is ignored if finder safe area is empty (zero height or width).
/// Defaults to the zero rectangle.
@property (nonatomic) CGRect finderSafeArea;
/// If set to <code>False</code>, the finder is inset by the safe area insets. Otherwise the safe area inset is ignored.
/// Defaults to <code>False</code>;
@property (nonatomic) BOOL ignoresSafeAreaInsets;
/// The aspect ratio of the secondary view finder that is displayed with dashed lines.
/// If set to <code>nil</code> no secondary view finder is drawn.
/// Defaults to <code>nil</code>.
@property (nonatomic, strong) SBSDKAspectRatio * _Nullable secondaryAspectRatio;
/// The minimum space from the primary view finder to the secondary view finder for each edge.
/// Defaults to {10, 10, 10, 10}.
@property (nonatomic) UIEdgeInsets secondaryMinimumInset;
/// The line color of the view finders outline. Can be <code>nil</code> to not display the outline.
/// Defaults to a fully opaque white color.
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// The color of the background outside the view finders outline. Use this color to mask the region
/// that is not of interest.
/// Defaults to a black color with an opacity of 0.66, slightly darkening the non-interest area of the screen.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// The corner radius of the view finders outline.
/// Defaults to 8 points.
@property (nonatomic) CGFloat lineCornerRadius;
/// The line width of the view finders outline.
/// Defaults to 2 points.
@property (nonatomic) CGFloat lineWidth;
/// Set to <code>True</code> to animate the view finder when changing the aspect ratio or minimum insets, to <code>False</code> if changes should not be animated.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isAnimatingChanges;
/// The visual effect applied to the area outside the view finder. If <code>nil</code>, no effect is applied.
/// Defaults to <code>nil</code>.
@property (nonatomic, strong) UIVisualEffect * _Nullable backgroundEffect;
/// This is the default configuration with the properties initialized as mentioned in their description.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBaseScannerViewFinderConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKBaseScannerViewFinderConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKZoomRange;

/// The zoom configuration object for a ‘SBSDKBaseScannerViewController’ and its subclasses.
/// ‘SBSDKBaseScannerViewController’ and subclasses allow the user to zoom the camera.
/// This class lets you customize the zooming user experience.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK33SBSDKBaseScannerZoomConfiguration")
@interface SBSDKBaseScannerZoomConfiguration : NSObject
/// Wether zooming is enabled or disabled at all. Defaults to <code>True</code>.
@property (nonatomic) BOOL isZoomingEnabled;
/// The range (min and max factor) of the cameras zoom factor. Default value is (1.0; 12.0).
@property (nonatomic, strong) SBSDKZoomRange * _Nonnull zoomRange;
/// The initial zoom factor. Must be in the range of (0.0 - 1.0), where 0.0 equals to the lower limit of zoomRange and 1.0 equals to the upper limit of zoomRange.
/// Defaults to 0.0.
@property (nonatomic) CGFloat initialZoomFactor;
/// When this property is set to YES, the zoom can be toggled between the minimum and maximum zoom factor, defined in the zoomRange property, by just double-tapping anywhere in the base scanner view controllers view.
/// If set to <code>False</code>, zooming by double-tapping will be disabled.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isDoubleTapToZoomEnabled;
/// When this property is set to YES, the camera zoom can be controlled by a pinch gesture anywhere in the base scannner view controllers view.
/// If set to <code>False</code>, zooming by pinching will be disabled.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isPinchToZoomEnabled;
/// Defines, if zooming in or out should be animated. This applies to double-tap zooming as well as to programmatically triggered zooms.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL shouldAnimateZooming;
/// This is the default configuration with the properties initialized as mentioned in their description.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKBaseScannerZoomConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKBaseScannerZoomConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum SBSDKCameraDeviceType : NSInteger;
enum SBSDKCameraDevicePosition : NSInteger;
@class AVCaptureDevice;

/// The camera device to be used with a <code>SBSDKCameraSession</code>.
/// To retrieve a list of available devices you can pass to many of SDKs classic or RTU-UI component please use
/// the class functions starting with availableDevices…
/// note:
/// On iOS simulators fake devices are returned to allow your code to be tested.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK17SBSDKCameraDevice")
@interface SBSDKCameraDevice : NSObject
/// The type of the camera: triple, dual, dual-wide, wide angle, telephoto, ultra-wide, etc. Readonly.
@property (nonatomic, readonly) enum SBSDKCameraDeviceType deviceType;
/// The position of the camera: front side or back side of the device. Readonly.
@property (nonatomic, readonly) enum SBSDKCameraDevicePosition devicePosition;
/// The name of the camera, e.g. “Front camera - Wide”.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The AVFoundation capture device.
/// warning:
/// Do not use or manipulate directly, as this might lead to an unstable or undefined state of the camera!
/// note:
/// On iOS simulators this is <code>nil</code>.
@property (nonatomic, readonly, strong) AVCaptureDevice * _Nullable device;
/// Returns the default back side camera, which in most cases is the triple or dual camera.
/// Returns <code>nil</code>, if there is no back facing camera available (iOS simulator).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKCameraDevice * _Nullable defaultBackFacingCamera;)
+ (SBSDKCameraDevice * _Nullable)defaultBackFacingCamera SWIFT_WARN_UNUSED_RESULT;
/// Returns the default front side camera, which in most cases is the frontside, wide angle camera.
/// Returns <code>nil</code>, if there is no front facing camera available (iOS simulator).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKCameraDevice * _Nullable defaultFrontFacingCamera;)
+ (SBSDKCameraDevice * _Nullable)defaultFrontFacingCamera SWIFT_WARN_UNUSED_RESULT;
/// Returns the back side camera with the widest lens available.
/// Use this camera when you want to focus very close or on tiny objects.
/// Returns <code>nil</code>, if there is no back facing camera available (iOS simulator).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKCameraDevice * _Nullable widestAvailableBackFacingCamera;)
+ (SBSDKCameraDevice * _Nullable)widestAvailableBackFacingCamera SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of all available and supported cameras of the device.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKCameraDevice *> * _Nonnull availableDevices;)
+ (NSArray<SBSDKCameraDevice *> * _Nonnull)availableDevices SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of all available and supported cameras of the device at the given position.
/// \param position The position of the requested cameras: front or back.
///
///
/// returns:
/// A list of the supported available cameras of the current device for the given position.
+ (NSArray<SBSDKCameraDevice *> * _Nonnull)availableDevicesForPosition:(enum SBSDKCameraDevicePosition)position SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of all available and supported cameras of the device of the given type.
/// \param type The type of the requested cameras: wide, ultra-wide, tele, etc.
///
///
/// returns:
/// A list of the supported available cameras of the current device for the given type.
+ (NSArray<SBSDKCameraDevice *> * _Nonnull)availableDevicesForType:(enum SBSDKCameraDeviceType)type SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of all available and supported cameras of the device of the given type and position.
/// \param type The type of the requested cameras: wide, ultra-wide, tele, etc.
///
/// \param position The position of the requested cameras: front or back.
///
///
/// returns:
/// A list of the supported available cameras of the current device for the given type and position.
+ (NSArray<SBSDKCameraDevice *> * _Nonnull)availableDevicesForType:(enum SBSDKCameraDeviceType)type andPosition:(enum SBSDKCameraDevicePosition)position SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enum to describe the physical position of a camera device.
typedef SWIFT_ENUM(NSInteger, SBSDKCameraDevicePosition, open) {
/// The camera is located on the back side of the device.
  SBSDKCameraDevicePositionBack = 0,
/// The camera is located on the front side of the device.
  SBSDKCameraDevicePositionFront = 1,
};

/// An enum to describe the different types of camera lenses/devices.
typedef SWIFT_ENUM(NSInteger, SBSDKCameraDeviceType, open) {
/// The wide angle lens/device.
  SBSDKCameraDeviceTypeWide = 0,
/// The telephoto lens/device.
  SBSDKCameraDeviceTypeTele = 1,
/// The ultra-wide lens/device.
  SBSDKCameraDeviceTypeUltraWide = 2,
/// The dual-wide lens/device (wide + ultra-wide).
  SBSDKCameraDeviceTypeDualWide = 3,
/// The dual lens/device (wide + tele).
  SBSDKCameraDeviceTypeDual = 4,
/// The triple lens/device (ultra-wide + wide + tele).
  SBSDKCameraDeviceTypeTriple = 5,
/// A simulated camera that can simulate a video stream by looping a video or a single image.
/// Also used on iPhone/iPad simulators without providing a video stream.
  SBSDKCameraDeviceTypeSimulated = 6,
};


/// This class provides information about the current cameras exposure settings.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKCameraExposureSettings")
@interface SBSDKCameraExposureSettings : NSObject
/// The exposure duration of the camera in milliseconds.
@property (nonatomic, readonly) double exposureDuration;
/// The exposure target offset in EV.
/// Negative values mean the image is too dark, positive values mean the image is too bright.
/// Usually the camera automatically tries to adapt its exposure parameters to keep the exposure target offset at a
/// value of 0 resulting in a proper exposure of the image.
/// If this value is not close to 0 the camera cannot adjust its exposure parameters properly, the image is either
/// way too dark or too bright.
@property (nonatomic, readonly) float exposureTargetOffset;
/// The ISO (or amplification) value of the camera.
/// The higher the value the more noise and less detail the image will have.
@property (nonatomic, readonly) float ISOValue;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVCaptureVideoPreviewLayer;
@class AVCaptureSession;
enum SBSDKFeature : NSInteger;

/// An easy-to-use wrapper around the AVFoundations video capture session. Sets up and configures the
/// camera device and the preview layer. Provides functionality to capture still images.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK18SBSDKCameraSession")
@interface SBSDKCameraSession : NSObject
/// The camera device to be used.
@property (nonatomic, strong) SBSDKCameraDevice * _Nonnull device;
/// The preview layer that the camera device uses to output the current video frames.
/// Can be added to any superlayer.
/// important:
/// Initially the preview layer is hidden.
@property (nonatomic, strong) AVCaptureVideoPreviewLayer * _Nonnull previewLayer;
/// The AVCaptureSession object.
@property (nonatomic, strong) AVCaptureSession * _Nullable captureSession;
/// Returns the video resolution of the current video output. Orientation is taken into account.
/// Returns CGSizeZero, if the capture session is not running.
@property (nonatomic, readonly) CGSize videoResolution;
/// Sets or gets the current video orientation.
@property (nonatomic) AVCaptureVideoOrientation videoOrientation;
/// Sets or gets the current video frame resolution.
@property (nonatomic) enum SBSDKVideoFrameResolution videoFrameResolution;
/// The delegate object for camera output.
/// Its receives the video frames and does still image captures.
/// Delegates can implement all functions from <code>AVCaptureVideoDataOutputSampleBufferDelegate</code>.
@property (nonatomic, weak) id <SBSDKCameraSessionDelegate> _Nullable videoDelegate;
/// Returns <code>True</code> if the camera is currently in the process of taking a still image, <code>False</code> otherwise.
@property (nonatomic, readonly) BOOL isCapturingStillImage;
/// Returns <code>True</code> if the camera device has a torch light and the torch light is available, <code>False</code> otherwise.
@property (nonatomic, readonly) BOOL isTorchLightAvailable;
/// Turns the torch light on or off.
@property (nonatomic) BOOL isTorchLightEnabled;
/// A block being executed when the torch light status changes (mode or availability).
@property (nonatomic, copy) void (^ _Nullable updateTorchlightBlock)(void);
/// A block being executed when the zoom factor has changed. The new zoom factor is provided as parameter.
@property (nonatomic, copy) void (^ _Nullable updateZoomBlock)(CGFloat);
/// The camera devices minimum zoom factor. Readonly.
@property (nonatomic, readonly) CGFloat minZoom;
/// The camera devices maximum zoom factor. Readonly.
@property (nonatomic, readonly) CGFloat maxZoom;
/// The camera devices maximum optical zoom factor. Readonly.
/// Setting higher zoom factor will result in digital zooming and degraded image quality.
@property (nonatomic, readonly) CGFloat maxOpticalZoom;
/// Sets or gets the camera devices current zoom factor. Zooming is done without animation.
/// If the new value exceeds the minimum or maximum value for zooming it is clamped.
@property (nonatomic) CGFloat zoomValue;
/// Returns <code>True</code> if the camera session mirrors its video, <code>False</code> otherwise.
@property (nonatomic, readonly) BOOL isMirrored;
/// Returns <code>True</code>, if the camera currently is zooming, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isZooming;
/// Returns <code>True</code>, if the camera zoom is available, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isZoomAvailable;
/// Returns <code>True</code>, if the cameras focus is locked, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isFocusLockEnabled;
/// The prioritization of still image quality and capturing speed.
/// Defaults to <code>SBSDKCapturePhotoQualityPrioritization/balanced</code>.
@property (nonatomic) enum SBSDKCapturePhotoQualityPrioritization photoQualityPrioritization;
/// The content mode of the video preview layer: fit-in or fill-in. Defaults to <code>SBSDKVideoContentMode/fillIn</code>.
@property (nonatomic) enum SBSDKVideoContentMode videoContentMode;
/// Returns the current cameras exposure settings.
@property (nonatomic, readonly, strong) SBSDKCameraExposureSettings * _Nullable exposureSettings;
/// Returns <code>True</code>, if the front side camera is used, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isFrontCameraUsed;
/// Returns <code>True</code>, if the live detection is paused, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isDetectionPaused;
/// Returns <code>True</code>, if the camera is currently adjusting autofocus, exposure or white balance,
/// false otherwise. Readonly.
@property (nonatomic, readonly) BOOL isCameraAdjusting;
/// Returns <code>True</code> if the camera session is running, <code>False</code> otherwise. Readonly.
@property (nonatomic, readonly) BOOL isSessionRunning;
/// The designated initializer of the class. Does not start the capture session.
/// \param feature The feature you want to use the camera for.
///
- (nullable instancetype)initWithFeature:(enum SBSDKFeature)feature;
/// Convenience initializer of the class. Does not start the capture session.
/// \param feature The feature you want to use the camera for.
///
/// \param device The camera device to be used.
///
- (nullable instancetype)initWithFeature:(enum SBSDKFeature)feature device:(SBSDKCameraDevice * _Nonnull)device OBJC_DESIGNATED_INITIALIZER;
/// Starts the camera capture session asynchronously and calls the completion block when finished.
/// \param completion Completion handler with boolean flag, indicating if the session is running or not.
///
- (void)startSession:(void (^ _Nullable)(BOOL))completion;
/// Stops the camera capture session. Does nothing if the session is already stopped.
- (void)stopSession;
/// Pauses the delivery of frames to the delegate.
- (void)pauseDetection;
/// Resumes the delivery of frames to the delegate.
- (void)resumeDetection;
/// Freezes the camera session.
- (void)freezeSession;
/// Unfreezes the camera session.
- (void)unfreezeSession;
/// Sets the camera devices current zoom factor.
/// If the new value exceeds the minimum or maximum value for zooming it is clamped.
/// \param value The new zoom factor to be set.
///
/// \param animated If <code>True</code>, the zooming is animated, otherwise the change is applied without an animation.
///
- (void)setZoomValue:(CGFloat)value animated:(BOOL)animated;
/// Resets the zoom factor to the minimum zoom value.
/// \param animated If <code>True</code>, the zooming is animated, otherwise the change is applied without an animation.
///
- (void)resetZoomAnimated:(BOOL)animated;
/// Disables auto-focus and locks the lens at the specified lens position.
/// \param lensPosition The position of the lens. Values can be between 0.0 (minimum focusing distance) and
/// 1.0 (maximum focusing distance). The value will be clamped into the range [0.0, 1.0].
///
///
/// returns:
/// <code>True</code>, if the attempt to lock the focus was successful,
/// false if the attempt failed or if focus lock is not available.
- (BOOL)beginFocusLockAtLensPosition:(CGFloat)lensPosition SWIFT_WARN_UNUSED_RESULT;
/// Ends the focus lock and returns to standard continous auto-focus.
- (void)endFocusLock;
/// Captures a still image asynchronously and passes the image data or an error to the completion handler.
/// \param completion The completion handler.
///
- (void)captureStillImageWithCompletionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
/// Toggles the visibility of the camera preview.
/// \param visible <code>True</code>, if the camera preview should be visible, <code>False</code> otherwise.
///
/// \param animated <code>True</code>, if the change of visibility should be animated, <code>False</code> otherwise.
///
- (void)setPreviewLayerVisible:(BOOL)visible animated:(BOOL)animated;
/// Adds a new observer to the list of observers.
/// \param observer The new observer that listens to state changes.
///
- (void)addSessionObserver:(id <SBSDKCameraSessionObserving> _Nonnull)observer;
/// Removes an observer from the list of observers.
/// \param observer The observer that should no longer listen to state changes.
///
- (void)removeSessionObserver:(id <SBSDKCameraSessionObserving> _Nonnull)observer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@class AVCaptureOutput;
@class AVCaptureConnection;

@interface SBSDKCameraSession (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end



/// The prioritization of still image quality and capturing speed.
typedef SWIFT_ENUM(NSInteger, SBSDKCapturePhotoQualityPrioritization, open) {
/// Captures a still image at the highest possible speed. The quality of the image may be degraded.
  SBSDKCapturePhotoQualityPrioritizationSpeed = 0,
/// Balances capturing speed and image quality equally. This is the default value.
  SBSDKCapturePhotoQualityPrioritizationBalanced = 1,
/// Captures a still image with the best possible quality in terms of noise, frozen motion and detail in low light.
/// The speed of the capturing might be significantly reduced.
  SBSDKCapturePhotoQualityPrioritizationQuality = 2,
};


/// A <code>UILabel</code> subclass with rounded corners and content insets to display the status of the current document detection result.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK25SBSDKDetectionStatusLabel")
@interface SBSDKDetectionStatusLabel : UILabel
/// The text insets for the receiver.
/// Defaults to (6, 12, 6, 12).
@property (nonatomic) UIEdgeInsets textInsets;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines SWIFT_WARN_UNUSED_RESULT;
- (void)drawTextInRect:(CGRect)rect;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// Helper class that delivers information about the used iOS device.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK22SBSDKDeviceInformation")
@interface SBSDKDeviceInformation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// The name of the device, e.g. “iPhone15,2”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceName;)
+ (NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
/// The full name of the device including the iOS version, e.g. “iPhone15,2 (16.0.1)”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fullDeviceName;)
+ (NSString * _Nonnull)fullDeviceName SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>True</code> if the current device is a simulator, <code>False</code> otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isSimulatorDevice;)
+ (BOOL)isSimulatorDevice SWIFT_WARN_UNUSED_RESULT;
/// Returns the maximum recommended image size for this device.
/// warning:
/// Processing larger images may lead to memory pressure and crashes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGSize maximumRecommendedImageSize;)
+ (CGSize)maximumRecommendedImageSize SWIFT_WARN_UNUSED_RESULT;
/// The total amount of disk space of the device in bytes.
///
/// returns:
/// The total amount of disk space of the device in bytes. In case of error the return value is -1.
+ (int64_t)totalDiskSpaceInBytes SWIFT_WARN_UNUSED_RESULT;
/// The amount of unused disk space of the device in bytes.
///
/// returns:
/// The amount of unused disk space of the device in bytes. In case of error the return value is -1.
+ (int64_t)freeDiskSpaceInBytes SWIFT_WARN_UNUSED_RESULT;
/// The amount of used disk space of the device in bytes.
///
/// returns:
/// The amount of used disk space of the device in bytes. In case of error the return value is -1.
+ (int64_t)usedDiskSpaceInBytes SWIFT_WARN_UNUSED_RESULT;
/// The total amount of disk space of the device as a formatted and localized string.
///
/// returns:
/// The total amount of disk space of the device as a formatted and localized string.
+ (NSString * _Nonnull)totalDiskSpace SWIFT_WARN_UNUSED_RESULT;
/// The amount of unused disk space of the device as a formatted and localized string.
///
/// returns:
/// The amount of unused disk space of the device as a formatted and localized string.
+ (NSString * _Nonnull)freeDiskSpace SWIFT_WARN_UNUSED_RESULT;
/// The amount of used disk space of the device as a formatted and localized string.
///
/// returns:
/// The amount of used disk space of the device as a formatted and localized string.
+ (NSString * _Nonnull)usedDiskSpace SWIFT_WARN_UNUSED_RESULT;
@end

/// The error codes in the SBSDKErrorDomain.
typedef SWIFT_ENUM(NSInteger, SBSDKErrorCode, open) {
/// The operation was cancelled.
  SBSDKErrorCodeCancelled = 1,
/// The image storage was invalid or nil.
  SBSDKErrorCodeInvalidImageStorage = 2,
/// The image storage was invalid or nil.
  SBSDKErrorCodeImageStorageCopyingFailed = 3,
/// The image file did not contain valid image data.
  SBSDKErrorCodeInvalidImageData = 4,
/// The file does not exist.
  SBSDKErrorCodeInvalidFileURL = 5,
/// There was an unknown error while rendering a PDF page.
  SBSDKErrorCodePDFCreation = 6,
/// Optical text recognition failed.
  SBSDKErrorCodeTextRecognition = 7,
/// Page analysis failed.
  SBSDKErrorCodePageAnalysis = 8,
/// Language data for text recognition is missing.
  SBSDKErrorCodeOCRLanguageMissing = 9,
/// There was an unknown error while rendering pdf metadata.*/
  SBSDKErrorCodePDFMetadataCreation = 10,
/// Some other error.
  SBSDKErrorCodeUnknown = 999,
};

/// The features that are activated in the ScanbotSDK license.
typedef SWIFT_ENUM(NSInteger, SBSDKFeature, open) {
/// Payform detection is enabled in the license. Currently unused.
  SBSDKFeaturePayformDetection = 0,
/// Document detection is enabled in the license.
  SBSDKFeatureEdgeDetection = 1,
/// Document detection user interface is enabled in the license.
  SBSDKFeatureEdgeDetectionUI = 2,
/// Image processing is enabled in the license.
  SBSDKFeatureImageProcessing = 3,
/// Optical character recognition is enabled in the license.
  SBSDKFeatureOCR = 4,
/// Data intelligence is enabled in the licence. Currently unused.
  SBSDKFeatureDataIntelligence = 5,
/// PDF creation is enabled in the licence.
  SBSDKFeaturePDFCreation = 6,
/// Cloud upload is enabled in the licence. Currently unused.
  SBSDKFeatureCloudUpload = 7,
/// Credit card recognition is enabled in the licence. Currently unused.
  SBSDKFeatureCreditCardRecognition = 8,
/// Barcode detection is enabled in the licence.
  SBSDKFeatureBarcodeDetection = 9,
/// W2 document detection is enabled in the licence. Currently unused.
  SBSDKFeatureW2Detection = 10,
/// Check recognition is enabled in the licence.
  SBSDKFeatureCheckRecognition = 11,
/// Invoice recognition is enabled in the licence. Currently unused.
  SBSDKFeatureInvoiceDetection = 12,
/// Machine-readable-zone detection is enabled in the licence.
  SBSDKFeatureMRZRecognition = 13,
/// Medical certificate recognition is enabled in the licence.
  SBSDKFeatureMedicalCertRecognition = 14,
/// Multiple objects detection is enabled in the licence. Currently unused.
  SBSDKFeatureMultipleObjectsDetection = 15,
/// Text layout recognition is enabled in the licence.
  SBSDKFeatureTextOrientationDetection = 16,
/// European health insurance card recognition is enabled in the licence.
  SBSDKFeatureEHICRecognition = 17,
/// ID card and passport recognition is enabled in the licence.
  SBSDKFeatureIDCardRecognition = 18,
/// NFC scanning is enabled in the license. Currently unused.
  SBSDKFeatureNFCScanning = 19,
/// Text line recognition is enabled in the licence.
  SBSDKFeatureTextLineRecognition = 20,
/// License plate scanning is enabled in the licence.
  SBSDKFeatureLicensePlateScanning = 21,
/// Driver license recognition is enabled in the licence.
  SBSDKFeatureDriverLicenseRecognition = 22,
  SBSDKFeatureNone = 31,
};

@class UIBezierPath;

/// A <code>UIView</code> subclass to display a view finder with colored background and transparent cutout with the given aspect ratio.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK15SBSDKFinderView")
@interface SBSDKFinderView : UIView
/// The drawing style of the finder view.
/// Defaults to <code>SBSDKFinderView/Style/stroke</code>.
@property (nonatomic) enum SBSDKFinderViewStyle style;
/// The receivers delegate.
/// Weak, optional.
@property (nonatomic, weak) id <SBSDKFinderViewDelegate> _Nullable finderDelegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The area where the finder should be placed in the coordinate system of the receiver.
/// Is ignored if finder safe area is empty (zero height or width).
/// Defaults to <code>CGRect.zero</code>.
@property (nonatomic) CGRect finderSafeArea;
/// The aspect ratio of the viewport (cutout), if set to -1.0, no cutout is drawn.
/// Defaults to -1.0.
@property (nonatomic) double displayedAspectRatio;
/// The secondary aspect ratio of the viewport (cutout), if set to -1.0, no cutout is drawn.
/// Defaults to -1.0.
@property (nonatomic) double secondaryAspectRatio;
/// Parameter that defines minimum inset of viewport from edge of the screen.
/// Defaults to {20, 20, 20, 20}.
@property (nonatomic) UIEdgeInsets minimumInset;
/// Minimum inset of the secondary viewport, related to the primary viewport.
/// Defaults to {10, 10, 10, 10}.
@property (nonatomic) UIEdgeInsets secondaryMinimumInset;
/// If positive, the receiver will try to maintain the preferred height and the aspect ratio for the finder by dynamically
/// changing the inset. If negative this property will be ignored.
/// Defaults to -1.0.
@property (nonatomic) CGFloat preferredHeight;
/// The offset when drawing the finder.
/// Defaults to {0, 0}.
@property (nonatomic) CGPoint offset;
/// The color of the receivers border line.
/// Defaults to white.
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// The corner radius of the receivers border line.
/// Defaults to 8.0.
@property (nonatomic) CGFloat lineCornerRadius;
/// The line width of the receivers border line.
/// Defaults to 2.0.
@property (nonatomic) CGFloat lineWidth;
/// If set to <code>False</code>, the finder is inset by the safe area insets.
/// Otherwise the safe area inset is ignored.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL ignoresSafeAreaInsets;
/// If set to <code>True</code> finder changes will be animated, otherwise no animations will happen.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isAnimatingChanges;
/// The current rect of the finders viewport in the local coordinate system.
/// Returns <code>CGRect.zero</code> if the viewport is disabled.
@property (nonatomic, readonly) CGRect finderRect;
/// The current rect of the finders secondary viewport in the local coordinate system.
/// Returns <code>CGRect.zero</code> if the secondary viewport is disabled.
@property (nonatomic, readonly) CGRect secondaryFinderRect;
/// Creates a bezier path describing the view finders rectangle in the specified views coordinate system.
/// \param view The view to convert the coordinates of the returned path to. If <code>nil</code>, the coordinates are not converted.
///
///
/// returns:
/// The requested bezier path for the view finder rect. If the finder rects size is CGRectZero, <code>nil</code> is returned.
- (UIBezierPath * _Nullable)bezierPathConvertedToView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
/// A function, that returns a rect of a finder, if it will be placed in view with certain bounds, with given aspect ratio and insets. Useful for pre-calculations in some animation cases
/// \param bounds The bounds of the view, where potential view will be placed.
///
/// \param aspectRatio An expected aspect ratio.
///
/// \param minimumInsets Minimal insets of the view finder.
///
///
/// returns:
/// A calculated rectangle of a potential view finder.
+ (CGRect)potentialViewFinderRectWithBounds:(CGRect)bounds finderSafeArea:(CGRect)finderSafeArea aspectRatio:(double)aspectRatio minimumInsets:(UIEdgeInsets)minimumInsets offset:(CGPoint)offset SWIFT_WARN_UNUSED_RESULT;
- (void)safeAreaInsetsDidChange;
- (void)layoutSubviews;
- (void)drawRect:(CGRect)rect;
@end

/// The enum that defines the drawing styles of the finder view.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKFinderViewStyle, "Style", open) {
/// The full line around the finder view.
  SBSDKFinderViewStyleStroke = 0,
/// Only draw the corners of the finder view.
  SBSDKFinderViewStyleCorners = 1,
/// Draw the corners and the cross in the center of the finder view.
  SBSDKFinderViewStyleCornersAndCross = 2,
};



/// A frame limiter class. An object can use this class to limit the number of events fired per second.
/// For example: a camera device captures video frames with 60 frames per second and passes them to a detector.
/// Use this class to limit the number of detector runs to a smaller value, like 20 frames per second,
/// ignoring the other 40 frames per second. The frames to be detected are evenly distributed over time.
/// As the detector needs lots of CPU power, this limiter can drastically
/// reduce CPU usage and therefore save battery.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK17SBSDKFrameLimiter")
@interface SBSDKFrameLimiter : NSObject
/// The desired frame rate in frames per second.
@property (nonatomic) NSUInteger fpsCount;
/// The total number of frames the receiver registered since it started.
@property (nonatomic, readonly) NSUInteger framesTotal;
/// The total number of frames the receiver skipped since it started.
@property (nonatomic, readonly) NSUInteger framesSkipped;
/// The minimum time in seconds that must pass by before processing the next frame (1.0 / fpsCount).
@property (nonatomic, readonly) NSTimeInterval frameDuration;
/// The percentual ratio of skipped frames to total frames since the receivers start.
@property (nonatomic, readonly) double throttleRate;
/// Creates a new instance of the frame limiter.
/// \param fpsCount The desired frame rate in frames per second.
///
- (nonnull instancetype)initWithFPSCount:(NSUInteger)fpsCount OBJC_DESIGNATED_INITIALIZER;
/// Returns wether the next frame should be processed or not. Call this method consecutively each frame and process the frame if the result was <code>True</code>. Otherwise skip the frame processing.
///
/// returns:
/// <code>True</code>, if since the last call enough time passed by to process the next frame, <code>False</code> otherwise.
- (BOOL)isReadyForNextFrame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// GS1 message handling options. The GS1 standard defines a
/// a key-value format for business-centric data
/// that can be encoded into many 1D and 2D barcode types.
/// https://ref.gs1.org/standards/genspecs/
/// GS1 messages have two representations or formats: a human-readable format and a
/// machine-readable format. The human-readable format uses parentheses to wrap the keys in each
/// pair. For example, the string “(01)012345678901(37)02(3922)00278” contains three AI keys:
/// 01, 37, and 3922. The corresponding values are 012345678901, 02, and 00278.
/// The machine-readable format uses the special ASCII \x1D character to terminate key-value
/// pairs in the string in cases where the given key implies that the value is variable-length.
/// The equivalent machine-readable string for the above example is
/// “010123456789013702\x1D392200278”.
/// In the above example, the 01 AI key is fixed-length, so the \x1D character is not necessary.
/// The 37 AI keys is variable-length, so the \x1D character is necessary after the value in the
/// pair. The 3922 AI key is also variable-length, but it is the last pair in the message, so
/// the \x1D character is not necessary at the end.
/// The character \x1D is UNPRINTABLE - this means that if you try to print or otherwise
/// visualize a GS1 message containing the \x1D character, you may see a number of different
/// results, depending on how the system handles unprintable characters. You may see a question
/// mark, a box, an escape sequence, a space or nothing at all.
typedef SWIFT_ENUM(NSInteger, SBSDKGS1Handling, open) {
/// The (FNC1) character is simply stripped from the result in barcodes that implement this
/// mode.
/// Do not use. Will be removed in a future release.
  SBSDKGS1HandlingNone = 0,
/// This is the default. GS1 messages are converted to the machine-readable format per
/// the GS1 spec (the special FNC1 character is converted to ASCII \x1D).
/// The implied 01 AI key is prepended to DataBar results.
/// No validation is performed.
  SBSDKGS1HandlingParse = 1,
/// Same as <code>SBSDKGS1Handling/parse</code>. Additionally, messages containing unknown AI keys, or containing values
/// of incorrect format for known keys, are not returned.
  SBSDKGS1HandlingValidateStructure = 2,
/// Same as <code>SBSDKGS1Handling/validateStructure</code>, except that GS1 strings are converted to the human-readable
/// format, instead (with parentheses used to wrap AI keys, e.g. “(01)123456789”).
/// The \x1D character is never used in this representation.
  SBSDKGS1HandlingDecodeStructure = 3,
/// Full validation including linting and checksums. This is the most strict mode.
  SBSDKGS1HandlingValidateFull = 4,
/// Same as <code>SBSDKGS1Handling/decodeStructure</code>, but with full validation.
  SBSDKGS1HandlingDecodeFull = 5,
};


/// Represents a generic document with fields and sub-documents used for document recognition.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK20SBSDKGenericDocument")
@interface SBSDKGenericDocument : NSObject
/// The documents type.
@property (nonatomic, strong) SBSDKGenericDocumentType * _Nonnull type;
/// A list of the documents fields.
@property (nonatomic, copy) NSArray<SBSDKGenericDocumentField *> * _Nonnull fields;
/// A list of the documents sub-documents.
@property (nonatomic, copy) NSArray<SBSDKGenericDocument *> * _Nonnull children;
/// The average confidence in the accuracy of the document recognition result.
@property (nonatomic) float confidence;
/// The cropped image of the document.
@property (nonatomic, strong) UIImage * _Nullable crop;
/// The weight of the confidence.
/// Can be used to calculate the weighted average confidence of two or more documents.
@property (nonatomic) float confidenceWeight;
- (nonnull instancetype)initWithType:(SBSDKGenericDocumentType * _Nonnull)type fields:(NSArray<SBSDKGenericDocumentField *> * _Nonnull)fields children:(NSArray<SBSDKGenericDocument *> * _Nonnull)children confidence:(float)confidence confidenceWeight:(float)confidenceWeight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns a specific document field within the generic document by its field type name.
/// \param typeName The name of the field type to search for.
///
///
/// returns:
/// An optional <code>SBSDKGenericDocumentField</code> matching the specified field type name, or <code>nil</code> if not found.
- (SBSDKGenericDocumentField * _Nullable)fieldByTypeName:(NSString * _Nonnull)typeName SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of document fields within the generic document with a specific field type name.
/// \param typeName The name of the field type to search for.
///
///
/// returns:
/// An array of <code>SBSDKGenericDocumentField</code> objects matching the specified field type name.
- (NSArray<SBSDKGenericDocumentField *> * _Nonnull)fieldsByTypeName:(NSString * _Nonnull)typeName SWIFT_WARN_UNUSED_RESULT;
/// Returns a specific child document within the generic document by its document type name.
/// \param typeName The name of the document type to search for.
///
///
/// returns:
/// An optional <code>SBSDKGenericDocument</code> matching the specified document type name, or <code>nil</code> if not found.
- (SBSDKGenericDocument * _Nullable)childByDocumentType:(NSString * _Nonnull)typeName SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of child document within the generic document with a specific document type name.
/// \param typeName The name of the document type to search for.
///
///
/// returns:
/// An array of <code>SBSDKGenericDocument</code> objects matching the specified document type name.
- (NSArray<SBSDKGenericDocument *> * _Nonnull)childrenBy:(NSString * _Nonnull)typeName SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBSDKGenericDocument (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// The generic document wrapper for the receiver.
///
/// returns:
/// The instance of the wrapper.
- (SBSDKGenericDocumentWrapper * _Nullable)wrap SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBSDKGenericDocument (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Generates a flat array of the document and its child documents recursively.
/// Can be used for displaying the documents fields in a table view.
/// \param includeEmptyChildren If set to <code>True</code>, child documents without fields are included, otherwise <code>False</code>.
///
/// \param includeEmptyFields If set to <code>True</code>, fields with no values are included, otherwise <code>False</code>.
///
///
/// returns:
/// An array of the child documents with the main document in the first position.
- (NSArray<SBSDKGenericDocument *> * _Nullable)flatDocumentWithIncludeEmptyChildren:(BOOL)includeEmptyChildren includeEmptyFields:(BOOL)includeEmptyFields SWIFT_WARN_UNUSED_RESULT;
/// Generates a flat array of the document fields and its child documents fields recursively.
/// Can be used for displaying the documents fields in a table view.
/// \param includeEmptyFields If set to <code>True</code>, child documents without fields are included, otherwise <code>False</code>.
///
///
/// returns:
/// An array of all the fields in the document.
- (NSArray<SBSDKGenericDocumentField *> * _Nullable)allFieldsWithIncludeEmptyFields:(BOOL)includeEmptyFields SWIFT_WARN_UNUSED_RESULT;
@end

/// Common field types.
typedef SWIFT_ENUM(NSInteger, SBSDKGenericDocumentCommonFieldType, open) {
/// Document ID.
  SBSDKGenericDocumentCommonFieldTypeId = 0,
/// Person surname field.
  SBSDKGenericDocumentCommonFieldTypeSurname = 1,
/// Person maiden name field.
  SBSDKGenericDocumentCommonFieldTypeMaidenName = 2,
/// Person given names field.
  SBSDKGenericDocumentCommonFieldTypeGivenNames = 3,
/// Person birth date field.
  SBSDKGenericDocumentCommonFieldTypeBirthDate = 4,
/// Person nationality field.
  SBSDKGenericDocumentCommonFieldTypeNationality = 5,
/// Person birthplace field.
  SBSDKGenericDocumentCommonFieldTypeBirthplace = 6,
/// Document expiry date field.
  SBSDKGenericDocumentCommonFieldTypeExpiryDate = 7,
/// Person eye color field.
  SBSDKGenericDocumentCommonFieldTypeEyeColor = 8,
/// Person height field.
  SBSDKGenericDocumentCommonFieldTypeHeight = 9,
/// Document issue date field.
  SBSDKGenericDocumentCommonFieldTypeIssueDate = 10,
/// Document issuing authority field.
  SBSDKGenericDocumentCommonFieldTypeIssuingAuthority = 11,
/// Address field.
  SBSDKGenericDocumentCommonFieldTypeAddress = 12,
/// Pseudonym field.
  SBSDKGenericDocumentCommonFieldTypePseudonym = 13,
/// MRZ field.
  SBSDKGenericDocumentCommonFieldTypeMrz = 14,
/// Country code (ISO-3166 Alpha-3) field.
  SBSDKGenericDocumentCommonFieldTypeCountryCode = 15,
/// Gender field.
  SBSDKGenericDocumentCommonFieldTypeGender = 16,
/// Signature field.
  SBSDKGenericDocumentCommonFieldTypeSignature = 17,
/// Photo field.
  SBSDKGenericDocumentCommonFieldTypePhoto = 18,
/// Date of start of validity field.
  SBSDKGenericDocumentCommonFieldTypeValidFromDate = 19,
/// Check routing number.
  SBSDKGenericDocumentCommonFieldTypeRoutingNumber = 20,
/// Check account number.
  SBSDKGenericDocumentCommonFieldTypeAccountNumber = 21,
/// Place of issue for the identity card.
  SBSDKGenericDocumentCommonFieldTypePlaceOfIssue = 22,
/// Type of the title field in the identity document.
  SBSDKGenericDocumentCommonFieldTypeTitleType = 23,
/// Remarks field in the identity document.
  SBSDKGenericDocumentCommonFieldTypeRemarks = 24,
/// Full name field.
  SBSDKGenericDocumentCommonFieldTypeName = 25,
/// Card access number field.
  SBSDKGenericDocumentCommonFieldTypeCardAccessNumber = 26,
/// Not valid type.
  SBSDKGenericDocumentCommonFieldTypeNone = -1,
};

@class SBSDKGenericDocumentFieldType;
@class SBSDKGenericDocumentOcrResult;
enum SBSDKGenericDocumentFieldValidationStatus : NSInteger;

/// A generic document field.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK25SBSDKGenericDocumentField")
@interface SBSDKGenericDocumentField : NSObject
/// The type of the field.
@property (nonatomic, strong) SBSDKGenericDocumentFieldType * _Nonnull type;
/// Optional value of the field.
/// Applicable only to text fields.
@property (nonatomic, strong) SBSDKGenericDocumentOcrResult * _Nullable value;
/// Image crop of the field.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Field validation status.
/// Applicable only to fields that support some kind of validation.
@property (nonatomic) enum SBSDKGenericDocumentFieldValidationStatus validationStatus;
- (nonnull instancetype)initWithType:(SBSDKGenericDocumentFieldType * _Nonnull)type value:(SBSDKGenericDocumentOcrResult * _Nullable)value image:(UIImage * _Nullable)image validationStatus:(enum SBSDKGenericDocumentFieldValidationStatus)validationStatus OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The fields validation status. Applicable only to fields that support some kind of validation, e.g. using check digits.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKGenericDocumentFieldValidationStatus, "ValidationStatus", open) {
/// Field value failed validation
  SBSDKGenericDocumentFieldValidationStatusInvalid = 0,
/// Field value passed validation
  SBSDKGenericDocumentFieldValidationStatusValid = 1,
/// Field does not support validation
  SBSDKGenericDocumentFieldValidationStatusUndefined = -1,
};

enum SBSDKGenericDocumentFieldDisplayStateValue : NSInteger;

/// The generic document fields display status. Whether a field is shown or hidden in the user interface.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK37SBSDKGenericDocumentFieldDisplayState")
@interface SBSDKGenericDocumentFieldDisplayState : NSObject
/// The field will not be shown in the user interface.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKGenericDocumentFieldDisplayState * _Nonnull hidden;)
+ (SBSDKGenericDocumentFieldDisplayState * _Nonnull)hidden SWIFT_WARN_UNUSED_RESULT;
/// The field will be shown in the user interface if its text value isn’t an empty string.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKGenericDocumentFieldDisplayState * _Nonnull visibleIfNotEmpty;)
+ (SBSDKGenericDocumentFieldDisplayState * _Nonnull)visibleIfNotEmpty SWIFT_WARN_UNUSED_RESULT;
/// The field will be shown in the user interface.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKGenericDocumentFieldDisplayState * _Nonnull alwaysVisible;)
+ (SBSDKGenericDocumentFieldDisplayState * _Nonnull)alwaysVisible SWIFT_WARN_UNUSED_RESULT;
/// The value of the state.
@property (nonatomic, readonly) enum SBSDKGenericDocumentFieldDisplayStateValue value;
- (nonnull instancetype)initWithValue:(enum SBSDKGenericDocumentFieldDisplayStateValue)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKGenericDocumentFieldDisplayStateValue, "Value", open) {
  SBSDKGenericDocumentFieldDisplayStateValueHidden = 0,
  SBSDKGenericDocumentFieldDisplayStateValueVisibleIfNotEmpty = 1,
  SBSDKGenericDocumentFieldDisplayStateValueAlwaysVisible = 2,
};


/// A generic document field type.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK29SBSDKGenericDocumentFieldType")
@interface SBSDKGenericDocumentFieldType : NSObject
/// A dictionary of user-defined visibility states for generic document field types.
/// Defaults to <code>nil</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, SBSDKGenericDocumentFieldDisplayState *> * _Nullable userFieldTypeVisibilities;)
+ (NSDictionary<NSString *, SBSDKGenericDocumentFieldDisplayState *> * _Nullable)userFieldTypeVisibilities SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserFieldTypeVisibilities:(NSDictionary<NSString *, SBSDKGenericDocumentFieldDisplayState *> * _Nullable)value;
/// A dictionary of user-defined display strings for generic document field types.
/// Defaults to <code>nil</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable userFieldTypeDisplayTexts;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)userFieldTypeDisplayTexts SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserFieldTypeDisplayTexts:(NSDictionary<NSString *, NSString *> * _Nullable)value;
/// A dictionary of the default display strings for generic document field types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull defaultFieldTypeDisplayTexts;)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)defaultFieldTypeDisplayTexts SWIFT_WARN_UNUSED_RESULT;
/// A dictionary of the default visibility states for generic document field types.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, SBSDKGenericDocumentFieldDisplayState *> * _Nullable defaultFieldTypeVisibilities;)
+ (NSDictionary<NSString *, SBSDKGenericDocumentFieldDisplayState *> * _Nullable)defaultFieldTypeVisibilities SWIFT_WARN_UNUSED_RESULT;
/// Local field type name scoped to the containing document type.
@property (nonatomic, copy) NSString * _Nonnull name;
/// Unique global field type name prefixed with the document types of all containing documents.
@property (nonatomic, copy) NSString * _Nonnull fullName;
/// Normalized global field type name.
/// Fields in document types derived from the same base document type in the schema will have the same normalized name.
@property (nonatomic, copy) NSString * _Nonnull normalizedName;
/// Common field type.
/// Commonly occurring fields that have the same semantic meaning in different document types will often have a set common type.
@property (nonatomic) enum SBSDKGenericDocumentCommonFieldType commonType;
/// The friendly, human-readable display name of this field in English.
/// Can be customized by setting values to <code>SBSDKGenericDocumentFieldType/userFieldTypeDisplayTexts</code>.
/// This computed property first looks up the display text for the receiver in the
/// <code>SBSDKGenericDocumentFieldType/userFieldTypeDisplayTexts</code> dictionary.
/// If there is no value stored, or the user dictionary is <code>nil</code>,
/// it automatically falls back to the <code>SBSDKGenericDocumentFieldType/defaultFieldTypeDisplayTexts</code> dictionary.
@property (nonatomic, readonly, copy) NSString * _Nullable displayText;
@property (nonatomic, strong) NSNumber * _Nullable listIndex;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name fullName:(NSString * _Nonnull)fullName normalizedName:(NSString * _Nonnull)normalizedName commonType:(enum SBSDKGenericDocumentCommonFieldType)commonType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// A generic documents fields result of OCR text recognition.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK29SBSDKGenericDocumentOcrResult")
@interface SBSDKGenericDocumentOcrResult : NSObject
/// The recognized text of the field.
@property (nonatomic, copy) NSString * _Nonnull text;
/// Confidence in result accuracy.
/// The value ranges from 0.0 to 1.0, higher is better.
@property (nonatomic) float confidence;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Enumeration of supported image file types.
typedef SWIFT_ENUM(NSInteger, SBSDKImageFileFormat, open) {
/// The image file is a PNG.
  SBSDKImageFileFormatPNG = 0,
/// The image file is a JPEG.
  SBSDKImageFileFormatJPEG = 1,
};


/// Encapsulates image metadata, e.g. EXIF, TIFF, JFIF in a convenient way.
/// Use <code>SBSDKImageMetadataProcessor</code> to extract metadata from and inject changed metadata into image data.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK18SBSDKImageMetadata")
@interface SBSDKImageMetadata : NSObject
/// The raw metadata dictionary as it gets extracted from CGImageSourceCopyPropertiesAtIndex. Readonly.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull metadataDictionary;
/// The orientation flag of the image.
@property (nonatomic) NSInteger orientation;
/// The width of the image in pixels.
@property (nonatomic) NSInteger imageWidth;
/// The height of the image in pixels.
@property (nonatomic) NSInteger imageHeight;
/// The title of the image.
@property (nonatomic, copy) NSString * _Nullable title;
/// The longitude of the location where the image was captured.
@property (nonatomic) double longitude;
/// The latitude of the location where the image was captured.
@property (nonatomic) double latitude;
/// The altitude of the location where the image was captured.
@property (nonatomic) double altitude;
/// The date of when the image was captured.
@property (nonatomic, copy) NSDate * _Nullable originalDate;
/// The date of when the image was digitized.
@property (nonatomic, copy) NSDate * _Nullable digitalizationDate;
/// The model of the lens used to capture the image. Readonly.
@property (nonatomic, readonly, copy) NSString * _Nullable lensModel;
/// The manufacturer of the lens used to capture the image. Readonly.
@property (nonatomic, readonly, copy) NSString * _Nullable lensMaker;
/// The real focal length of the lens used to capture the image. Measured in millimeters. Readonly.
/// note:
/// Returns -1.0, if the value is not present in the metadata.
@property (nonatomic, readonly) double focalLength;
/// The 35mm equivalent focal length of the lens used to capture the image. Measured in millimeters. Readonly.
/// note:
/// Returns -1.0, if the value is not present in the metadata.
@property (nonatomic, readonly) double focalLength35mm;
/// The f-stop number or aperture of the lens used to capture the image. Readonly.
/// note:
/// Returns -1.0, if the value is not present in the metadata.
@property (nonatomic, readonly) double aperture;
/// The duration the sensor was exposed during capturing the image. Equals to 1.0 / shutter speed. Readonly.
/// note:
/// Returns -1.0, if the value is not present in the metadata.
@property (nonatomic, readonly) double exposureTime;
/// The ISO value used to capture the image. Readonly.
/// note:
/// Returns -1.0, if the value is not present in the metadata.
@property (nonatomic, readonly) double ISOValue;
/// Creates a new  <code>SBSDKImageMetadata</code> object or <code>nil</code>, if the metadata dictionary does not contain valid metadata.
/// \param metadata Takes the the raw metadata dictionary as it gets extracted from <code>CGImageSourceCopyPropertiesAtIndex</code>.
///
- (nullable instancetype)initWithMetadataDictionary:(NSDictionary<NSString *, id> * _Nonnull)metadata OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Helper class to extract or inject image metadata, e.g. EXIF, TIFF, JFIF from  image data.
/// warning:
/// Changing an images metadata can break it, e.g. by setting wrong width or height.
/// Example usage:
/// <ol>
///   <li>
///     Use <code>UIImage().jpegData(compressionQuality:)</code> to obtain a <code>Data</code> object from a <code>UIImage</code>.
///   </li>
///   <li>
///     Call <code>SBSDKImageMetadataProcessor</code> function <code>extractMetadata(from:)</code> to retrieve an <code>SBSDKImageMetadata</code> object from the image data.
///   </li>
///   <li>
///     Modify the metadata object as needed.
///   </li>
///   <li>
///     Call <code>SBSDKImageMetadataProcessor</code> function <code>imageDataByInjecting(metadata:into:)</code> to inject the modified metadata into the image data.
///   </li>
///   <li>
///     Create a new <code>UIImage</code> object from the returned image data using the <code>UIImage(data:)</code> constructor with the modified metadata.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKImageMetadataProcessor")
@interface SBSDKImageMetadataProcessor : NSObject
/// Extracts an image’s metadata (EXIF, TIFF, JFIF etc.) from an <code>Data</code> object.
/// \param imageData The <code>Data</code> object containing the image data.
///
///
/// returns:
/// An <code>SBSDKImageMetadata</code> object containing the image’s metadata, or <code>nil</code> if the image data is invalid.
+ (SBSDKImageMetadata * _Nullable)extractMetadataFromImageData:(NSData * _Nonnull)imageData SWIFT_WARN_UNUSED_RESULT;
/// Merges image data and (modified) image metadata and creates a new <code>Data</code> object that can be used to create a new image.
/// \param metadata The (modified) metadata object to be used for the new image data object.
///
/// \param imageData The image data of the image to inject the metadata into.
///
///
/// returns:
/// An <code>Data</code> object containing the given image data and metadata, or <code>nil</code> if the image data is invalid. Can be used to create a new <code>UIImage</code>.
+ (NSData * _Nullable)imageDataByInjectingMetadata:(SBSDKImageMetadata * _Nonnull)metadata intoImageData:(NSData * _Nonnull)imageData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

/// Protocol for an order-aware (array like) image storage.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK17SBSDKImageStoring_")
@protocol SBSDKImageStoring <NSCopying>
/// Number of images in the receiver.
@property (nonatomic, readonly) NSInteger imageCount;
/// Adds a <code>UIImage</code> into the storage.
/// \param image The image to be added.
///
///
/// returns:
/// <code>True</code>, if the operation was successful, <code>False</code> otherwise.
- (BOOL)addImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Adds an image from a file into the storage.
/// \param url The file <code>URL</code> of the image to be added.
///
///
/// returns:
/// <code>True</code>, if the operation was successful, <code>False</code> otherwise.
- (BOOL)addImageFromURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Returns the stored UIImage at the specified index.
/// \param index A valid index of the image.
///
///
/// returns:
/// The image at the given index, or <code>nil</code> if the image could not be loaded.
- (UIImage * _Nullable)imageAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL of the stored image at the specified index.
/// \param index A valid index of the image.
///
///
/// returns:
/// The images <code>URL</code> at the given index, or <code>nil</code> if the image file does not exist.
- (NSURL * _Nullable)imageURLAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Removes the stored image at the given index from the image storage.
/// \param index A valid index of the image to be removed.
///
- (void)removeImageAtIndex:(NSInteger)index;
/// Removes all stored images from the image storage.
- (void)removeAllImages;
/// Creates a copy of the storage.
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
@end

@class NSIndexSet;

SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK22SBSDKIndexSetValidator")
@interface SBSDKIndexSetValidator : NSObject
+ (NSIndexSet * _Nonnull)validateIndexSet:(NSIndexSet * _Nonnull)indexSet withStorage:(id <SBSDKImageStoring> _Nonnull)storage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKStorageLocation;

/// A simple thread-safe multiple-reader-single-writer index based disk image cache class.
/// Manages images in an array-like fashion.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK24SBSDKIndexedImageStorage")
@interface SBSDKIndexedImageStorage : NSObject <SBSDKImageStoring>
/// Array of all stored images URLs.
/// note:
/// If the storage is encrypted, the data at these URLs are encrypted and must be properly decrypted before being used.
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull imageURLs;
/// The JPEG compression if JPEG file format is used. Range: 0.0 - 1.0.
@property (nonatomic) CGFloat jpegCompressionQuality;
@property (nonatomic, readonly) NSInteger imageCount;
/// Image file format to be used to store the managed images.
@property (nonatomic, readonly) enum SBSDKImageFileFormat fileFormat;
/// Encrypter used to encrypt and decrypt the image data. If <code>nil</code>, no encryption/decryption is used.
/// note:
/// When using encryption you still can access the unencrypted images in the receiver.
/// Of course, encrypted storages cannot be read without the proper encrypter being set here.
/// You are responsible for migrating image storages.
/// Defaults to <code>nil</code>: no encryption is used.
/// See <code>SBSDKAESEncrypter</code> for reference.
@property (nonatomic, strong) id <SBSDKStorageCrypting> _Nullable encrypter;
/// A new <code>SBSDKIndexedImageStorage</code> at a temporary location (application caches folder).
/// On deallocation the receiver will remove all its files from the file system.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKIndexedImageStorage * _Nullable temporary;)
+ (SBSDKIndexedImageStorage * _Nullable)temporary SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new <code>SBSDKIndexedImageStorage</code> at the given storage location.
/// \param storageLocation The storage location at which the new storage should reside.
///
- (nullable instancetype)initWithStorageLocation:(SBSDKStorageLocation * _Nullable)storageLocation;
/// Initializes a new <code>SBSDKIndexedImageStorage</code> at the given storage location with given image file format.
/// \param storageLocation The storage location at which the new storage should reside.
///
/// \param fileFormat The file format that should be used to store the images.
///
/// \param encrypter The encrypter used to encrypt/decrypt image data.If <code>nil</code>, no encryption is used.
///
- (nullable instancetype)initWithStorageLocation:(SBSDKStorageLocation * _Nullable)storageLocation fileFormat:(enum SBSDKImageFileFormat)fileFormat encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new <code>SBSDKIndexedImageStorage</code> at the given storage location with given image file format.
/// \param storageLocation The storage location at which the new storage should reside.
///
/// \param fileFormat The file format that should be used to store the images.
///
/// \param encrypter The encrypter used to encrypt/decrypt image data.If <code>nil</code>, no encryption is used.
///
/// \param encryptedImagesURLs Array of URLs containing encrypted images. The images at these URLs must be encrypted with
/// the given encrypter (if not <code>nil</code>) and must have the same file format as specified in the fileFormat parameter.
///
- (nullable instancetype)initWithStorageLocation:(SBSDKStorageLocation * _Nullable)storageLocation fileFormat:(enum SBSDKImageFileFormat)fileFormat encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter encryptedImagesURLs:(NSArray<NSURL *> * _Nonnull)encryptedImagesURLs;
- (BOOL)addImage:(UIImage * _Nonnull)image;
- (BOOL)addImageFromURL:(NSURL * _Nonnull)url;
/// Inserts a new image into the receiver at the given index.
/// \param image The <code>UIImage</code> to be managed by the receiver.
///
/// \param index The valid index at which the new image should be inserted.
///
///
/// returns:
/// <code>True</code>, if the operation was successfull, <code>False</code> otherwise.
- (BOOL)insertImage:(UIImage * _Nonnull)image atIndex:(NSInteger)index;
/// Moves the image at the source index to the destination index.
/// \param sourceIndex The valid current index of the image to be moved.
///
/// \param destinationIndex The valid new index of the image to be moved.
///
///
/// returns:
/// <code>True</code>, if the operation was successfull, <code>False</code> otherwise.
- (BOOL)moveImageFromIndex:(NSInteger)sourceIndex toIndex:(NSInteger)destinationIndex;
/// Replaces the receivers image at index with the given image.
/// \param index The valid current index of the image to be replaced.
///
/// \param image The new image that should be stored at the given index.
///
///
/// returns:
/// <code>True</code>, if the operation was successfull, <code>False</code> otherwise.
- (BOOL)replaceImageAtIndex:(NSInteger)index withImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Replaces the receivers image at index with the image stored at the given URL.
/// \param index The valid current index of the image to be replaced.
///
/// \param url The <code>URL</code> of the new image that should be stored at the given index.
///
///
/// returns:
/// <code>True</code>, if the operation was successfull, <code>False</code> otherwise.
- (BOOL)replaceImageAtIndex:(NSInteger)index withImageAtURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)imageAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Blocks the current thread until all enqueued writing operations have been finished.
- (void)waitUntilWritingCompleted;
- (NSURL * _Nullable)imageURLAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)removeImageAtIndex:(NSInteger)index;
- (void)removeAllImages;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A simple thread-safe multiple-reader-single-writer key-value fashioned disk image cache class.
/// Manages images in a dictionary-like fashion.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK22SBSDKKeyedImageStorage")
@interface SBSDKKeyedImageStorage : NSObject
/// The number of stored images.
@property (nonatomic, readonly) NSInteger imageCount;
/// Array of all stored images URLs (values).
/// Note: If the storage is encrypted, the data at these URLs are encrypted and must be properly
/// decrypted before being used.
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull imageURLs;
/// Array of all stored keys.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull imageKeys;
/// Image file format to be used to store the managed images.
@property (nonatomic, readonly) enum SBSDKImageFileFormat fileFormat;
/// The JPEG compression if JPEG file format is used. Range: 0.0 - 1.0.
@property (nonatomic) CGFloat jpegCompressionQuality;
/// Encrypter used to encrypt and decrypt the image data. If <code>nil</code>, no encryption/decryption is used.
/// note:
/// When using encryption you still can access the unencrypted images in the receiver.
/// Of course, encrypted storages cannot be read without the proper encrypter being set here.
/// You are responsible for migrating image storages.
/// Defaults to <code>nil</code>: no encryption is used.
/// See <code>SBSDKAESEncrypter</code> for reference.
@property (nonatomic, readonly, strong) id <SBSDKStorageCrypting> _Nullable encrypter;
/// Initializes a new <code>SBSDKKeyedImageStorage</code> at the given storage location.
/// \param storageLocation The storage location at which the new storage should reside.
///
- (nullable instancetype)initWithStorageLocation:(SBSDKStorageLocation * _Nullable)storageLocation;
/// Initializes a new <code>SBSDKKeyedImageStorage</code> at the given storage location with given image file format.
/// \param storageLocation The storage location at which the new storage should reside.
///
/// \param fileFormat The file format that should be used to store the images.
///
/// \param encrypter The encrypter used to encrypt/decrypt image data. If <code>nil</code>, no encryption is used.
///
- (nullable instancetype)initWithStorageLocation:(SBSDKStorageLocation * _Nullable)storageLocation fileFormat:(enum SBSDKImageFileFormat)fileFormat encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter OBJC_DESIGNATED_INITIALIZER;
/// Stores an image at the given key.
/// note:
/// Allowed are alphanumeric characters, dash and underscore.
/// \param image The <code>UIImage</code> to be managed by the receiver.
///
/// \param key The key at which to store the image. Key must contain at least one character.
///
- (void)setImage:(UIImage * _Nonnull)image forKey:(NSString * _Nonnull)key;
/// Returns the image for given key.
/// warning:
/// Do not perform any write operations at that URL!
/// \param key The key at which the requested image was stored.
///
///
/// returns:
/// The instance of <code>UIImage</code> for given key.
- (UIImage * _Nullable)imageForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns the image file URL for given key.
/// note:
/// If the storage is encrypted, the data at that URL is encrypted and must be properly decrypted before it can be used.
/// warning:
/// Do not perform any write operations at that URL!
/// \param key The key at which the requested image was stored.
///
///
/// returns:
/// A URL in the file system pointing to the image file or <code>nil</code>, if there was no image at that key.
- (NSURL * _Nullable)imageURLForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Removes the image at the given key from the receiver as well as from the file system.
/// \param key The key for the image that should be removed.
///
- (void)removeImageForKey:(NSString * _Nonnull)key;
/// Removes the images at keys from the receiver as well as from the file system, which keys prefix match the prefix string.
/// \param prefix The prefix of the keys for the images that should be removed.
///
- (void)removeImagesForKeysMatchingPrefix:(NSString * _Nonnull)prefix;
/// Removes all stored images from the receiver as well as from the file system.
- (void)removeAllImages;
/// Blocks the current thread until all enqueued writing operations have been finished.
- (void)waitUntilWritingCompleted;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The status of the ScanbotSDK license.
typedef SWIFT_ENUM(NSInteger, SBSDKLicenseStatus, open) {
/// The license is valid.
  SBSDKLicenseStatusOkay = 0,
/// No license has been installed. The trial mode is active.
  SBSDKLicenseStatusTrial = 1,
/// No license has been installed. The trial mode ended.
  SBSDKLicenseStatusNotSet = 10,
/// Invalid license. License contains corrupted data.
  SBSDKLicenseStatusCorrupted = 11,
/// Invalid license. The license is not valid for this operating system.
  SBSDKLicenseStatusWrongOS = 12,
/// Invalid license. The license is not valid for this application.
  SBSDKLicenseStatusAppIDMismatch = 13,
/// Invalid license. The license has expired.
  SBSDKLicenseStatusExpired = 14,
};


SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK8SBSDKLog")
@interface SBSDKLog : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isLoggingEnabled;)
+ (BOOL)isLoggingEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsLoggingEnabled:(BOOL)value;
+ (void)logInfo:(NSString * _Nonnull)message;
+ (void)logError:(NSString * _Nonnull)message;
+ (void)logWarning:(NSString * _Nonnull)message;
@end

/// This enum describes the available orientation lock modes for the user interface.
/// Captured images are always top-oriented to the status bar.
typedef SWIFT_ENUM(NSInteger, SBSDKOrientationLock, open) {
/// The orientation is not locked. The captured image is orientated so that the upper area of the image is directed towards the status bar.
/// The image either has a landscape or portrait aspect ratio.
  SBSDKOrientationLockNone = 0,
/// The orientation is locked to the portrait modes. The captured image is orientated so that the upper area of the image is directed towards the status bar.
/// The image always has a portrait aspect ratio.
  SBSDKOrientationLockPortrait = 1,
/// The orientation is locked to the landscape modes. The captured image is orientated so that the upper area of the image is directed towards the status bar.
/// The image always has a landscape aspect ratio.
  SBSDKOrientationLockLandscape = 2,
};

@class SBSDKProgress;

/// Class used to extract pages from a PDF file and returns them in various ways.
/// The synchronous functions of this class are running in the same thread that they are called from, so it is up to you to control the concurrency.
/// The asynchronous functions run in a shared queue to prevent memory pressure when running multiple extractions at the same time.
/// It is recommended to use background queues in most cases.
/// Currently the flattening of the PDF document is user’s responsibility. So if the document will have unflattened annotations (except signs), they will not be exported.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK22SBSDKPDFPagesExtractor")
@interface SBSDKPDFPagesExtractor : NSObject
/// Extracts pages from PDF and converts them to an array of <code>UIImage</code>. Nothing is written to disk during this operation. Runs in the same thread, as it is called from.
/// The scaling of the media box is set to 2.
/// \param pdfURL The URL of the PDF file.
///
///
/// returns:
/// An array of <code>UIImage</code> with extracted pages. The array will be empty if something is wrong.
- (NSArray<UIImage *> * _Nonnull)imagesFromPDF:(NSURL * _Nonnull)pdfURL SWIFT_WARN_UNUSED_RESULT;
/// Extracts pages from PDF and converts them to an array of <code>UIImage</code>. Nothing is written to disk during this operation. Runs in the same thread, as it is called from.
/// \param pdfURL The URL of the PDF file.
///
/// \param scaling Scaling applied to the PDF media box frame while extracting. Affects the output image quality. In most cases the recommended value is 2 and higher.
///
///
/// returns:
/// An array of <code>UIImage</code> with extracted pages. The array will be empty if something is wrong.
- (NSArray<UIImage *> * _Nonnull)imagesFromPDF:(NSURL * _Nonnull)pdfURL scaling:(CGFloat)scaling SWIFT_WARN_UNUSED_RESULT;
/// Extracts pages from a PDF, converts them to JPEGs and writes them to a specified URL. Runs in the same thread that it is called from.
/// No encryption is used here. The compression is set to 1.0. Media box scale value is 2.
/// \param pdfURL The URL of the PDF file.
///
/// \param outputDirectory The output folder where images will be stored. If the folder does not exist, it will be created.
///
///
/// returns:
/// An array of URLs with extracted pages as JPEG files. The array will be empty if something is wrong.
- (NSArray<NSURL *> * _Nonnull)imageURLsFromPDF:(NSURL * _Nonnull)pdfURL outputDirectory:(NSURL * _Nonnull)outputDirectory SWIFT_WARN_UNUSED_RESULT;
/// Extracts pages from a PDF, converts them to JPEGs and writes them to a specified URL. Runs in the same thread that it is called from.
/// No encryption is used here. Media box scale value is 2.
/// \param pdfURL The URL of the PDF file.
///
/// \param compression Compression of the output image file. The range is from 0 to 1, where 1 - lossless conversion, 0 - maximum compression is used.
///
/// \param outputDirectory The output folder where images will be stored. If the folder does not exist, it will be created.
///
///
/// returns:
/// An array of URLs with extracted pages as JPEG files. The array will be empty if something is wrong.
- (NSArray<NSURL *> * _Nonnull)imageURLsFromPDF:(NSURL * _Nonnull)pdfURL compression:(CGFloat)compression outputDirectory:(NSURL * _Nonnull)outputDirectory SWIFT_WARN_UNUSED_RESULT;
/// Extracts pages from a PDF, converts them to JPEGs and writes them to a specified URL. Runs in the same thread that it is called from.
/// \param pdfURL The URL of the PDF file.
///
/// \param scaling Scaling applied to the PDF media box frame while extracting. Affects the output image quality. In most cases the recommended value is 2 and higher.
///
/// \param compression Compression of the output image file. The range is from 0 to 1, where 1 - lossless conversion, 0 - maximum compression is used.
///
/// \param encrypter The encrypter used to encrypt output image files. If <code>nil</code>, no encryption is used.
///
/// \param outputDirectory The output folder where images will be stored. If the folder does not exist, it will be created.
///
///
/// returns:
/// An array of URLs with extracted pages as JPEG files. The array will be empty if something is wrong.
- (NSArray<NSURL *> * _Nonnull)imageURLsFromPDF:(NSURL * _Nonnull)pdfURL scaling:(CGFloat)scaling compression:(CGFloat)compression encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter outputDirectory:(NSURL * _Nonnull)outputDirectory SWIFT_WARN_UNUSED_RESULT;
/// Asynchronously extracts pages from a PDF, converts them to JPEGs and writes them to a specified URL.
/// The array of URLs is passed within the completion handler.
/// \param pdfURL The URL of the PDF file.
///
/// \param scaling Scaling applied to the PDF media box frame while extracting. Affects the output image quality. In most cases the recommended value is 2 and higher.
///
/// \param compression Compression of the output image file. The range is from 0 to 1, where 1 - lossless conversion, 0 - maximum compression is used.
///
/// \param encrypter The encrypter used to encrypt output image files. If <code>nil</code>, no encryption is used.
///
/// \param outputDirectory The output folder where images will be stored. If the folder does not exist, it will be created.
///
/// \param completion The completion handler that delivers the created array of image file URLs.
///
///
/// returns:
/// A progress object that can be used for cancellation and progress observing. If <code>nil</code>, an error occurred.
- (SBSDKProgress * _Nullable)imageURLsFromPDF:(NSURL * _Nonnull)pdfURL scaling:(CGFloat)scaling compression:(CGFloat)compression encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter outputDirectory:(NSURL * _Nonnull)outputDirectory completion:(void (^ _Nonnull)(NSArray<NSURL *> * _Nonnull))completion;
/// Asynchronously extracts pages from a PDF, converts them to JPEGs and writes them to a specified URL.
/// In Swift language it is used with structured concurrency (async/await).
/// \param pdfURL The URL of the PDF file.
///
/// \param scaling Scaling applied to the PDF media box frame while extracting. Affects the output image quality. In most cases the recommended value is 2 and higher.
///
/// \param compression Compression of the output image file. The range is from 0 to 1, where 1 - lossless conversion, 0 - maximum compression is used.
///
/// \param encrypter The encrypter used to encrypt output image files. If <code>nil</code>, no encryption is used.
///
/// \param outputDirectory The output folder where images will be stored. If the folder does not exist, it will be created.
///
///
/// returns:
/// The created array of image file URLs.
- (void)imageURLsAsyncFrom:(NSURL * _Nonnull)pdfURL scaling:(CGFloat)scaling compression:(CGFloat)compression encrypter:(id <SBSDKStorageCrypting> _Nullable)encrypter outputDirectory:(NSURL * _Nonnull)outputDirectory completionHandler:(void (^ _Nonnull)(NSArray<NSURL *> * _Nonnull))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVMetadataMachineReadableCodeObject;
@class SBSDKPolygonEdge;
@class NSValue;

/// This class represents a 4-polygon, a polygon with 4 edges. The polygons points are stored in a normalized unit coordinate system from {0, 0} to {1, 1}.
/// To convert to absolute coordinates use the methods that take a size and return absolute values.
/// An absolute space can be any 2-dimensional space with a size, e.g. an image.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK12SBSDKPolygon")
@interface SBSDKPolygon : NSObject <NSCopying>
/// One of the designated initializer methods.
/// \param a The first point of the polygon in unit coordinates.
///
/// \param b The second point of the polygon in unit coordinates.
///
/// \param c The third point of the polygon in unit coordinates.
///
/// \param d The fourth point of the polygon in unit coordinates.
///
- (nonnull instancetype)initWithNormalizedPointA:(CGPoint)a pointB:(CGPoint)b pointC:(CGPoint)c pointD:(CGPoint)d OBJC_DESIGNATED_INITIALIZER;
/// One of the designated initializer methods.
/// \param rect A rectangle in normalized unit space coordinates forming the new polygon.
///
- (nonnull instancetype)initWithNormalizedRect:(CGRect)rect;
/// One of the designated initializer methods.
/// \param a The first point of the polygon in absolute coordinates.
///
/// \param b The second point of the polygon in absolute coordinates.
///
/// \param c The third point of the polygon in absolute coordinates.
///
/// \param d The fourth point of the polygon in absolute coordinates.
///
/// \param size The size to use to convert the points to unit coordinates.
///
- (nonnull instancetype)initWithAbsolutePointA:(CGPoint)a pointB:(CGPoint)b pointC:(CGPoint)c pointD:(CGPoint)d forSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// One of the designated initializer methods.
/// \param values An array of 8 NSNumber double values containing the normalized coordinates in the form [x1, y1, x2, y2, x3, y3, x4, y4].
///
- (nonnull instancetype)initWithNormalizedDoubleValues:(NSArray<NSNumber *> * _Nonnull)values;
/// One of the designated initializer methods.
/// \param codeObject An AVMetadataMachineReadableCodeObject as returned from QR code detection.
///
- (nonnull instancetype)initWithMetadataObject:(AVMetadataMachineReadableCodeObject * _Nonnull)codeObject;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Compares the receiver to another instance of <code>SBSDKPolygon</code>.
/// \param polygon The polygon instance the receiver is compared to.
///
///
/// returns:
/// <code>True</code>, if the points of polygon are equal to the points of the receiver, <code>False</code> otherwise.
- (BOOL)isEqualToPolygon:(SBSDKPolygon * _Nonnull)polygon SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Compares the receiver to another instance of SBSDKPolygon.
/// Similar here means the distance of the normalized corresponding points is less than 0.023.
/// \param polygon The polygon instance the receiver is compared to.
///
///
/// returns:
/// <code>True</code>, if the points of polygon are similar to the points of the receiver, <code>False</code> otherwise.
- (BOOL)isSimilarToPolygon:(SBSDKPolygon * _Nullable)polygon SWIFT_WARN_UNUSED_RESULT;
/// Calculates the standard deviation in the corresponding points of the receiver and the given <code>SBSDKPolygon</code>.
/// \param polygon The polygon instance the receiver is compared to.
///
///
/// returns:
/// Standard deviation.
- (double)standardDeviationTo:(SBSDKPolygon * _Nullable)polygon SWIFT_WARN_UNUSED_RESULT;
/// Clips the receiver the unit space {0, 0} - {1, 1}.
- (void)normalize;
/// Orders the receivers points in clockwise order. The first point is the point right next to 12 o’clock.
/// This method uses the atan2 operator to sort the points clockwise.
- (void)sortClockwise;
/// Helper method to transform a normalized point to an absolute coordinate system with given size.
/// \param point The absolute point to convert into normalized space.
///
/// \param size The size of the absolute coordinate system.
///
///
/// returns:
/// The normalized point.
+ (CGPoint)normalizedPointFromAbsolutePoint:(CGPoint)point withSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Helper method to transform an absolute point to the normalized unit coordinate system with given size.
/// \param point The normalized point to convert into absolute space.
///
/// \param size The size of the absolute coordinate system.
///
///
/// returns:
/// The converted point.
+ (CGPoint)absolutePointFromNormalizedPoint:(CGPoint)point withSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Returns the normalized point at the given index.
/// \param index The index of the point in the receiver. Must be in range {0-3}.
///
///
/// returns:
/// The normalized point.
- (CGPoint)normalizedPointWithIndex:(NSUInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns the absolute point at the given index.
/// \param index The index of the point in the receiver. Must be in range {0-3}.
///
/// \param size The size of the absolute coordinate system to transform the point to.
///
///
/// returns:
/// The converted point.
- (CGPoint)absolutePointWithIndex:(NSUInteger)index forSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Returns the normalized edge at the given index.
/// The edge at index n is built from points at indices n and (n+1) % 4.
/// \param index The index of the edge in the receiver. Must be in range {0-3}.
///
///
/// returns:
/// The normalized edge.
- (SBSDKPolygonEdge * _Nonnull)normalizedEdgeWithIndex:(NSUInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns the absolute edge at the given index.
/// The edge at index n is built from points at indices n and (n+1) % 4.
/// \param index The index of the edge in the receiver. Must be in range {0-3}.
///
/// \param size The size of the absolute coordinate system to transform the edge to.
///
///
/// returns:
/// The absolute edge.
- (SBSDKPolygonEdge * _Nonnull)absoluteEdgeWithIndex:(NSUInteger)index forSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The normalized points as an array of 8 double value NSNumbers in the form [x1, y1, x2, y2, x3, y3, x4, y4].
- (NSArray<NSNumber *> * _Nonnull)normalizedDoubleValues SWIFT_WARN_UNUSED_RESULT;
/// Sets the receivers point at the given index to the value of point.
/// \param point The normalized point.
///
/// \param index The index of the point the set within the receiver in range {0-3}.
///
- (void)setNormalizedPoint:(CGPoint)point forIndex:(NSUInteger)index;
/// Sets the receivers point at the given index to the normalized value of point.
/// \param point The absolute point.
///
/// \param size The size of the absolute coordinate system.
///
/// \param index The index of the point the set within the receiver in range {0-3}.
///
- (void)setAbsolutePointWithPoint:(CGPoint)point with:(CGSize)size for:(NSUInteger)index;
/// Rotates the points of the receiver 90 degrees clockwise, transforming it from one absolute space to another.
/// \param oldSize The size of the absolute coordinate system before rotating it.
///
/// \param newSize The size of the absolute coordinate system after rotating it.
///
- (void)rotate90CWWithOldSize:(CGSize)oldSize newSize:(CGSize)newSize;
/// Rotates the points of the receiver 90 degrees counterclockwise, transforming it from one absolute space to another.
/// \param oldSize The size of the absolute coordinate system before rotating it.
///
/// \param newSize The size of the absolute coordinate system after rotating it.
///
- (void)rotate90CCWWithOldSize:(CGSize)oldSize newSize:(CGSize)newSize;
/// Rotates the points of the receiver 180 degrees, transforming it from one absolute space to another.
/// \param oldSize The size of the absolute coordinate system before rotating it.
///
/// \param newSize The size of the absolute coordinate system after rotating it.
///
- (void)rotate180WithOldSize:(CGSize)oldSize newSize:(CGSize)newSize;
/// Performs times counter-clockwise rotations on the receiver.
/// \param times The number of rotation to perform.
///
/// \param size The size of the absolute coordinate system before rotating it.
///
- (void)rotateCCW:(NSUInteger)times withSize:(CGSize)size;
/// Performs times clockwise rotations on the receiver.
/// \param times The number of rotation to perform.
///
/// \param size The size of the absolute coordinate system before rotating it.
///
- (void)rotateCW:(NSUInteger)times withSize:(CGSize)size;
/// Performs a horizontal flip of the polygon points.
/// \param size The size of the absolute coordinate system to transform the points to.
///
- (void)flipHorizontally:(CGSize)size;
/// Returns the axis-oriented bounding box of the receiver.
/// \param size The absolute size the polygon is scaled to.
///
///
/// returns:
/// The bounding box of the polygon in absolute image space coordinates.
- (CGRect)boundingBoxWithSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Calculates the geometric center (mass point) of the polygon in normalized unit coordinates.
///
/// returns:
/// The geometric center of the polygon.
- (CGPoint)center SWIFT_WARN_UNUSED_RESULT;
/// Calculates the estimated size of the perspective-corrected and cropped image when applying the receiver to an image with given size.
/// \param imageOfSize The size of the original image the receiver should be applied to.
///
/// \param imageScale The scaling factor of the image.
///
/// \param focalLength The focal length of the lens the image was taken with in millimetres.
///
/// \param sensorWidth The width of the sensor the image was taken with in millimetres.
///
///
/// returns:
/// The estimated size of the cropped and perspective-corrected image, when the receiver was applied.
- (CGSize)sizeWhenApplyingToImageOfSize:(CGSize)imageOfSize imageScale:(double)imageScale focalLength:(double)focalLength sensorWidth:(double)sensorWidth SWIFT_WARN_UNUSED_RESULT;
/// Creates a UIBezierPath instance of the receiver for drawing purposes.
/// \param size The size to use to convert the normalized points of the receiver to absolute coordinates.
///
///
/// returns:
/// An UIBezierPath instance representing the polygon converted to absolute space.
- (UIBezierPath * _Nonnull)bezierPathForSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Creates a UIBezierPath instance of the receiver for drawing purposes.
/// \param size The size to use to convert the normalized points of the receiver to absolute coordinates.
///
/// \param cornerRadius The corner radius of the bezier path.
///
/// \param transform The transform to apply to the bezier path.
///
///
/// returns:
/// An UIBezierPath instance representing the polygon converted to absolute space.
- (UIBezierPath * _Nonnull)bezierPathForSize:(CGSize)size cornerRadius:(CGFloat)cornerRadius withTransform:(CGAffineTransform)transform SWIFT_WARN_UNUSED_RESULT;
/// Creates a UIBezierPath instance of the receiver for drawing purposes.
/// \param previewLayer The preview layer the path is going to be presented on.
///
///
/// returns:
/// An UIBezierPath instance representing the polygon.
- (UIBezierPath * _Nonnull)bezierPathForPreviewLayer:(AVCaptureVideoPreviewLayer * _Nonnull)previewLayer SWIFT_WARN_UNUSED_RESULT;
/// Creates a UIBezierPath instance of the receiver for drawing purposes.
/// \param cornerRadius The radius to use when drawing rounded corners.
///
/// \param previewLayer The preview layer the path is going to be presented on.
///
/// \param orientation The device orientation. Used to calculate starting point.
///
/// \param isFrontCamera Currently used camera - front camera. Used to calculate starting point.
///
///
/// returns:
/// An UIBezierPath instance representing the polygon.
- (UIBezierPath * _Nonnull)bezierPathWithCornerRadius:(CGFloat)cornerRadius forPreviewLayer:(AVCaptureVideoPreviewLayer * _Nonnull)previewLayer orientation:(UIDeviceOrientation)orientation isFrontCamera:(BOOL)isFrontCamera SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSValue *> * _Nonnull)absolutePointsWith:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

enum SBSDKPolygonEdgeOrientation : NSInteger;

/// Helper class that encapsulates an edge of a polygon and provides geometric helper methods.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK16SBSDKPolygonEdge")
@interface SBSDKPolygonEdge : NSObject <NSCopying>
/// The start point of the edge
@property (nonatomic, readonly) CGPoint p1;
/// The end point of the edge.
@property (nonatomic, readonly) CGPoint p2;
/// The center of the edge.
@property (nonatomic) CGPoint center;
/// The length of the receiver. In other words the distance between p1 and p2.
@property (nonatomic, readonly) CGFloat length;
/// The axis-aligned bounding box of the receiver.
@property (nonatomic, readonly) CGRect boundingBox;
/// The orientation of the receiver. See <code>SBSDKPolygonEdgeOrientation</code>.
@property (nonatomic, readonly) enum SBSDKPolygonEdgeOrientation orientation;
/// Designated initializer.
/// \param p1 The start point of the edge.
///
/// \param p2 The end point of the edge.
///
- (nonnull instancetype)initWithPoint:(CGPoint)p1 andPoint:(CGPoint)p2 OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enum describing the orientation of a polygon edge.
typedef SWIFT_ENUM(NSInteger, SBSDKPolygonEdgeOrientation, open) {
/// The edge is oriented horizontally.
  SBSDKPolygonEdgeOrientationHorizontal = 0,
/// The edge is oriented vertically.
  SBSDKPolygonEdgeOrientationVertical = 1,
/// The edge is oriented 45° from x- and y-axis.
  SBSDKPolygonEdgeOrientationUndefined = 2,
};

@protocol CAAction;

/// A <code>CAShapeLayer</code> subclass that is used to draw bezier paths with fluid animation.
/// The paths stroke color can be customized.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK17SBSDKPolygonLayer")
@interface SBSDKPolygonLayer : CAShapeLayer
/// The color to draw the paths lines.
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// Designated initializer.
/// \param lineColor The initial color for the path drawing color.
///
- (nonnull instancetype)initWithLineColor:(UIColor * _Nonnull)lineColor;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK13SBSDKProgress")
@interface SBSDKProgress : NSProgress
/// The progress describes a text recognition operation.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKProgressKindTextRecognition;)
+ (NSString * _Nonnull)SBSDKProgressKindTextRecognition SWIFT_WARN_UNUSED_RESULT;
/// The progress describes a document/PDF creation operation.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKProgressKindCreatePages;)
+ (NSString * _Nonnull)SBSDKProgressKindCreatePages SWIFT_WARN_UNUSED_RESULT;
/// The progress describes an image processing operation.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBSDKProgressKindProcessImage;)
+ (NSString * _Nonnull)SBSDKProgressKindProcessImage SWIFT_WARN_UNUSED_RESULT;
/// The standard process for observing a <code>Progress</code> progressing is to use KVO on the <code>Progress</code> instance.
/// The <code>SBSDKProgressUpdateHandler</code> simplifies observing the progress largely.
/// It is called on main thread whenever the progress changes. Usually here you update your UI, e.g. <code>UIProgressView</code>.
@property (nonatomic, copy) void (^ _Nullable updateHandler)(SBSDKProgress * _Nonnull);
@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled;
/// A convenience initializer mimicking the behavior of <code>Progress</code>.
/// \param totalUnitCount The number of total work units the progress. See <code>Progress</code>.
///
- (nonnull instancetype)initWithTotalUnitCount:(int64_t)totalUnitCount;
- (nonnull instancetype)initWithParent:(NSProgress * _Nullable)parentProgressOrNil userInfo:(NSDictionary<NSProgressUserInfoKey, id> * _Nullable)userInfoOrNil OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)cancel;
@property (nonatomic, copy) NSString * _Null_unspecified localizedDescription;
@property (nonatomic, copy) NSString * _Null_unspecified localizedAdditionalDescription;
@end


/// A class that represents the style of the polygon rendered around a barcode in <code>SBSDKBarcodeScanAndCountViewController</code>.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK29SBSDKScanAndCountPolygonStyle")
@interface SBSDKScanAndCountPolygonStyle : NSObject
/// Turns polygon drawing on or off.
@property (nonatomic) BOOL polygonDrawingEnabled;
/// The color of the barcode polygons outline.
@property (nonatomic, strong) UIColor * _Nonnull polygonColor;
/// The inner fill color of the barcode polygon.
@property (nonatomic, strong) UIColor * _Nonnull polygonFillColor;
/// The width of the barcode polygons outline.
@property (nonatomic) CGFloat lineWidth;
/// The corner radius of the barcode polygons outline.
@property (nonatomic) CGFloat cornerRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum describes the possible scanning states of any scanner.
typedef SWIFT_ENUM(NSInteger, SBSDKScannerStatus, open) {
/// The scanner is paused or has not yet been started.
  SBSDKScannerStatusIdle = 0,
/// The scanner is active.
  SBSDKScannerStatusScanning = 1,
/// The scanner has detected something.
  SBSDKScannerStatusDetected = 2,
};

@class UITouch;
@class UIEvent;

/// The button class used in the camera view controller to take a snapshot.
/// Animates itself depending on its status.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK18SBSDKShutterButton")
@interface SBSDKShutterButton : UIButton
/// Indicates, whether a still image is currently being taken or not.
/// If set to <code>True</code> a <code>UIActivityIndicator</code> is shown in the center.
@property (nonatomic) BOOL isTakingPhoto;
/// The current status of the receiver. See <code>SBSDKScannerStatus</code>.
@property (nonatomic) enum SBSDKScannerStatus scannerStatus;
/// The main color of the receiver while the scanner status is <code>SBSDKScannerStatusScanning</code>.
/// Defaults to white.
@property (nonatomic, strong) UIColor * _Nonnull buttonSearchingColor;
/// The main color of the receiver while the scanner status is <code>SBSDKScannerStatusDetected</code>.
/// Defaults to white.
@property (nonatomic, strong) UIColor * _Nonnull buttonDetectedColor;
/// The background color of the receiver while the scanner status is <code>SBSDKScannerStatusScanning</code>.
/// Defaults to clear.
@property (nonatomic, strong) UIColor * _Nonnull buttonSearchingBackgroundColor;
/// The background color of the receiver while the scanner status is <code>SBSDKScannerStatusDetected</code>.
/// Defaults to clear.
@property (nonatomic, strong) UIColor * _Nonnull buttonDetectedBackgroundColor;
/// The color of the indicator shown, when <code>isTakingPhoto</code> is set to <code>True</code>.
@property (nonatomic, strong) UIColor * _Nonnull indicatorColor;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (void)didMoveToWindow;
@end


/// A class to describe the mocking data that is fed to a simulated camera device.
/// A simulated camera device loops a single image and provides the frames to the ScanbotSDK scanner UI components.
/// Along with the frame image you can optionally specify an image that is passed to the ScanbotSDK scanner UI components when capturing a still image.
/// Intended to be used with UI tests.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK28SBSDKSimulatedCameraMockData")
@interface SBSDKSimulatedCameraMockData : NSObject
/// The label of the mock data. Can be used to identify the mock data.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// If set to <code>True</code> the image is reloaded/downloaded after each frame. Otherwise the image is loaded only once and reused per frame.
@property (nonatomic, readonly) BOOL refreshOnEachFrame;
/// Initializes mock data for a simulated camera device from URLs.
/// \param label The label to describe the mock data.
///
/// \param imageURL A web or file URL to an image file to be used to feed the video stream of simulated camera device.
///
/// \param capturedImageURL A web or file URL to an image to be used on simulated camera devices when capturing a still image. If <code>nil</code>, the current frame of the <code>imageURL</code> is returned when capturing a still image.
///
/// \param refreshOnEachFrame If set to <code>True</code> the image is reloaded/downloaded after each frame. Otherwise the image is loaded only once and reused per frame.
///
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label imageURL:(NSURL * _Nonnull)imageURL capturedImageURL:(NSURL * _Nullable)capturedImageURL refreshOnEachFrame:(BOOL)refreshOnEachFrame OBJC_DESIGNATED_INITIALIZER;
/// Initializes mock data for a simulated camera device from ressource names of the application bundle.
/// \param label The label to describe the mock data.
///
/// \param imageName The case-sensitive name of the image resource in the application bundle that provides the simulated frames.
///
/// \param capturedImageName The case-sensitive name of the  image resource in the application bundle that is used when capturing still images. If ‘nil’ the current frame of the <code>imageName</code> is returned when capturing a still image.
///
/// \param refreshOnEachFrame If set to <code>True</code> the image is reloaded/downloaded after each frame. Otherwise the image is loaded only once and reused per frame.
///
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label imageName:(NSString * _Nonnull)imageName capturedImageName:(NSString * _Nullable)capturedImageName refreshOnEachFrame:(BOOL)refreshOnEachFrame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SBSDKSoundType : NSInteger;

/// A class to manage playback of sounds and vibration.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK20SBSDKSoundController")
@interface SBSDKSoundController : NSObject
/// To choose between multiple sounds to play.
/// Defaults to <code>SBSDKSoundType/modern</code>.
@property (nonatomic) enum SBSDKSoundType type;
/// Designated initializer.
/// \param soundType The chosen sound type.
///
- (nonnull instancetype)initWithSoundType:(enum SBSDKSoundType)soundType;
/// Plays a standard bleep sound.
- (void)playBleepSound;
/// Plays a custom sound loaded from a given URL.
/// \param url The URL to the sound file.
///
- (void)playCustomSoundFromURL:(NSURL * _Nonnull)url;
/// Initiates a short vibration of the device. Can be used to give a haptic feedback.
- (void)vibrate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The sound selection type.
typedef SWIFT_ENUM(NSInteger, SBSDKSoundType, open) {
/// To choose the modern beep sound.
  SBSDKSoundTypeModern = 0,
/// To choose the old classic beep sound.
  SBSDKSoundTypeClassic = 1,
};



/// Descriptor and helper class for describing and creating a directory on the file system.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK20SBSDKStorageLocation")
@interface SBSDKStorageLocation : NSObject
/// The URL of the applications documents folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull applicationDocumentsFolderURL;)
+ (NSURL * _Nonnull)applicationDocumentsFolderURL SWIFT_WARN_UNUSED_RESULT;
/// The URL of the applications support folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull applicationSupportFolderURL;)
+ (NSURL * _Nonnull)applicationSupportFolderURL SWIFT_WARN_UNUSED_RESULT;
/// The URL of the applications caches folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull applicationCachesFolderURL;)
+ (NSURL * _Nonnull)applicationCachesFolderURL SWIFT_WARN_UNUSED_RESULT;
/// The default base URL for new storage locations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull defaultURL;)
+ (NSURL * _Nonnull)defaultURL SWIFT_WARN_UNUSED_RESULT;
/// The URL of the ScanbotSDK folder which is located within the application support folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull scanbotSupportFolderURL;)
+ (NSURL * _Nonnull)scanbotSupportFolderURL SWIFT_WARN_UNUSED_RESULT;
/// A temporary URL in the applications caches folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull temporaryURL;)
+ (NSURL * _Nonnull)temporaryURL SWIFT_WARN_UNUSED_RESULT;
/// A temporary storage location in the applications caches folder.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKStorageLocation * _Nullable temporary;)
+ (SBSDKStorageLocation * _Nullable)temporary SWIFT_WARN_UNUSED_RESULT;
/// The base folder URL of the receiver.
@property (nonatomic, copy) NSURL * _Nonnull baseURL;
/// Initializes the new storage location living at the given folder.
/// \param baseURL The URL of the folder in which the new storage should be located.
/// If the folder does not exist, it is created. If <code>nil</code> the new location will reside in the <code>defaultURL</code>.
///
- (nullable instancetype)initWithBaseURL:(NSURL * _Nullable)baseURL OBJC_DESIGNATED_INITIALIZER;
/// Generates a file or folder URL with the given name in the folder of the receivers baseURL.
/// \param key The name of the file or folder within the receivers.
///
///
/// returns:
/// A file or folder URL with the given name in the folder of the receivers baseURL
- (NSURL * _Nullable)urlWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Removes the receivers folder from the disk.
- (BOOL)removeFromDiskAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A container for test data, e.g. simulated camera mock data.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK13SBSDKTestData")
@interface SBSDKTestData : NSObject
/// The test data for a simulated camera. Intended for UI testing, etc.
/// If set to a non-nil value, any active scanners camera session will immediately switch to simulation mode and simulate a camera stream and captured images using an image source provided in the <code>SBSDKSimulatedCameraMockData</code>.
/// Setting it to <code>nil</code> will return to the normal camera mode on physical devices and to simulated mode without a video stream on iOS simulators.
/// Observably via KVO. Thread safe.
/// Defaults to <code>nil</code>.
@property (nonatomic, strong) SBSDKSimulatedCameraMockData * _Nullable cameraMockData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol that defines the methods and properties required for a custom tracking view to be displayed over detected barcodes using the <code>SBSDKBarcodeTrackingOverlayConfiguration</code>.
/// The custom view must conform to this protocol in order to be used as an overlay on top of the detected barcodes.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK31SBSDKTrackedBarcodeInfoViewable_")
@protocol SBSDKTrackedBarcodeInfoViewable
/// Creates and returns an instance of the conforming <code>SBSDKTrackedBarcodeInfoView</code>.
/// \param withBarcode The barcode to be tracked.
///
///
/// returns:
/// An instance of the conforming <code>SBSDKTrackedBarcodeInfoView</code>.
+ (UIView <SBSDKTrackedBarcodeInfoViewable> * _Nonnull)makeWithBarcode:(SBSDKBarcodeScannerResult * _Nonnull)withBarcode SWIFT_WARN_UNUSED_RESULT;
/// Updates the frame of the tracking view to match the position and size of the associated barcode.
/// note:
/// Implement this method to update the position and size of the tracking view based on the detected barcode’s frame.
/// \param barcodeFrame The frame of the detected barcode within the coordinate system of the tracking view’s superview.
///
/// \param isSelected A boolean value that indicates whether the associated barcode is selected.
///
/// \param textStyle The text style of the receiver.
///
/// \param polygonStyle The polygon style of the receiver.
///
- (void)updateWithBarcodeFrame:(CGRect)barcodeFrame isSelected:(BOOL)isSelected textStyle:(SBSDKBarcodeTrackedViewTextStyle * _Nonnull)textStyle polygonStyle:(SBSDKBarcodeTrackedViewPolygonStyle * _Nonnull)polygonStyle;
@end


/// Abstract class for all the configurations.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK12SBSDKUI2Node")
@interface SBSDKUI2Node : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKUI2RoundButton;

/// Configuration of the buttons available in the action bar.
SWIFT_CLASS_NAMED("SBSDKUI2ActionBarConfiguration")
@interface SBSDKUI2ActionBarConfiguration : SBSDKUI2Node
/// Appearance of the flash button.
@property (nonatomic, strong) SBSDKUI2RoundButton * _Nonnull flashButton;
/// Appearance of the zoom button.
@property (nonatomic, strong) SBSDKUI2RoundButton * _Nonnull zoomButton;
/// Appearance of the flip camera button.
@property (nonatomic, strong) SBSDKUI2RoundButton * _Nonnull flipCameraButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ActionBarConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFlashButton:(SBSDKUI2RoundButton * _Nonnull)flashButton zoomButton:(SBSDKUI2RoundButton * _Nonnull)zoomButton flipCameraButton:(SBSDKUI2RoundButton * _Nonnull)flipCameraButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2FindAndPickArOverlayPolygonConfiguration;
@class SBSDKUI2FindAndPickBadgeConfiguration;

/// Configuration of the AR overlay.
SWIFT_CLASS_NAMED("SBSDKUI2ArOverlayFindAndPickConfiguration")
@interface SBSDKUI2ArOverlayFindAndPickConfiguration : SBSDKUI2Node
/// Control the visibility of the user guidance.
/// Default is false
@property (nonatomic) BOOL visible;
/// If enabled, the scanner will always immediately scan a barcode in the viewfinder or the camera view. The overlay
/// will mark the scanned barcodes and stays above them.
/// Default is true
@property (nonatomic) BOOL automaticSelectionEnabled;
/// Configuration of the overlay polygon displayed on top of a barcode in the camera preview.
@property (nonatomic, strong) SBSDKUI2FindAndPickArOverlayPolygonConfiguration * _Nonnull polygon;
/// Configuration of the round badge on find and pick ar layer.
@property (nonatomic, strong) SBSDKUI2FindAndPickBadgeConfiguration * _Nonnull badge;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ArOverlayFindAndPickConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible automaticSelectionEnabled:(BOOL)automaticSelectionEnabled polygon:(SBSDKUI2FindAndPickArOverlayPolygonConfiguration * _Nonnull)polygon badge:(SBSDKUI2FindAndPickBadgeConfiguration * _Nonnull)badge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2BadgeStyle;
enum SBSDKUI2BarcodeItemInfoPosition : NSInteger;
@class SBSDKUI2ArOverlayPolygonConfiguration;
@class SBSDKUI2BarcodeItemConfiguration;

/// Configuration of the AR overlay displayed on top of barcodes in the camera preview.
SWIFT_CLASS_NAMED("SBSDKUI2ArOverlayGeneralConfiguration")
@interface SBSDKUI2ArOverlayGeneralConfiguration : SBSDKUI2Node
/// Control the visibility of the user guidance.
/// Default is false
@property (nonatomic) BOOL visible;
/// Parameters of the counter badge appearance e.g. color of background its stroke and text/icon color.
@property (nonatomic, strong) SBSDKUI2BadgeStyle * _Nonnull counterBadge;
/// If enabled, the scanner will always immediately scan a barcode in the viewfinder or the camera view. The overlay
/// will mark the scanned barcodes and stays above them.
/// Default is false
@property (nonatomic) BOOL automaticSelectionEnabled;
/// Where to display the barcode info box in the camera preview.
/// Default is BELOW
@property (nonatomic) enum SBSDKUI2BarcodeItemInfoPosition barcodeItemInfoPosition;
/// Configuration of the overlay polygon displayed on top of a barcode in the camera preview.
@property (nonatomic, strong) SBSDKUI2ArOverlayPolygonConfiguration * _Nonnull polygon;
/// Configuration of the barcode info box displayed in the camera preview.
@property (nonatomic, strong) SBSDKUI2BarcodeItemConfiguration * _Nonnull barcodeItemConfiguration;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ArOverlayGeneralConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible counterBadge:(SBSDKUI2BadgeStyle * _Nonnull)counterBadge automaticSelectionEnabled:(BOOL)automaticSelectionEnabled barcodeItemInfoPosition:(enum SBSDKUI2BarcodeItemInfoPosition)barcodeItemInfoPosition polygon:(SBSDKUI2ArOverlayPolygonConfiguration * _Nonnull)polygon barcodeItemConfiguration:(SBSDKUI2BarcodeItemConfiguration * _Nonnull)barcodeItemConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


@class SBSDKUI2PolygonStyle;

/// Configuration of the overlay polygon displayed on top of a barcode in the camera preview.
SWIFT_CLASS_NAMED("SBSDKUI2ArOverlayPolygonConfiguration")
@interface SBSDKUI2ArOverlayPolygonConfiguration : SBSDKUI2Node
/// Control the visibility of the overlay polygon.
/// Default is true
@property (nonatomic) BOOL visible;
/// Appearance of the overlay polygon when a barcode is not selected.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull deselected;
/// Appearance of the overlay polygon after a barcode has been selected.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull selected;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ArOverlayPolygonConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible deselected:(SBSDKUI2PolygonStyle * _Nonnull)deselected selected:(SBSDKUI2PolygonStyle * _Nonnull)selected OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the finder’s aspect ratio.
SWIFT_CLASS_NAMED("SBSDKUI2AspectRatio")
@interface SBSDKUI2AspectRatio : SBSDKUI2Node
/// Width component of the aspect ratio.
/// Default is 1.0
@property (nonatomic) double width;
/// Height component of the aspect ratio.
/// Default is 1.0
@property (nonatomic) double height;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2AspectRatio * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithWidth:(double)width height:(double)height OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// The customer format used in AUSTRALIA_POST codes. Only relevant for format codes 59 and 62.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2AustraliaPostCustomerFormat, "SBSDKUI2AustraliaPostCustomerFormat", open) {
/// The numeric format.
  SBSDKUI2AustraliaPostCustomerFormatNumeric = 0,
/// The alphanumeric format.
  SBSDKUI2AustraliaPostCustomerFormatAlphaNumeric = 1,
};

@class SBSDKUI2Color;

/// Appearance of the polygon used for buttons and hint backgrounds.
SWIFT_CLASS_NAMED("SBSDKUI2BackgroundStyle")
@interface SBSDKUI2BackgroundStyle : SBSDKUI2Node
/// Color of the polygon outline.
/// Default is “#FFFFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull strokeColor;
/// Polygon color.
/// Default is “#FFFFFF30”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull fillColor;
/// Width of the polygon outline in dp.
/// Default is 2.0
@property (nonatomic) double strokeWidth;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BackgroundStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStrokeColor:(SBSDKUI2Color * _Nonnull)strokeColor fillColor:(SBSDKUI2Color * _Nonnull)fillColor strokeWidth:(double)strokeWidth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Configuration of the round button.
SWIFT_CLASS_NAMED("SBSDKUI2BadgeStyle")
@interface SBSDKUI2BadgeStyle : SBSDKUI2Node
/// Control the visibility of the badge.
/// Default is true
@property (nonatomic) BOOL visible;
/// The style of the button’s background.
@property (nonatomic, strong) SBSDKUI2BackgroundStyle * _Nonnull background;
/// Color of the button foreground (icon, text).
/// Default is “?sbColorOnSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull foregroundColor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BadgeStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible background:(SBSDKUI2BackgroundStyle * _Nonnull)background foregroundColor:(SBSDKUI2Color * _Nonnull)foregroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the round button with badge.
SWIFT_CLASS_NAMED("SBSDKUI2BadgedButton")
@interface SBSDKUI2BadgedButton : SBSDKUI2Node
/// Color of the badge’s background shape.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull badgeBackgroundColor;
/// Color of the badge foreground (icon, text).
/// Default is “#C8193C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull badgeForegroundColor;
/// Whether the button is visible.
/// Default is true
@property (nonatomic) BOOL visible;
/// Color of the button background shape.
/// Default is “#0000007A”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull backgroundColor;
/// Color of the button foreground (icon, text).
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull foregroundColor;
/// Color of the button background shape when the button is active (selected, toggled).
/// Default is “#FFCE5C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull activeBackgroundColor;
/// Color of the button foreground (icon, text) when the button is active (selected, toggled).
/// Default is “#1C1B1F”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull activeForegroundColor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BadgedButton * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBadgeBackgroundColor:(SBSDKUI2Color * _Nonnull)badgeBackgroundColor badgeForegroundColor:(SBSDKUI2Color * _Nonnull)badgeForegroundColor visible:(BOOL)visible backgroundColor:(SBSDKUI2Color * _Nonnull)backgroundColor foregroundColor:(SBSDKUI2Color * _Nonnull)foregroundColor activeBackgroundColor:(SBSDKUI2Color * _Nonnull)activeBackgroundColor activeForegroundColor:(SBSDKUI2Color * _Nonnull)activeForegroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2StyledText;
@class SBSDKUI2IconStyle;

/// Button configuration.
SWIFT_CLASS_NAMED("SBSDKUI2BarButtonConfiguration")
@interface SBSDKUI2BarButtonConfiguration : SBSDKUI2Node
/// Whether the button is visible or not.
/// Default is true
@property (nonatomic) BOOL visible;
/// The text to be displayed on the button.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// The text to be read when button is selected through accessibility mode.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull accessibilityDescription;
/// The style of the button’s background.
@property (nonatomic, strong) SBSDKUI2BackgroundStyle * _Nonnull background;
/// The style of the button’s icon (icon, text).
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull icon;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarButtonConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible title:(SBSDKUI2StyledText * _Nonnull)title accessibilityDescription:(NSString * _Nonnull)accessibilityDescription background:(SBSDKUI2BackgroundStyle * _Nonnull)background icon:(SBSDKUI2IconStyle * _Nonnull)icon OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Type of barcode document format used.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeDocumentFormat")
@interface SBSDKUI2BarcodeDocumentFormat : NSObject
/// American Association of Motor Vehicle Administrators barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull aamva;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)aamva SWIFT_WARN_UNUSED_RESULT;
/// Boarding pass barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull boardingPass;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)boardingPass SWIFT_WARN_UNUSED_RESULT;
/// German medication plan barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull deMedicalPlan;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)deMedicalPlan SWIFT_WARN_UNUSED_RESULT;
/// German medical certificate barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull medicalCertificate;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)medicalCertificate SWIFT_WARN_UNUSED_RESULT;
/// ID card barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull idCardPdf417;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)idCardPdf417 SWIFT_WARN_UNUSED_RESULT;
/// SEPA barcode (aka GiroCode) document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull sepa;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)sepa SWIFT_WARN_UNUSED_RESULT;
/// Swiss QR barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull swissQr;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)swissQr SWIFT_WARN_UNUSED_RESULT;
/// VCard barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull vcard;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)vcard SWIFT_WARN_UNUSED_RESULT;
/// GS1 barcode document
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeDocumentFormat * _Nonnull gs1;)
+ (SBSDKUI2BarcodeDocumentFormat * _Nonnull)gs1 SWIFT_WARN_UNUSED_RESULT;
/// The raw value integer of the current <code>SBSDKUI2BarcodeDocumentFormat</code>.
@property (nonatomic, readonly) NSInteger rawValue;
/// Returns an instance of <code>SBSDKUI2BarcodeDocumentFormat</code> based on the provided raw value.
/// \param rawValue An integer representing the raw value of the <code>SBSDKUI2BarcodeDocumentFormat</code>.
///
///
/// returns:
/// An instance of <code>SBSDKUI2BarcodeDocumentFormat</code> corresponding to the provided raw value, or <code>nil</code> if
/// no match is found.
+ (SBSDKUI2BarcodeDocumentFormat * _Nullable)enumValueFrom:(NSInteger)rawValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Barcode symbology used.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeFormat")
@interface SBSDKUI2BarcodeFormat : NSObject
/// Aztec barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull aztec;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)aztec SWIFT_WARN_UNUSED_RESULT;
/// Codabar barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull codabar;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)codabar SWIFT_WARN_UNUSED_RESULT;
/// Code 25 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code25;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code25 SWIFT_WARN_UNUSED_RESULT;
/// Code 39 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code39;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code39 SWIFT_WARN_UNUSED_RESULT;
/// Code 93 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code93;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code93 SWIFT_WARN_UNUSED_RESULT;
/// Code 128 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code128;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code128 SWIFT_WARN_UNUSED_RESULT;
/// Data Matrix barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull dataMatrix;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)dataMatrix SWIFT_WARN_UNUSED_RESULT;
/// EAN-8 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull ean8;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)ean8 SWIFT_WARN_UNUSED_RESULT;
/// EAN-13 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull ean13;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)ean13 SWIFT_WARN_UNUSED_RESULT;
/// ITF (Interleaved 2 of 5) barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull itf;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)itf SWIFT_WARN_UNUSED_RESULT;
/// PDF417 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull pdf417;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)pdf417 SWIFT_WARN_UNUSED_RESULT;
/// QR Code barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull qrCode;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)qrCode SWIFT_WARN_UNUSED_RESULT;
/// Micro QR Code barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull microQrCode;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)microQrCode SWIFT_WARN_UNUSED_RESULT;
/// Databar barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull databar;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)databar SWIFT_WARN_UNUSED_RESULT;
/// Databar Expanded barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull databarExpanded;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)databarExpanded SWIFT_WARN_UNUSED_RESULT;
/// UPC-A barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull upcA;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)upcA SWIFT_WARN_UNUSED_RESULT;
/// UPC-E barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull upcE;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)upcE SWIFT_WARN_UNUSED_RESULT;
/// MSI Plessey barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull msiPlessey;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)msiPlessey SWIFT_WARN_UNUSED_RESULT;
/// IATA 2 of 5 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull iata2Of5;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)iata2Of5 SWIFT_WARN_UNUSED_RESULT;
/// Industrial 2 of 5 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull industrial2Of5;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)industrial2Of5 SWIFT_WARN_UNUSED_RESULT;
/// USPS Intelligent Mail (aka USPS OneCode, USPS-STD-11)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull uspsIntelligentMail;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)uspsIntelligentMail SWIFT_WARN_UNUSED_RESULT;
/// Royal Mail Four-State Customer Code, (aka RM4SCC, CBC, BPO 4 State Code)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull royalMail;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)royalMail SWIFT_WARN_UNUSED_RESULT;
/// Japan Post Four-State Barcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull japanPost;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)japanPost SWIFT_WARN_UNUSED_RESULT;
/// Royal TNT Post Four-State Barcode (aka KIX, Klant IndeX)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull royalTntPost;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)royalTntPost SWIFT_WARN_UNUSED_RESULT;
/// Australia Post Four-State Customer Code
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull australiaPost;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)australiaPost SWIFT_WARN_UNUSED_RESULT;
/// GS1 DataBar Limited
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull databarLimited;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)databarLimited SWIFT_WARN_UNUSED_RESULT;
/// GS1 Composite
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull gs1Composite;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)gs1Composite SWIFT_WARN_UNUSED_RESULT;
/// Databar micro pdf 417
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull microPdf417;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)microPdf417 SWIFT_WARN_UNUSED_RESULT;
/// Maxicode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull maxiCode;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)maxiCode SWIFT_WARN_UNUSED_RESULT;
/// RMQR code
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull rmqrCode;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)rmqrCode SWIFT_WARN_UNUSED_RESULT;
/// Code 11 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code11;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code11 SWIFT_WARN_UNUSED_RESULT;
/// Code 32 barcode type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUI2BarcodeFormat * _Nonnull code32;)
+ (SBSDKUI2BarcodeFormat * _Nonnull)code32 SWIFT_WARN_UNUSED_RESULT;
/// The raw value integer of the current <code>SBSDKUI2BarcodeFormat</code>.
@property (nonatomic, readonly) NSInteger rawValue;
/// Returns an instance of <code>SBSDKUI2BarcodeFormat</code> based on the provided raw value.
/// \param rawValue An integer representing the raw value of the <code>SBSDKUI2BarcodeFormat</code>.
///
///
/// returns:
/// An instance of <code>SBSDKUI2BarcodeFormat</code> corresponding to the provided raw value, or <code>nil</code> if no
/// match is found.
+ (SBSDKUI2BarcodeFormat * _Nullable)enumValueFrom:(NSInteger)rawValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBSDKUI2BarcodeFormat (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Returns an array of all valid barcode formats.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull allFormats;)
+ (NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull)allFormats SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of all commonly-used barcode formats.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull commonFormats;)
+ (NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull)commonFormats SWIFT_WARN_UNUSED_RESULT;
/// Returns an array containing all 1-D barcode formats.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull oneDFormats;)
+ (NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull)oneDFormats SWIFT_WARN_UNUSED_RESULT;
/// Returns an array containing all 2-D barcode formats.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull twoDFormats;)
+ (NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull)twoDFormats SWIFT_WARN_UNUSED_RESULT;
/// Converts from <code>SBSDKUI2BarcodeFormat</code> to <code>SBSDKBarcodeType</code>.
- (SBSDKBarcodeType * _Nonnull)toSDKType SWIFT_WARN_UNUSED_RESULT;
@end

@protocol SBSDKUI2BarcodeItemMapper;
@class SBSDKUI2BarcodeItemErrorState;

/// Configuration of the barcode data mapping.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeInfoMapping")
@interface SBSDKUI2BarcodeInfoMapping : SBSDKUI2Node
/// Callback to map the barcode data to the data of the corresponding product.
@property (nonatomic, strong) id <SBSDKUI2BarcodeItemMapper> _Nullable barcodeItemMapper;
/// Background color of the barcode info dialog.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sheetColor;
/// Color of the divider and separator lines in the barcode info dialog.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull dividerColor;
/// Background color of the overlay surrounding the barcode mapping error dialog.
/// Default is “?sbColorModalOverlay”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull modalOverlayColor;
/// Text being displayed while a barcode is being mapped.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull loadingMessage;
/// Configuration of the error state displayed when processing a barcode fails.
@property (nonatomic, strong) SBSDKUI2BarcodeItemErrorState * _Nonnull errorState;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeInfoMapping * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBarcodeItemMapper:(id <SBSDKUI2BarcodeItemMapper> _Nullable)barcodeItemMapper sheetColor:(SBSDKUI2Color * _Nonnull)sheetColor dividerColor:(SBSDKUI2Color * _Nonnull)dividerColor modalOverlayColor:(SBSDKUI2Color * _Nonnull)modalOverlayColor loadingMessage:(SBSDKUI2StyledText * _Nonnull)loadingMessage errorState:(SBSDKUI2BarcodeItemErrorState * _Nonnull)errorState OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Data about the scanned barcode.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeItem")
@interface SBSDKUI2BarcodeItem : NSObject
/// Recognized barcode symbology.
@property (nonatomic, readonly, strong) SBSDKUI2BarcodeFormat * _Nullable type;
/// Number of recognized barcodes of this symbology and value.
@property (nonatomic, readonly) NSInteger count;
/// Recognized value of the barcode.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// Recognized barcode value with extension (if available).
@property (nonatomic, readonly, copy) NSString * _Nonnull textWithExtension;
/// Representation of the raw data that is contained the recognized barcode.
@property (nonatomic, readonly, copy) NSData * _Nonnull rawBytes;
/// The parsed known document format (if parsed successfully).
@property (nonatomic, readonly, strong) SBSDKGenericDocument * _Nullable parsedDocument;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeItem * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(SBSDKUI2BarcodeFormat * _Nullable)type count:(NSInteger)count text:(NSString * _Nonnull)text textWithExtension:(NSString * _Nonnull)textWithExtension rawBytes:(NSData * _Nonnull)rawBytes parsedDocument:(SBSDKGenericDocument * _Nullable)parsedDocument OBJC_DESIGNATED_INITIALIZER;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuration of the barcode info box displayed in the camera preview.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeItemConfiguration")
@interface SBSDKUI2BarcodeItemConfiguration : SBSDKUI2Node
/// Control the visibility of the barcode image in the info box.
/// Default is true
@property (nonatomic) BOOL imageVisible;
/// Configuration of the text displaying a barcode’s value in the info box when the barcode has been selected.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull titleSelected;
/// Configuration of the text displaying a barcode’s symbology in the info box when the barcode has been selected.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull subtitleSelected;
/// Configuration of the text displaying a barcode’s value in the info box when the barcode is yet to be selected.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull titleDeselected;
/// Configuration of the text displaying a barcode’s symbology in the info box when the barcode is yet to be
/// selected.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull subtitleDeselected;
/// Appearance of the barcode info box’s background when a barcode has been selected.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull backgroundSelected;
/// Appearance of the barcode info box’s background when a barcode is yet to be selected.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull backgroundDeselected;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeItemConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithImageVisible:(BOOL)imageVisible titleSelected:(SBSDKUI2StyledText * _Nonnull)titleSelected subtitleSelected:(SBSDKUI2StyledText * _Nonnull)subtitleSelected titleDeselected:(SBSDKUI2StyledText * _Nonnull)titleDeselected subtitleDeselected:(SBSDKUI2StyledText * _Nonnull)subtitleDeselected backgroundSelected:(SBSDKUI2PolygonStyle * _Nonnull)backgroundSelected backgroundDeselected:(SBSDKUI2PolygonStyle * _Nonnull)backgroundDeselected OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2ButtonConfiguration;

/// Configuration of the the mapper’s error dialog.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeItemErrorState")
@interface SBSDKUI2BarcodeItemErrorState : SBSDKUI2Node
/// Title displayed above the error message.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Error message.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull subtitle;
/// Configuration of the retry button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull retryButton;
/// Configuration of the cancel button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull cancelButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeItemErrorState * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitle:(SBSDKUI2StyledText * _Nonnull)title subtitle:(SBSDKUI2StyledText * _Nonnull)subtitle retryButton:(SBSDKUI2ButtonConfiguration * _Nonnull)retryButton cancelButton:(SBSDKUI2ButtonConfiguration * _Nonnull)cancelButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Where to display the barcode info box in the camera preview.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2BarcodeItemInfoPosition, "SBSDKUI2BarcodeItemInfoPosition", open) {
/// Don’t display any barcode info.
  SBSDKUI2BarcodeItemInfoPositionDisabled = 0,
/// Display the barcode info box in the center of the overlay polygon.
  SBSDKUI2BarcodeItemInfoPositionStacked = 1,
/// Display the barcode info box below the overlay polygon.
  SBSDKUI2BarcodeItemInfoPositionBelow = 2,
/// Display the barcode info box above the overlay polygon.
  SBSDKUI2BarcodeItemInfoPositionAbove = 3,
};

@class SBSDKUI2BarcodeMappedData;

/// Maps a barcode’s data to the data of the corresponding product.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK25SBSDKUI2BarcodeItemMapper_")
@protocol SBSDKUI2BarcodeItemMapper
/// Function that maps a barcode’s data to the data of the corresponding product.
/// \param item The barcode data to be mapped.
///
/// \param onResult Function that returns the result on the screen.
///
/// \param onError Function that returns an error on the screen in case of a timeout or other issue.
///
- (void)mapBarcodeItemWithItem:(SBSDKUI2BarcodeItem * _Nonnull)item onResult:(void (^ _Nonnull)(SBSDKUI2BarcodeMappedData * _Nonnull))onResult onError:(void (^ _Nonnull)(void))onError;
@end


/// Format of the mapped barcode data.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeMappedData")
@interface SBSDKUI2BarcodeMappedData : SBSDKUI2Node
/// Title of the barcode.
@property (nonatomic, copy) NSString * _Nonnull title;
/// Subtitle of the barcode.
@property (nonatomic, copy) NSString * _Nonnull subtitle;
/// Image of the barcode.
@property (nonatomic, copy) NSString * _Nonnull barcodeImage;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeMappedData * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle barcodeImage:(NSString * _Nonnull)barcodeImage OBJC_DESIGNATED_INITIALIZER;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBSDKUI2BarcodeMappedData (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// The string to be assigned to <code>SBSDKUI2BarcodeMappedData/barcodeImage</code> when the image of the barcode should be used in the mapped data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull barcodeImageKey;)
+ (NSString * _Nonnull)barcodeImageKey SWIFT_WARN_UNUSED_RESULT;
@end

enum SBSDKUI2BarcodesExtensionFilter : NSInteger;
enum SBSDKUI2MSIPlesseyChecksumAlgorithm : NSInteger;
enum SBSDKUI2Gs1Handling : NSInteger;

/// Configuration of the scanning behavior.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeRecognizerConfiguration")
@interface SBSDKUI2BarcodeRecognizerConfiguration : SBSDKUI2Node
/// List of accepted barcode document formats.
@property (nonatomic, copy) NSArray<SBSDKUI2BarcodeDocumentFormat *> * _Nonnull acceptedDocumentFormats;
/// Filter for extended EAN and UPC barcodes.
/// Default is NO_FILTER
@property (nonatomic) enum SBSDKUI2BarcodesExtensionFilter barcodesExtensionFilter;
/// Regular expression filter for barcode text. If the barcode text does not match the regular expression, it will
/// not be scanned. The default is an empty string (setting is turned off). This option overrides
/// <code>barcodesExtensionFilter</code> option.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull barcodesRegexFilter;
/// Optional minimum required text length of the detected barcode. The default is 0 (setting is turned off). NOTE -
/// This feature works on ITF barcodes only.
/// Default is 0
@property (nonatomic) NSInteger minimumTextLength;
/// Optional maximum text length of the detected barcode. The default is 0 (setting is turned off). NOTE - This
/// feature works on ITF barcodes only.
/// Default is 0
@property (nonatomic) NSInteger maximumTextLength;
/// Optional minimum required quiet zone on the barcode. Measured in modules (the smallest bar size on a barcode).
/// The default is 10. NOTE - This feature works on ITF barcodes only.
/// Default is 10
@property (nonatomic) NSInteger minimum1DBarcodesQuietZone;
/// If <code>true</code>, check digits for UPC, EAN and MSI Plessey codes are removed from the result. Has no effect if both
/// single and double digit MSI Plessey checksums are enabled. The default is <code>false</code>.
/// Default is false
@property (nonatomic) BOOL stripCheckDigits;
/// If <code>true</code>, the optional check digit for IATA_2_OF_5 codes is used in validation. The default is <code>true</code>.
/// Default is true
@property (nonatomic) BOOL useIATA2OF5Checksum;
/// If <code>true</code>, the optional check digit for CODE_11 codes is used in validation. The default is <code>true</code>.
/// Default is true
@property (nonatomic) BOOL useCode11Checksum;
/// List of accepted barcode symbologies.
@property (nonatomic, copy) NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull barcodeFormats;
/// Checksum algorithm used for MSI Plessey barcodes. The default value is MOD_10.
/// Default is MOD_10
@property (nonatomic) enum SBSDKUI2MSIPlesseyChecksumAlgorithm msiPlesseyChecksumAlgorithm;
/// The customer format used in AUSTRALIA_POST codes. The default value is ALPHA_NUMERIC.
/// Default is ALPHA_NUMERIC
@property (nonatomic) enum SBSDKUI2AustraliaPostCustomerFormat australiaPostCustomerFormat;
/// The expected way of handling GS1_COMPOSITE barcodes.
/// Default is PARSE
@property (nonatomic) enum SBSDKUI2Gs1Handling gs1Handling;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeRecognizerConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAcceptedDocumentFormats:(NSArray<SBSDKUI2BarcodeDocumentFormat *> * _Nonnull)acceptedDocumentFormats barcodesExtensionFilter:(enum SBSDKUI2BarcodesExtensionFilter)barcodesExtensionFilter barcodesRegexFilter:(NSString * _Nonnull)barcodesRegexFilter minimumTextLength:(NSInteger)minimumTextLength maximumTextLength:(NSInteger)maximumTextLength minimum1DBarcodesQuietZone:(NSInteger)minimum1DBarcodesQuietZone stripCheckDigits:(BOOL)stripCheckDigits useIATA2OF5Checksum:(BOOL)useIATA2OF5Checksum useCode11Checksum:(BOOL)useCode11Checksum barcodeFormats:(NSArray<SBSDKUI2BarcodeFormat *> * _Nonnull)barcodeFormats msiPlesseyChecksumAlgorithm:(enum SBSDKUI2MSIPlesseyChecksumAlgorithm)msiPlesseyChecksumAlgorithm australiaPostCustomerFormat:(enum SBSDKUI2AustraliaPostCustomerFormat)australiaPostCustomerFormat gs1Handling:(enum SBSDKUI2Gs1Handling)gs1Handling OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2Palette;
@class SBSDKUI2BarcodeTextLocalization;
@class SBSDKUI2TopBarConfiguration;
@class SBSDKUI2ViewFinderConfiguration;
@class SBSDKUI2UserGuidanceConfiguration;
@class SBSDKUI2CameraPermissionScreen;
@class SBSDKUI2CameraConfiguration;
@class SBSDKUI2BarcodeUseCase;
@class SBSDKUI2Sound;
@class SBSDKUI2Vibration;
@class SBSDKUI2Timeouts;

/// Configuration of the barcode scanner screen.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeScannerConfiguration")
@interface SBSDKUI2BarcodeScannerConfiguration : SBSDKUI2Node
/// Version number of the configuration object.
/// Default is “1.0”
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// The configuration object should be applied for this screen.
/// Default is “BarcodeScanner”
@property (nonatomic, readonly, copy) NSString * _Nonnull screen;
/// Define the screen’s base color values from which other colors are derived.
@property (nonatomic, strong) SBSDKUI2Palette * _Nonnull palette;
/// Configuration of the all strings for barcode scanner.
@property (nonatomic, strong) SBSDKUI2BarcodeTextLocalization * _Nonnull localization;
/// Color of the screen’s background.
/// Default is “?sbColorSurfaceLow”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull backgroundColor;
/// Configuration of the top bar.
@property (nonatomic, strong) SBSDKUI2TopBarConfiguration * _Nonnull topBar;
/// Configuration of the action bar.
@property (nonatomic, strong) SBSDKUI2ActionBarConfiguration * _Nonnull actionBar;
/// Configuration of the view finder.
@property (nonatomic, strong) SBSDKUI2ViewFinderConfiguration * _Nonnull viewFinder;
/// Configuration of the text hint guiding users to move the view finder over a barcode.
@property (nonatomic, strong) SBSDKUI2UserGuidanceConfiguration * _Nonnull userGuidance;
/// Configuration of the dialog for requesting camera permissions.
@property (nonatomic, strong) SBSDKUI2CameraPermissionScreen * _Nonnull cameraPermission;
/// Configuration of the camera behavior.
@property (nonatomic, strong) SBSDKUI2CameraConfiguration * _Nonnull cameraConfiguration;
/// Configuration of the scanning behavior.
@property (nonatomic, strong) SBSDKUI2BarcodeRecognizerConfiguration * _Nonnull recognizerConfiguration;
/// Configuration of the barcode scanner screen’s behavior.
@property (nonatomic, strong) SBSDKUI2BarcodeUseCase * _Nonnull useCase;
/// Configuration of the scan confirmation sound.
@property (nonatomic, strong) SBSDKUI2Sound * _Nonnull sound;
/// Configuration of the scan scan confirmation vibration.
@property (nonatomic, strong) SBSDKUI2Vibration * _Nonnull vibration;
/// Configuration of timeouts.
@property (nonatomic, strong) SBSDKUI2Timeouts * _Nonnull timeouts;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeScannerConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVersion:(NSString * _Nonnull)version screen:(NSString * _Nonnull)screen palette:(SBSDKUI2Palette * _Nonnull)palette localization:(SBSDKUI2BarcodeTextLocalization * _Nonnull)localization backgroundColor:(SBSDKUI2Color * _Nonnull)backgroundColor topBar:(SBSDKUI2TopBarConfiguration * _Nonnull)topBar actionBar:(SBSDKUI2ActionBarConfiguration * _Nonnull)actionBar viewFinder:(SBSDKUI2ViewFinderConfiguration * _Nonnull)viewFinder userGuidance:(SBSDKUI2UserGuidanceConfiguration * _Nonnull)userGuidance cameraPermission:(SBSDKUI2CameraPermissionScreen * _Nonnull)cameraPermission cameraConfiguration:(SBSDKUI2CameraConfiguration * _Nonnull)cameraConfiguration recognizerConfiguration:(SBSDKUI2BarcodeRecognizerConfiguration * _Nonnull)recognizerConfiguration useCase:(SBSDKUI2BarcodeUseCase * _Nonnull)useCase sound:(SBSDKUI2Sound * _Nonnull)sound vibration:(SBSDKUI2Vibration * _Nonnull)vibration timeouts:(SBSDKUI2Timeouts * _Nonnull)timeouts OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBSDKUI2BarcodeScannerConfiguration (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
- (nullable instancetype)initWithJson:(NSData * _Nonnull)json;
@end


/// Results of the barcode scan.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeScannerResult")
@interface SBSDKUI2BarcodeScannerResult : NSObject
/// Recognized barcode items.
@property (nonatomic, readonly, copy) NSArray<SBSDKUI2BarcodeItem *> * _Nonnull items;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeScannerResult * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithItems:(NSArray<SBSDKUI2BarcodeItem *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// A highly customizable camera-based RTU-UI view controller to detect QR and barcodes.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKUI2BarcodeScannerViewController")
@interface SBSDKUI2BarcodeScannerViewController : UIViewController
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates a new instance of <code>SBSDKUI2BarcodeScannerViewController</code>, presents it modally and dismisses it when the user cancelled or finished the scanning.
/// In Swift language it is used with structured concurrency (async/await).
/// \param presenter The view controller the new instance should be presented on.
///
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
///
/// returns:
/// The scanning result or <code>nil</code>, if an error was thrown or the screen has been cancelled.
+ (void)presentAsyncOn:(UIViewController * _Nonnull)presenter configuration:(SBSDKUI2BarcodeScannerConfiguration * _Nonnull)configuration completionHandler:(void (^ _Nonnull)(SBSDKUI2BarcodeScannerResult * _Nullable, NSError * _Nullable))completionHandler;
/// Creates a new instance of <code>SBSDKUI2BarcodeScannerViewController</code> and presents it modally.
/// \param presenter The view controller the new instance should be presented on.
///
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param handler The handler that is being called upon completion.
///
///
/// returns:
/// A new instance of <code>SBSDKUI2BarcodeScannerViewController</code>.
+ (SBSDKUI2BarcodeScannerViewController * _Nonnull)presentOn:(UIViewController * _Nonnull)presenter configuration:(SBSDKUI2BarcodeScannerConfiguration * _Nonnull)configuration handler:(void (^ _Nonnull)(SBSDKUI2BarcodeScannerViewController * _Nonnull, BOOL, NSError * _Nullable, SBSDKUI2BarcodeScannerResult * _Nullable))handler;
/// Creates a new instance of <code>SBSDKUI2BarcodeScannerViewController</code>.
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param handler The handler that is being called upon completion.
///
///
/// returns:
/// A new instance of <code>SBSDKUI2BarcodeScannerViewController</code>.
+ (SBSDKUI2BarcodeScannerViewController * _Nonnull)createNewWithConfiguration:(SBSDKUI2BarcodeScannerConfiguration * _Nonnull)configuration handler:(void (^ _Nonnull)(SBSDKUI2BarcodeScannerViewController * _Nonnull, BOOL, NSError * _Nullable, SBSDKUI2BarcodeScannerResult * _Nullable))handler SWIFT_WARN_UNUSED_RESULT;
/// If set to <code>True</code>, the receiver automatically hides the home indicator.
/// Does not apply to devices with a Home button.
@property (nonatomic) BOOL shouldHideHomeIndicator;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarHidden;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end


/// Configuration of the all strings for barcode scanner.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeTextLocalization")
@interface SBSDKUI2BarcodeTextLocalization : SBSDKUI2Node
/// Title for the camera permission dialog.
/// Default is “Camera permission denied!”
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionEnableCameraTitle;
/// Explanation for the camera permission dialog.
/// Default is “Please allow the usage of the camera to start the scanning process.”
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionEnableCameraExplanation;
/// Button text for the camera permission dialog.
/// Default is “Grant permission”
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionEnableCameraButton;
/// Close button text for the camera permission dialog.
/// Default is “Close”
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionCloseButton;
/// Cancel button text for the top bar.
/// Default is “Cancel”
@property (nonatomic, copy) NSString * _Nonnull topBarCancelButton;
/// Title for the top bar.
/// Default is “Scan Item”
@property (nonatomic, copy) NSString * _Nonnull topBarTitle;
/// User guidance text.
/// Default is “Move the finder over a barcode”
@property (nonatomic, copy) NSString * _Nonnull userGuidance;
/// Loading message for barcode info mapping.
/// Default is “Loading details…”
@property (nonatomic, copy) NSString * _Nonnull barcodeInfoMappingLoadingMessage;
/// Title for the barcode info mapping error state.
/// Default is “Connection Error!”
@property (nonatomic, copy) NSString * _Nonnull barcodeInfoMappingErrorStateTitle;
/// Subtitle for the barcode info mapping error state.
/// Default is “There was an issue and the data requested was not fetched. You could try again or discard this
/// result to start a new scan.”
@property (nonatomic, copy) NSString * _Nonnull barcodeInfoMappingErrorStateSubtitle;
/// Retry button text for the barcode info mapping error state.
/// Default is “Retry”
@property (nonatomic, copy) NSString * _Nonnull barcodeInfoMappingErrorStateRetryButton;
/// Cancel button text for the barcode info mapping error state.
/// Default is “Cancel”
@property (nonatomic, copy) NSString * _Nonnull barcodeInfoMappingErrorStateCancelButton;
/// Title for the manual count edit dialog.
/// Default is “Update count”
@property (nonatomic, copy) NSString * _Nonnull manualCountEditDialogTitle;
/// Info for the manual count edit dialog.
/// Default is “Adjust the number of items you scanned.”
@property (nonatomic, copy) NSString * _Nonnull manualCountEditDialogInfo;
/// Update button text for the manual count edit dialog.
/// Default is “Update”
@property (nonatomic, copy) NSString * _Nonnull manualCountEditDialogUpdateButton;
/// Cancel button text for the manual count edit dialog.
/// Default is “Cancel”
@property (nonatomic, copy) NSString * _Nonnull manualCountEditDialogCancelButton;
/// Reset button text for the barcode sheet.
/// Default is “Reset”
@property (nonatomic, copy) NSString * _Nonnull sheetResetButton;
/// Clear all button text for the barcode sheet.
/// Default is “Clear all”
@property (nonatomic, copy) NSString * _Nonnull sheetClearAllButton;
/// Submit button text for the barcode sheet.
/// Default is “Submit”
@property (nonatomic, copy) NSString * _Nonnull sheetSubmitButton;
/// Start scanning button text for the barcode sheet.
/// Default is “Start scanning”
@property (nonatomic, copy) NSString * _Nonnull sheetStartScanningButton;
/// Title for the barcode sheet placeholder.
/// Default is “No barcodes here!”
@property (nonatomic, copy) NSString * _Nonnull sheetPlaceholderTitle;
/// Subtitle for the barcode sheet placeholder.
/// Default is “The barcode list is currently empty. Close this sheet and scan your items to add them.”
@property (nonatomic, copy) NSString * _Nonnull sheetPlaceholderSubtitle;
/// Cancel button text for the single mode confirmation dialog.
/// Default is “Close”
@property (nonatomic, copy) NSString * _Nonnull singleModeConfirmationCancelButton;
/// Title for the multiple mode barcode sheet.
/// Default is “%d items”
@property (nonatomic, copy) NSString * _Nonnull multipleModeSheetTitle;
/// Title for the find and pick barcode sheet.
/// Default is “%d/%d scanned”
@property (nonatomic, copy) NSString * _Nonnull findAndPickSheetTitle;
/// Subtitle for the find and pick barcode sheet.
/// Default is “%d/%d added”
@property (nonatomic, copy) NSString * _Nonnull findAndPickSheetBarcodeItemSubtitle;
/// Title for the find and pick partial alert.
/// Default is “Incomplete scan!”
@property (nonatomic, copy) NSString * _Nonnull findAndPickPartialAlertTitle;
/// Subtitle for the find and pick partial alert.
/// Default is “Some codes are yet to be scanned. Proceed with submission anyway?”
@property (nonatomic, copy) NSString * _Nonnull findAndPickPartialAlertSubtitle;
/// Cancel button text for the find and pick partial alert.
/// Default is “Cancel”
@property (nonatomic, copy) NSString * _Nonnull findAndPickPartialAlertCancelButton;
/// Submit button text for the find and pick partial alert.
/// Default is “Yes, Submit”
@property (nonatomic, copy) NSString * _Nonnull findAndPickPartialAlertSubmitButton;
/// Title for the find and pick complete alert.
/// Default is “All codes found!”
@property (nonatomic, copy) NSString * _Nonnull findAndPickCompleteAlertTitle;
/// Subtitle for the find and pick complete alert.
/// Default is “You have successfully scanned all codes. Proceed with submission?”
@property (nonatomic, copy) NSString * _Nonnull findAndPickCompleteAlertSubtitle;
/// Cancel button text for the find and pick complete alert.
/// Default is “Dismiss”
@property (nonatomic, copy) NSString * _Nonnull findAndPickCompleteAlertCancelButton;
/// Submit button text for the find and pick complete alert.
/// Default is “Submit”
@property (nonatomic, copy) NSString * _Nonnull findAndPickCompleteAlertSubmitButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeTextLocalization * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCameraPermissionEnableCameraTitle:(NSString * _Nonnull)cameraPermissionEnableCameraTitle cameraPermissionEnableCameraExplanation:(NSString * _Nonnull)cameraPermissionEnableCameraExplanation cameraPermissionEnableCameraButton:(NSString * _Nonnull)cameraPermissionEnableCameraButton cameraPermissionCloseButton:(NSString * _Nonnull)cameraPermissionCloseButton topBarCancelButton:(NSString * _Nonnull)topBarCancelButton topBarTitle:(NSString * _Nonnull)topBarTitle userGuidance:(NSString * _Nonnull)userGuidance barcodeInfoMappingLoadingMessage:(NSString * _Nonnull)barcodeInfoMappingLoadingMessage barcodeInfoMappingErrorStateTitle:(NSString * _Nonnull)barcodeInfoMappingErrorStateTitle barcodeInfoMappingErrorStateSubtitle:(NSString * _Nonnull)barcodeInfoMappingErrorStateSubtitle barcodeInfoMappingErrorStateRetryButton:(NSString * _Nonnull)barcodeInfoMappingErrorStateRetryButton barcodeInfoMappingErrorStateCancelButton:(NSString * _Nonnull)barcodeInfoMappingErrorStateCancelButton manualCountEditDialogTitle:(NSString * _Nonnull)manualCountEditDialogTitle manualCountEditDialogInfo:(NSString * _Nonnull)manualCountEditDialogInfo manualCountEditDialogUpdateButton:(NSString * _Nonnull)manualCountEditDialogUpdateButton manualCountEditDialogCancelButton:(NSString * _Nonnull)manualCountEditDialogCancelButton sheetResetButton:(NSString * _Nonnull)sheetResetButton sheetClearAllButton:(NSString * _Nonnull)sheetClearAllButton sheetSubmitButton:(NSString * _Nonnull)sheetSubmitButton sheetStartScanningButton:(NSString * _Nonnull)sheetStartScanningButton sheetPlaceholderTitle:(NSString * _Nonnull)sheetPlaceholderTitle sheetPlaceholderSubtitle:(NSString * _Nonnull)sheetPlaceholderSubtitle singleModeConfirmationCancelButton:(NSString * _Nonnull)singleModeConfirmationCancelButton multipleModeSheetTitle:(NSString * _Nonnull)multipleModeSheetTitle findAndPickSheetTitle:(NSString * _Nonnull)findAndPickSheetTitle findAndPickSheetBarcodeItemSubtitle:(NSString * _Nonnull)findAndPickSheetBarcodeItemSubtitle findAndPickPartialAlertTitle:(NSString * _Nonnull)findAndPickPartialAlertTitle findAndPickPartialAlertSubtitle:(NSString * _Nonnull)findAndPickPartialAlertSubtitle findAndPickPartialAlertCancelButton:(NSString * _Nonnull)findAndPickPartialAlertCancelButton findAndPickPartialAlertSubmitButton:(NSString * _Nonnull)findAndPickPartialAlertSubmitButton findAndPickCompleteAlertTitle:(NSString * _Nonnull)findAndPickCompleteAlertTitle findAndPickCompleteAlertSubtitle:(NSString * _Nonnull)findAndPickCompleteAlertSubtitle findAndPickCompleteAlertCancelButton:(NSString * _Nonnull)findAndPickCompleteAlertCancelButton findAndPickCompleteAlertSubmitButton:(NSString * _Nonnull)findAndPickCompleteAlertSubmitButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


@class SBSDKUI2SingleScanningMode;
@class SBSDKUI2MultipleScanningMode;
@class SBSDKUI2FindAndPickScanningMode;

/// Configuration of the barcode scanner screen’s behavior.
SWIFT_CLASS_NAMED("SBSDKUI2BarcodeUseCase")
@interface SBSDKUI2BarcodeUseCase : SBSDKUI2Node
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2BarcodeUseCase * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
+ (SBSDKUI2SingleScanningMode * _Nonnull)singleScanningMode SWIFT_WARN_UNUSED_RESULT;
+ (SBSDKUI2MultipleScanningMode * _Nonnull)multipleScanningMode SWIFT_WARN_UNUSED_RESULT;
+ (SBSDKUI2FindAndPickScanningMode * _Nonnull)findAndPickScanningMode SWIFT_WARN_UNUSED_RESULT;
@end

/// Filter for extended EAN and UPC barcodes.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2BarcodesExtensionFilter, "SBSDKUI2BarcodesExtensionFilter", open) {
/// EAN and UPC codes are not filtered. Both are returned regardless if they have an extension or not.
  SBSDKUI2BarcodesExtensionFilterNoFilter = 0,
/// Only EAN and UPC codes with extensions are returned.
  SBSDKUI2BarcodesExtensionFilterOnlyWithExtensions = 1,
/// Only EAN and UPC codes without extensions are returned.
  SBSDKUI2BarcodesExtensionFilterOnlyWithoutExtensions = 2,
};

@class SBSDKUI2ForegroundStyle;

/// Button configuration.
SWIFT_CLASS_NAMED("SBSDKUI2ButtonConfiguration")
@interface SBSDKUI2ButtonConfiguration : SBSDKUI2Node
/// Whether the button is visible or not.
/// Default is true
@property (nonatomic) BOOL visible;
/// The text to be displayed on the button.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull text;
/// The text to be read when button is selected through accessibility mode.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull accessibilityDescription;
/// The style of the button’s background.
@property (nonatomic, strong) SBSDKUI2BackgroundStyle * _Nonnull background;
/// The style of the button’s foreground (icon, text).
@property (nonatomic, strong) SBSDKUI2ForegroundStyle * _Nonnull foreground;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ButtonConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible text:(NSString * _Nonnull)text accessibilityDescription:(NSString * _Nonnull)accessibilityDescription background:(SBSDKUI2BackgroundStyle * _Nonnull)background foreground:(SBSDKUI2ForegroundStyle * _Nonnull)foreground OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



enum SBSDKUI2CameraModule : NSInteger;
enum SBSDKUI2OrientationLockMode : NSInteger;
enum SBSDKUI2CameraPreviewMode : NSInteger;

/// Configuration of the camera settings to be used while scanning.
SWIFT_CLASS_NAMED("SBSDKUI2CameraConfiguration")
@interface SBSDKUI2CameraConfiguration : SBSDKUI2Node
/// Which camera module to use on start-up.
/// Default is BACK
@property (nonatomic) enum SBSDKUI2CameraModule cameraModule;
/// The number of zoom steps available to the user.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull zoomSteps;
/// The default zoom factor on start-up.
/// Default is 1.0
@property (nonatomic) double defaultZoomFactor;
/// Whether the flash is enabled by default.
/// Default is false
@property (nonatomic) BOOL flashEnabled;
/// Whether to lock the focus on the minimum possible distance (device-specific).
/// Default is false
@property (nonatomic) BOOL minFocusDistanceLock;
/// Whether pinch-to-zoom is enabled.
/// Default is true
@property (nonatomic) BOOL pinchToZoomEnabled;
/// Which mode to use when orientation should be locked to landscape or portrait.
/// Default is NONE
@property (nonatomic) enum SBSDKUI2OrientationLockMode orientationLockMode;
/// Which camera preview mode to use.
/// Default is FILL_IN
@property (nonatomic) enum SBSDKUI2CameraPreviewMode cameraPreviewMode;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2CameraConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCameraModule:(enum SBSDKUI2CameraModule)cameraModule zoomSteps:(NSArray<NSNumber *> * _Nonnull)zoomSteps defaultZoomFactor:(double)defaultZoomFactor flashEnabled:(BOOL)flashEnabled minFocusDistanceLock:(BOOL)minFocusDistanceLock pinchToZoomEnabled:(BOOL)pinchToZoomEnabled orientationLockMode:(enum SBSDKUI2OrientationLockMode)orientationLockMode cameraPreviewMode:(enum SBSDKUI2CameraPreviewMode)cameraPreviewMode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Determine which camera module to use on start-up.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2CameraModule, "SBSDKUI2CameraModule", open) {
/// Use the front camera.
  SBSDKUI2CameraModuleFront = 0,
/// Use the default back camera.
  SBSDKUI2CameraModuleBack = 1,
/// Use the back camera with the widest available angle.
  SBSDKUI2CameraModuleBackWidest = 2,
};

enum SBSDKUI2StatusBarMode : NSInteger;

/// Configuration of the camera permission request view.
SWIFT_CLASS_NAMED("SBSDKUI2CameraPermissionScreen")
@interface SBSDKUI2CameraPermissionScreen : SBSDKUI2Node
/// Visual mode for displaying the contents of the status bar.
/// Default is DARK
@property (nonatomic) enum SBSDKUI2StatusBarMode statusBarMode;
/// Background color of the camera permission request.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull background;
/// Background color of the icon used in the camera permission request.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull iconBackground;
/// Configuration of the icon used in the camera permission request.
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull icon;
/// Configuration of the camera permission request’s confirmation button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull enableCameraButton;
/// Configuration of the camera permission request’s close button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull closeButton;
/// Configuration of the camera permission request’s title.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull enableCameraTitle;
/// Configuration of the camera permission request’s explanatory text.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull enableCameraExplanation;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2CameraPermissionScreen * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStatusBarMode:(enum SBSDKUI2StatusBarMode)statusBarMode background:(SBSDKUI2Color * _Nonnull)background iconBackground:(SBSDKUI2Color * _Nonnull)iconBackground icon:(SBSDKUI2IconStyle * _Nonnull)icon enableCameraButton:(SBSDKUI2ButtonConfiguration * _Nonnull)enableCameraButton closeButton:(SBSDKUI2ButtonConfiguration * _Nonnull)closeButton enableCameraTitle:(SBSDKUI2StyledText * _Nonnull)enableCameraTitle enableCameraExplanation:(SBSDKUI2StyledText * _Nonnull)enableCameraExplanation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Configuration of the camera preview mode.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2CameraPreviewMode, "SBSDKUI2CameraPreviewMode", open) {
/// In this mode, the camera preview frames will be scaled to the layout view size - the full preview frame content
/// will be visible, but unused edges might appear in the preview layout.
  SBSDKUI2CameraPreviewModeFitIn = 0,
/// In this mode, the camera preview frames fill the layout view - the preview frames may contain additional content
/// on the edges that was not visible in the preview layout.
  SBSDKUI2CameraPreviewModeFillIn = 1,
};

/// Configuration of the barcodes result sheet’s height while collapsed.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2CollapsedVisibleHeight, "SBSDKUI2CollapsedVisibleHeight", open) {
/// Result sheet is collapsed as much as possible, showing only the top part.
  SBSDKUI2CollapsedVisibleHeightSmall = 0,
/// Result sheet is not completely collapsed, revealing more information.
  SBSDKUI2CollapsedVisibleHeightLarge = 1,
};


SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK13SBSDKUI2Color")
@interface SBSDKUI2Color : SBSDKUI2Node
/// The <code>UIColor</code> for the given reference or hex string.
@property (nonatomic, readonly, strong) UIColor * _Nonnull uiColor;
/// Convenient initializer.
/// \param colorString The hex string in ARGB/RGB format.
///
- (nonnull instancetype)initWithColorString:(NSString * _Nonnull)colorString;
/// Convenient initializer.
/// \param uiColor An instance of the <code>UIColor</code>.
///
- (nonnull instancetype)initWithUiColor:(UIColor * _Nonnull)uiColor;
/// Convenient initializer.
/// \param colorString The hex string in RGBA /ARGB/RGB format.
///
/// \param isArgb If the hex string is in RGBA format.
///
- (nonnull instancetype)initWithColorString:(NSString * _Nonnull)colorString isArgb:(BOOL)isArgb;
/// Returns the HEX color format.
- (NSString * _Nonnull)toHexString SWIFT_WARN_UNUSED_RESULT;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Configuration of the barcode to find and scan.
SWIFT_CLASS_NAMED("SBSDKUI2ExpectedBarcode")
@interface SBSDKUI2ExpectedBarcode : SBSDKUI2Node
/// Value of the barcode to find. If not set, any barcode value will be accepted.
@property (nonatomic, copy) NSString * _Nonnull barcodeValue;
/// Title of the barcode to find.
@property (nonatomic, copy) NSString * _Nullable title;
/// Image of the barcode to find.
@property (nonatomic, copy) NSString * _Nullable image;
/// Number of barcodes with given symbology/value required to scan.
/// Default is 1
@property (nonatomic) NSInteger count;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ExpectedBarcode * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBarcodeValue:(NSString * _Nonnull)barcodeValue title:(NSString * _Nullable)title image:(NSString * _Nullable)image count:(NSInteger)count OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBarcodeValue:(NSString * _Nonnull)barcodeValue title:(NSString * _Nullable)title image:(NSString * _Nullable)image;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SBSDKUI2ExpectedBarcode (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// The string to be assigned to <code>SBSDKUI2ExpectedBarcode/image</code> when the image of the barcode should be used in the UI.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull barcodeImageKey;)
+ (NSString * _Nonnull)barcodeImageKey SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the overlay polygon displayed on top of a barcode in the camera preview.
SWIFT_CLASS_NAMED("SBSDKUI2FindAndPickArOverlayPolygonConfiguration")
@interface SBSDKUI2FindAndPickArOverlayPolygonConfiguration : SBSDKUI2Node
/// Control the visibility of the overlay polygon.
/// Default is true
@property (nonatomic) BOOL visible;
/// Appearance of the overlay polygon when a barcode is partially scanned.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull partiallyScanned;
/// Appearance of the overlay polygon when a barcode is rejected.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull rejected;
/// Appearance of the overlay polygon when a barcode is completed.
@property (nonatomic, strong) SBSDKUI2PolygonStyle * _Nonnull completed;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FindAndPickArOverlayPolygonConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible partiallyScanned:(SBSDKUI2PolygonStyle * _Nonnull)partiallyScanned rejected:(SBSDKUI2PolygonStyle * _Nonnull)rejected completed:(SBSDKUI2PolygonStyle * _Nonnull)completed OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the round badge on find and pick ar layer.
SWIFT_CLASS_NAMED("SBSDKUI2FindAndPickBadgeConfiguration")
@interface SBSDKUI2FindAndPickBadgeConfiguration : SBSDKUI2Node
/// Appearance of the badge when a barcode is partially scanned.
@property (nonatomic, strong) SBSDKUI2BadgeStyle * _Nonnull partiallyScanned;
/// Appearance of the badge when a barcode is rejected.
@property (nonatomic, strong) SBSDKUI2BadgeStyle * _Nonnull rejected;
/// Appearance of the badge when a barcode is completed.
@property (nonatomic, strong) SBSDKUI2BadgeStyle * _Nonnull completed;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FindAndPickBadgeConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithPartiallyScanned:(SBSDKUI2BadgeStyle * _Nonnull)partiallyScanned rejected:(SBSDKUI2BadgeStyle * _Nonnull)rejected completed:(SBSDKUI2BadgeStyle * _Nonnull)completed OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2Sheet;
@class SBSDKUI2SheetContent;
@class SBSDKUI2ManualCountEditDialog;
@class SBSDKUI2ScanbotAlertDialog;

/// Configuration of the Find and Pick barcode scanning mode.
SWIFT_CLASS_NAMED("SBSDKUI2FindAndPickScanningMode")
@interface SBSDKUI2FindAndPickScanningMode : SBSDKUI2BarcodeUseCase
/// Color of the selected barcode.
/// Default is “?sbColorPositive”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull scanningCompletedColor;
/// Color of the partially scanned barcode.
/// Default is “?sbColorWarning”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull scanningPartiallyColor;
/// Color of the not scanned barcode .
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull scanningNotScannedColor;
/// If the user is allowed to finish the scanning process without scanning all the expected barcodes.
/// Default is false
@property (nonatomic) BOOL allowPartialScan;
/// List of barcodes that the user has to find and scan.
@property (nonatomic, copy) NSArray<SBSDKUI2ExpectedBarcode *> * _Nonnull expectedBarcodes;
/// Time interval in milliseconds before a barcode is counted again. 0 = no delay. The default value is 1000.
/// Default is 1000
@property (nonatomic) NSInteger countingRepeatDelay;
/// Configuration of the preview mode for the barcodes required to be found and scanned.
@property (nonatomic, strong) SBSDKUI2Sheet * _Nonnull sheet;
/// Configuration of the list of barcodes required to be found and scanned.
@property (nonatomic, strong) SBSDKUI2SheetContent * _Nonnull sheetContent;
/// Configuration of the dialog to manually edit the barcode count.
@property (nonatomic, strong) SBSDKUI2ManualCountEditDialog * _Nonnull manualCountEditDialog;
/// Configuration of the AR overlay.
@property (nonatomic, strong) SBSDKUI2ArOverlayFindAndPickConfiguration * _Nonnull arOverlay;
/// If the partial scanned alert dialog is enabled.
/// Default is true
@property (nonatomic) BOOL partialScannedAlertDialogEnabled;
/// Configuration of the partial scanned alert dialog.
@property (nonatomic, strong) SBSDKUI2ScanbotAlertDialog * _Nonnull partialScannedAlertDialog;
/// If the confirmation alert dialog is enabled.
/// Default is false
@property (nonatomic) BOOL confirmationAlertDialogEnabled;
/// Configuration of the confirmation alert dialog.
@property (nonatomic, strong) SBSDKUI2ScanbotAlertDialog * _Nonnull confirmationAlertDialog;
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FindAndPickScanningMode * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithScanningCompletedColor:(SBSDKUI2Color * _Nonnull)scanningCompletedColor scanningPartiallyColor:(SBSDKUI2Color * _Nonnull)scanningPartiallyColor scanningNotScannedColor:(SBSDKUI2Color * _Nonnull)scanningNotScannedColor allowPartialScan:(BOOL)allowPartialScan expectedBarcodes:(NSArray<SBSDKUI2ExpectedBarcode *> * _Nonnull)expectedBarcodes countingRepeatDelay:(NSInteger)countingRepeatDelay sheet:(SBSDKUI2Sheet * _Nonnull)sheet sheetContent:(SBSDKUI2SheetContent * _Nonnull)sheetContent manualCountEditDialog:(SBSDKUI2ManualCountEditDialog * _Nonnull)manualCountEditDialog arOverlay:(SBSDKUI2ArOverlayFindAndPickConfiguration * _Nonnull)arOverlay partialScannedAlertDialogEnabled:(BOOL)partialScannedAlertDialogEnabled partialScannedAlertDialog:(SBSDKUI2ScanbotAlertDialog * _Nonnull)partialScannedAlertDialog confirmationAlertDialogEnabled:(BOOL)confirmationAlertDialogEnabled confirmationAlertDialog:(SBSDKUI2ScanbotAlertDialog * _Nonnull)confirmationAlertDialog OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2FinderCorneredStyle;
@class SBSDKUI2FinderStrokedStyle;

/// Visual appearance of the viewfinder.
SWIFT_CLASS_NAMED("SBSDKUI2FinderStyle")
@interface SBSDKUI2FinderStyle : SBSDKUI2Node
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FinderStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
+ (SBSDKUI2FinderCorneredStyle * _Nonnull)finderCorneredStyle SWIFT_WARN_UNUSED_RESULT;
+ (SBSDKUI2FinderStrokedStyle * _Nonnull)finderStrokedStyle SWIFT_WARN_UNUSED_RESULT;
@end


/// Variant of the viewfinder displaying only the four corners of the scanning area as user guidance.
SWIFT_CLASS_NAMED("SBSDKUI2FinderCorneredStyle")
@interface SBSDKUI2FinderCorneredStyle : SBSDKUI2FinderStyle
/// Color of the viewfinder corner’s outlines.
/// Default is “#FFFFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull strokeColor;
/// Width of the viewfinder corner’s outlines.
/// Default is 3.0
@property (nonatomic) double strokeWidth;
/// Radius of the viewfinder’s corners.
/// Default is 10.0
@property (nonatomic) double cornerRadius;
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FinderCorneredStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStrokeColor:(SBSDKUI2Color * _Nonnull)strokeColor strokeWidth:(double)strokeWidth cornerRadius:(double)cornerRadius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Variant of the viewfinder displaying a full outline of the scanning area as user guidance.
SWIFT_CLASS_NAMED("SBSDKUI2FinderStrokedStyle")
@interface SBSDKUI2FinderStrokedStyle : SBSDKUI2FinderStyle
/// Color of the viewfinder’s outline.
/// Default is “#FFFFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull strokeColor;
/// Width of the viewfinder’s outline.
/// Default is 3.0
@property (nonatomic) double strokeWidth;
/// The viewfinder’s corner radius.
/// Default is 10.0
@property (nonatomic) double cornerRadius;
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2FinderStrokedStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStrokeColor:(SBSDKUI2Color * _Nonnull)strokeColor strokeWidth:(double)strokeWidth cornerRadius:(double)cornerRadius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end





/// Configuration of the appearance of foreground elements (e.g. text and/or icons on buttons, etc).
SWIFT_CLASS_NAMED("SBSDKUI2ForegroundStyle")
@interface SBSDKUI2ForegroundStyle : SBSDKUI2Node
/// Whether the icon is visible.
/// Default is true
@property (nonatomic) BOOL iconVisible;
/// Color used for foreground elements.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull color;
/// Whether to use drop shadows for foreground elements.
/// Default is false
@property (nonatomic) BOOL useShadow;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ForegroundStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithIconVisible:(BOOL)iconVisible color:(SBSDKUI2Color * _Nonnull)color useShadow:(BOOL)useShadow OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// GS1_COMPOSITE barcode type handling
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2Gs1Handling, "SBSDKUI2Gs1Handling", open) {
/// The (FNC1) character is simply stripped from the result in barcodes that implement this mode. Do not use. Will
/// be removed in a future release.
  SBSDKUI2Gs1HandlingNone = 0,
/// GS1 messages are converted to the machine-readable format per the GS1 spec (the special FNC1 character is
/// converted to ASCII \x1D). The implied 01 AI key is prepended to DataBar results. No validation is performed.
  SBSDKUI2Gs1HandlingParse = 1,
/// Same as PARSE. Additionally, messages containing unknown AI keys, or containing values of incorrect format for
/// known keys, are not returned.
  SBSDKUI2Gs1HandlingValidateStructure = 2,
/// Same as VALIDATE_STRUCTURE, except that GS1 strings are converted to the human-readable format, instead (with
/// parentheses used to wrap AI keys, e.g. (01)123456789). The \x1D character is never used in this representation.
  SBSDKUI2Gs1HandlingDecodeStructure = 3,
/// Full validation including linting and checksums. This is the most strict mode.
  SBSDKUI2Gs1HandlingValidateFull = 4,
/// Same as DECODE_STRUCTURE, but with full validation.
  SBSDKUI2Gs1HandlingDecodeFull = 5,
};


/// Configuration of the icon appearance.
SWIFT_CLASS_NAMED("SBSDKUI2IconButton")
@interface SBSDKUI2IconButton : SBSDKUI2Node
/// Whether the icon is visible on the button.
/// Default is true
@property (nonatomic) BOOL visible;
/// Icon color.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull color;
/// The text to be read when button is selected through accessibility mode.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull accessibilityDescription;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2IconButton * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible color:(SBSDKUI2Color * _Nonnull)color accessibilityDescription:(NSString * _Nonnull)accessibilityDescription OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Configuration of the icon appearance.
SWIFT_CLASS_NAMED("SBSDKUI2IconStyle")
@interface SBSDKUI2IconStyle : SBSDKUI2Node
/// Whether the icon is visible on the button.
/// Default is true
@property (nonatomic) BOOL visible;
/// Icon color.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull color;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2IconStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible color:(SBSDKUI2Color * _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the hint guiding users through the scanning process.
SWIFT_CLASS_NAMED("SBSDKUI2IconUserGuidanceConfiguration")
@interface SBSDKUI2IconUserGuidanceConfiguration : SBSDKUI2Node
/// Whether the user guidance is visible.
/// Default is true
@property (nonatomic) BOOL visible;
/// Icon of the user guidance.
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull icon;
/// Title of the user guidance.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Background style used for the user guidance.
@property (nonatomic, strong) SBSDKUI2BackgroundStyle * _Nonnull background;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2IconUserGuidanceConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible icon:(SBSDKUI2IconStyle * _Nonnull)icon title:(SBSDKUI2StyledText * _Nonnull)title background:(SBSDKUI2BackgroundStyle * _Nonnull)background OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Type of MSI plessey checksum algorithm used.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2MSIPlesseyChecksumAlgorithm, "SBSDKUI2MSIPlesseyChecksumAlgorithm", open) {
/// No checksum algorithm used.
  SBSDKUI2MSIPlesseyChecksumAlgorithmNone = 0,
/// Mod10 checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod10 = 1,
/// Mod11IBM checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod11Ibm = 2,
/// Mod11NCR checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod11Ncr = 3,
/// Mod1010 checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod1010 = 4,
/// Mod1110IBM checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod1110Ibm = 5,
/// Mod1110NCR checksum algorithm
  SBSDKUI2MSIPlesseyChecksumAlgorithmMod1110Ncr = 6,
};


/// Configuration of the dialog to manually edit the barcode count.
SWIFT_CLASS_NAMED("SBSDKUI2ManualCountEditDialog")
@interface SBSDKUI2ManualCountEditDialog : SBSDKUI2Node
/// Color of the edit dialog’s background.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sheetColor;
/// Color of the divider and separator lines in the edit dialog.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull dividerColor;
/// Background color of the overlay surrounding the edit dialog.
/// Default is “?sbColorModalOverlay”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull modalOverlayColor;
/// Configuration of the edit dialog’s title.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Configuration of the edit dialog’s info text.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull info;
/// Configuration of the edit dialog’s confirm button. Hiding both the update and cancel buttons simultaneously is
/// an undefined behavior.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull updateButton;
/// Configuration of the edit dialog’s cancel button. Hiding both the update and cancel buttons simultaneously is an
/// undefined behavior.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull cancelButton;
/// Configuration of the edit dialog’s button to clear the entered count number.
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull clearTextButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ManualCountEditDialog * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSheetColor:(SBSDKUI2Color * _Nonnull)sheetColor dividerColor:(SBSDKUI2Color * _Nonnull)dividerColor modalOverlayColor:(SBSDKUI2Color * _Nonnull)modalOverlayColor title:(SBSDKUI2StyledText * _Nonnull)title info:(SBSDKUI2StyledText * _Nonnull)info updateButton:(SBSDKUI2ButtonConfiguration * _Nonnull)updateButton cancelButton:(SBSDKUI2ButtonConfiguration * _Nonnull)cancelButton clearTextButton:(SBSDKUI2IconStyle * _Nonnull)clearTextButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Configuration of the mode used for scanning multiple barcodes.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2MultipleBarcodesScanningMode, "SBSDKUI2MultipleBarcodesScanningMode", open) {
/// Scan barcodes even if they have the same value and count the number of repeated barcodes.
  SBSDKUI2MultipleBarcodesScanningModeCounting = 0,
/// Only scan barcodes with unique values. Subsequent barcodes with the same values will be ignored.
  SBSDKUI2MultipleBarcodesScanningModeUnique = 1,
};


/// Configuration of the mode for scanning multiple barcodes.
SWIFT_CLASS_NAMED("SBSDKUI2MultipleScanningMode")
@interface SBSDKUI2MultipleScanningMode : SBSDKUI2BarcodeUseCase
/// Time interval in milliseconds before a barcode is counted again. 0 = no delay. The default value is 1000.
/// Default is 1000
@property (nonatomic) NSInteger countingRepeatDelay;
/// Mode used for scanning multiple barcodes.
/// Default is COUNTING
@property (nonatomic) enum SBSDKUI2MultipleBarcodesScanningMode mode;
/// Configuration of the preview mode for scanning multiple barcodes.
@property (nonatomic, strong) SBSDKUI2Sheet * _Nonnull sheet;
/// Configuration of the list containing the barcodes that have already been scanned.
@property (nonatomic, strong) SBSDKUI2SheetContent * _Nonnull sheetContent;
/// Configuration of the dialog to manually edit the barcode count.
@property (nonatomic, strong) SBSDKUI2ManualCountEditDialog * _Nonnull manualCountEditDialog;
/// Appearance of the barcode info mapping.
@property (nonatomic, strong) SBSDKUI2BarcodeInfoMapping * _Nonnull barcodeInfoMapping;
/// Configuration of the AR overlay.
@property (nonatomic, strong) SBSDKUI2ArOverlayGeneralConfiguration * _Nonnull arOverlay;
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2MultipleScanningMode * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCountingRepeatDelay:(NSInteger)countingRepeatDelay mode:(enum SBSDKUI2MultipleBarcodesScanningMode)mode sheet:(SBSDKUI2Sheet * _Nonnull)sheet sheetContent:(SBSDKUI2SheetContent * _Nonnull)sheetContent manualCountEditDialog:(SBSDKUI2ManualCountEditDialog * _Nonnull)manualCountEditDialog barcodeInfoMapping:(SBSDKUI2BarcodeInfoMapping * _Nonnull)barcodeInfoMapping arOverlay:(SBSDKUI2ArOverlayGeneralConfiguration * _Nonnull)arOverlay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configure the orientation of the interface.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2OrientationLockMode, "SBSDKUI2OrientationLockMode", open) {
/// Do not restrict the interface’s orientation.
  SBSDKUI2OrientationLockModeNone = 0,
/// Lock the orientation to portrait.
  SBSDKUI2OrientationLockModePortrait = 1,
/// Lock the orientation to landscape.
  SBSDKUI2OrientationLockModeLandscape = 2,
};


/// Value palette describing the colors of the scanner screens.
SWIFT_CLASS_NAMED("SBSDKUI2Palette")
@interface SBSDKUI2Palette : SBSDKUI2Node
/// Primary color used for enabled elements.
/// Default is “#C8193C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorPrimary;
/// Primary color used for disabled elements.
/// Default is “#F5F5F5”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorPrimaryDisabled;
/// Color used to convey a negative meaning.
/// Default is “#FF3737”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorNegative;
/// Color used to convey a positive meaning.
/// Default is “#4EFFB4”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorPositive;
/// Color used to convey warnings.
/// Default is “#FFCE5C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorWarning;
/// Secondary color used for enabled elements.
/// Default is “#FFEDEE”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorSecondary;
/// Secondary color used for disabled elements.
/// Default is “#F5F5F5”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorSecondaryDisabled;
/// Color used for displaying elements on top of the primary color.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorOnPrimary;
/// Color used for displaying elements on top of the secondary color.
/// Default is “#C8193C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorOnSecondary;
/// Color used for surfaces.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorSurface;
/// Color used for outlines.
/// Default is “#EFEFEF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorOutline;
/// Alternative color used on top of surfaces.
/// Default is “#707070”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorOnSurfaceVariant;
/// Color used on top of surfaces.
/// Default is “#000000”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorOnSurface;
/// Transparent color with a low alpha value used for certain surfaces.
/// Default is “#00000026”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorSurfaceLow;
/// Transparent color with a high alpha value used for certain surfaces.
/// Default is “#0000007A”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorSurfaceHigh;
/// Transparent color with a very high alpha value used to fill certain overlays.
/// Default is “#000000A3”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sbColorModalOverlay;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2Palette * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSbColorPrimary:(SBSDKUI2Color * _Nonnull)sbColorPrimary sbColorPrimaryDisabled:(SBSDKUI2Color * _Nonnull)sbColorPrimaryDisabled sbColorNegative:(SBSDKUI2Color * _Nonnull)sbColorNegative sbColorPositive:(SBSDKUI2Color * _Nonnull)sbColorPositive sbColorWarning:(SBSDKUI2Color * _Nonnull)sbColorWarning sbColorSecondary:(SBSDKUI2Color * _Nonnull)sbColorSecondary sbColorSecondaryDisabled:(SBSDKUI2Color * _Nonnull)sbColorSecondaryDisabled sbColorOnPrimary:(SBSDKUI2Color * _Nonnull)sbColorOnPrimary sbColorOnSecondary:(SBSDKUI2Color * _Nonnull)sbColorOnSecondary sbColorSurface:(SBSDKUI2Color * _Nonnull)sbColorSurface sbColorOutline:(SBSDKUI2Color * _Nonnull)sbColorOutline sbColorOnSurfaceVariant:(SBSDKUI2Color * _Nonnull)sbColorOnSurfaceVariant sbColorOnSurface:(SBSDKUI2Color * _Nonnull)sbColorOnSurface sbColorSurfaceLow:(SBSDKUI2Color * _Nonnull)sbColorSurfaceLow sbColorSurfaceHigh:(SBSDKUI2Color * _Nonnull)sbColorSurfaceHigh sbColorModalOverlay:(SBSDKUI2Color * _Nonnull)sbColorModalOverlay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the polygon appearance.
SWIFT_CLASS_NAMED("SBSDKUI2PolygonStyle")
@interface SBSDKUI2PolygonStyle : SBSDKUI2Node
/// Color of the polygon outline.
/// Default is “#FFFFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull strokeColor;
/// Polygon color.
/// Default is “#FFFFFF30”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull fillColor;
/// Width of the polygon outline in dp.
/// Default is 2.0
@property (nonatomic) double strokeWidth;
/// Polygon corner radius in dp.
/// Default is 0.0
@property (nonatomic) double cornerRadius;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2PolygonStyle * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStrokeColor:(SBSDKUI2Color * _Nonnull)strokeColor fillColor:(SBSDKUI2Color * _Nonnull)fillColor strokeWidth:(double)strokeWidth cornerRadius:(double)cornerRadius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end




/// Button configuration.
SWIFT_CLASS_NAMED("SBSDKUI2PopupMenuItem")
@interface SBSDKUI2PopupMenuItem : SBSDKUI2Node
/// The text to be displayed on the button.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// The text to be read when button is selected through accessibility mode.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull accessibilityDescription;
/// The style of the button’s icon (icon, text).
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull icon;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2PopupMenuItem * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitle:(SBSDKUI2StyledText * _Nonnull)title accessibilityDescription:(NSString * _Nonnull)accessibilityDescription icon:(SBSDKUI2IconStyle * _Nonnull)icon OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Configuration of the round button.
SWIFT_CLASS_NAMED("SBSDKUI2RoundButton")
@interface SBSDKUI2RoundButton : SBSDKUI2Node
/// Whether to display the button.
/// Default is true
@property (nonatomic) BOOL visible;
/// The text to be read when button is selected through accessibility mode.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull accessibilityDescription;
/// Color of the button background shape.
/// Default is “#0000007A”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull backgroundColor;
/// Color of the button foreground (icon, text).
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull foregroundColor;
/// Color of the button background shape when the button is active (selected, toggled).
/// Default is “#FFCE5C”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull activeBackgroundColor;
/// Color of the button foreground (icon, text) when the button is active (selected, toggled).
/// Default is “#1C1B1F”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull activeForegroundColor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2RoundButton * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible accessibilityDescription:(NSString * _Nonnull)accessibilityDescription backgroundColor:(SBSDKUI2Color * _Nonnull)backgroundColor foregroundColor:(SBSDKUI2Color * _Nonnull)foregroundColor activeBackgroundColor:(SBSDKUI2Color * _Nonnull)activeBackgroundColor activeForegroundColor:(SBSDKUI2Color * _Nonnull)activeForegroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// Configuration of the the standard alert dialog.
SWIFT_CLASS_NAMED("SBSDKUI2ScanbotAlertDialog")
@interface SBSDKUI2ScanbotAlertDialog : SBSDKUI2Node
/// Title displayed above the message.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Explanation message message.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull subtitle;
/// Background color of the alert dialog.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sheetColor;
/// Dialog overlay color.
/// Default is “?sbColorModalOverlay”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull modalOverlayColor;
/// Color of the divider line.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull dividerColor;
/// Configuration of the retry button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull okButton;
/// Configuration of the middle button for dialogs with tree buttons.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull actionButton;
/// Configuration of the cancel button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull cancelButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ScanbotAlertDialog * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitle:(SBSDKUI2StyledText * _Nonnull)title subtitle:(SBSDKUI2StyledText * _Nonnull)subtitle sheetColor:(SBSDKUI2Color * _Nonnull)sheetColor modalOverlayColor:(SBSDKUI2Color * _Nonnull)modalOverlayColor dividerColor:(SBSDKUI2Color * _Nonnull)dividerColor okButton:(SBSDKUI2ButtonConfiguration * _Nonnull)okButton actionButton:(SBSDKUI2ButtonConfiguration * _Nonnull)actionButton cancelButton:(SBSDKUI2ButtonConfiguration * _Nonnull)cancelButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

enum SBSDKUI2SheetMode : NSInteger;

/// Configuration of the preview mode for scanning multiple barcodes.
SWIFT_CLASS_NAMED("SBSDKUI2Sheet")
@interface SBSDKUI2Sheet : SBSDKUI2Node
/// Mode used for the preview for scanning multiple barcodes.
/// Default is COLLAPSED_SHEET
@property (nonatomic) enum SBSDKUI2SheetMode mode;
/// Height of the collapsed result sheet.
/// Default is SMALL
@property (nonatomic) enum SBSDKUI2CollapsedVisibleHeight collapsedVisibleHeight;
/// Configuration of the list button.
@property (nonatomic, strong) SBSDKUI2BadgedButton * _Nonnull listButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2Sheet * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithMode:(enum SBSDKUI2SheetMode)mode collapsedVisibleHeight:(enum SBSDKUI2CollapsedVisibleHeight)collapsedVisibleHeight listButton:(SBSDKUI2BadgedButton * _Nonnull)listButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

@class SBSDKUI2SwipeToDelete;

/// Configuration of the list containing the barcodes that have already been scanned.
SWIFT_CLASS_NAMED("SBSDKUI2SheetContent")
@interface SBSDKUI2SheetContent : SBSDKUI2Node
/// Color of the list’s background.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sheetColor;
/// The color of the dividers in the list sheet.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull dividerColor;
/// Enables the user to change the number of scanned items by pressing +,-, or changing the number using a keyboard.
/// Default is true
@property (nonatomic) BOOL manualCountChangeEnabled;
/// The color of the outline of the manual counting buttons in the list sheet.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull manualCountOutlineColor;
/// Color of the buttons for manually changing the barcode count.
/// Default is “?sbColorPrimary”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull manualCountChangeColor;
/// Configuration of the barcode list’s title. By default displays the total number of scanned barcodes.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Configuration of the button for clearing the barcode list.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull clearAllButton;
/// Configuration of the title of a barcode list entry (displaying the barcode’s value).
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull barcodeItemTitle;
/// Configuration of the subtitle of a barcode list entry (displaying the barcode’s symbology).
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull barcodeItemSubtitle;
/// Visibility of the barcode image in a barcode list entry.
/// Default is true
@property (nonatomic) BOOL barcodeItemImageVisible;
/// Configuration of the barcode list’s submit button.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull submitButton;
/// Configuration of the button to start scanning displayed in an empty barcode list.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull startScanningButton;
/// Configuration of the title displayed in an empty barcode list.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull placeholderTitle;
/// Configuration of the subtitle displayed in an empty barcode list.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull placeholderSubtitle;
/// Background color of the icon displayed in an empty barcode list.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull placeholderIconBackground;
/// Configuration of the icon displayed in an empty barcode list.
@property (nonatomic, strong) SBSDKUI2IconStyle * _Nonnull placeholderIcon;
/// The style of the swipe-to-delete button.
@property (nonatomic, strong) SBSDKUI2SwipeToDelete * _Nonnull swipeToDelete;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2SheetContent * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSheetColor:(SBSDKUI2Color * _Nonnull)sheetColor dividerColor:(SBSDKUI2Color * _Nonnull)dividerColor manualCountChangeEnabled:(BOOL)manualCountChangeEnabled manualCountOutlineColor:(SBSDKUI2Color * _Nonnull)manualCountOutlineColor manualCountChangeColor:(SBSDKUI2Color * _Nonnull)manualCountChangeColor title:(SBSDKUI2StyledText * _Nonnull)title clearAllButton:(SBSDKUI2ButtonConfiguration * _Nonnull)clearAllButton barcodeItemTitle:(SBSDKUI2StyledText * _Nonnull)barcodeItemTitle barcodeItemSubtitle:(SBSDKUI2StyledText * _Nonnull)barcodeItemSubtitle barcodeItemImageVisible:(BOOL)barcodeItemImageVisible submitButton:(SBSDKUI2ButtonConfiguration * _Nonnull)submitButton startScanningButton:(SBSDKUI2ButtonConfiguration * _Nonnull)startScanningButton placeholderTitle:(SBSDKUI2StyledText * _Nonnull)placeholderTitle placeholderSubtitle:(SBSDKUI2StyledText * _Nonnull)placeholderSubtitle placeholderIconBackground:(SBSDKUI2Color * _Nonnull)placeholderIconBackground placeholderIcon:(SBSDKUI2IconStyle * _Nonnull)placeholderIcon swipeToDelete:(SBSDKUI2SwipeToDelete * _Nonnull)swipeToDelete OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Configuration of the barcode result sheet’s default visibility state.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2SheetMode, "SBSDKUI2SheetMode", open) {
/// Result sheet is hidden and can be opened by pressing the button. The button can show the total barcode count.
  SBSDKUI2SheetModeButton = 0,
/// Result sheet is visible and collapsed and can be expanded by dragging it up.
  SBSDKUI2SheetModeCollapsedSheet = 1,
};


/// Configuration of the single barcode scanning mode.
SWIFT_CLASS_NAMED("SBSDKUI2SingleScanningMode")
@interface SBSDKUI2SingleScanningMode : SBSDKUI2BarcodeUseCase
/// If enabled, the confirmation sheet will be shown after the barcode has been scanned.
/// Default is false
@property (nonatomic) BOOL confirmationSheetEnabled;
/// If enabled, the barcode image will be shown on the confirmation sheet.
/// Default is true
@property (nonatomic) BOOL barcodeImageVisible;
/// Color of the confirmation sheet’s background.
/// Default is “?sbColorSurface”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull sheetColor;
/// Color of the divider and separator lines in the confirmation sheet.
/// Default is “?sbColorOutline”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull dividerColor;
/// Background color of the overlay surrounding the confirmation sheet.
/// Default is “?sbColorModalOverlay”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull modalOverlayColor;
/// Appearance of the barcode title (the barcode’s value) on the confirmation sheet.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull barcodeTitle;
/// Appearance of the barcode subtitle (the barcode’s symbology) on the confirmation sheet.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull barcodeSubtitle;
/// Appearance of the confirm button on the confirmation sheet.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull submitButton;
/// Appearance of the cancel button on the confirmation sheet.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull cancelButton;
/// Appearance of the barcode info mapping.
@property (nonatomic, strong) SBSDKUI2BarcodeInfoMapping * _Nonnull barcodeInfoMapping;
/// Configuration of the AR overlay.
@property (nonatomic, strong) SBSDKUI2ArOverlayGeneralConfiguration * _Nonnull arOverlay;
@property (nonatomic, readonly, copy) NSString * _Nonnull _type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2SingleScanningMode * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithConfirmationSheetEnabled:(BOOL)confirmationSheetEnabled barcodeImageVisible:(BOOL)barcodeImageVisible sheetColor:(SBSDKUI2Color * _Nonnull)sheetColor dividerColor:(SBSDKUI2Color * _Nonnull)dividerColor modalOverlayColor:(SBSDKUI2Color * _Nonnull)modalOverlayColor barcodeTitle:(SBSDKUI2StyledText * _Nonnull)barcodeTitle barcodeSubtitle:(SBSDKUI2StyledText * _Nonnull)barcodeSubtitle submitButton:(SBSDKUI2ButtonConfiguration * _Nonnull)submitButton cancelButton:(SBSDKUI2ButtonConfiguration * _Nonnull)cancelButton barcodeInfoMapping:(SBSDKUI2BarcodeInfoMapping * _Nonnull)barcodeInfoMapping arOverlay:(SBSDKUI2ArOverlayGeneralConfiguration * _Nonnull)arOverlay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

enum SBSDKUI2SoundType : NSInteger;

/// Sound configuration.
SWIFT_CLASS_NAMED("SBSDKUI2Sound")
@interface SBSDKUI2Sound : SBSDKUI2Node
/// Enable or disable the beep sound when a barcode is detected.
/// Default is true
@property (nonatomic) BOOL successBeepEnabled;
/// The beep type.
/// Default is MODERN_BEEP
@property (nonatomic) enum SBSDKUI2SoundType soundType;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2Sound * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSuccessBeepEnabled:(BOOL)successBeepEnabled soundType:(enum SBSDKUI2SoundType)soundType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// The sound selection type.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2SoundType, "SBSDKUI2SoundType", open) {
/// To choose a modern beep sound.
  SBSDKUI2SoundTypeModernBeep = 0,
/// To choose the old classic beep sound.
  SBSDKUI2SoundTypeClassicBeep = 1,
};

/// Visual mode used for the status bar icons.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2StatusBarMode, "SBSDKUI2StatusBarMode", open) {
/// Display all icons in the status bar in black.
  SBSDKUI2StatusBarModeDark = 0,
/// Display all icons in the status bar in white.
  SBSDKUI2StatusBarModeLight = 1,
/// Hide the status bar icons.
  SBSDKUI2StatusBarModeHidden = 2,
};


/// Configuration of the text field appearance.
SWIFT_CLASS_NAMED("SBSDKUI2StyledText")
@interface SBSDKUI2StyledText : SBSDKUI2Node
/// Whether the text field is visible.
/// Default is true
@property (nonatomic) BOOL visible;
/// Value of the text field.
/// Default is “”
@property (nonatomic, copy) NSString * _Nonnull text;
/// Text color.
/// Default is “#FFFFFF”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull color;
/// Whether to enable drop shadows for the text.
/// Default is false
@property (nonatomic) BOOL useShadow;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2StyledText * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible text:(NSString * _Nonnull)text color:(SBSDKUI2Color * _Nonnull)color useShadow:(BOOL)useShadow OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end




/// Configuration of the swipe-to-delete button.
SWIFT_CLASS_NAMED("SBSDKUI2SwipeToDelete")
@interface SBSDKUI2SwipeToDelete : SBSDKUI2Node
/// Whether swipe to delete is enabled or not.
/// Default is true
@property (nonatomic) BOOL enabled;
/// Color of the swipe-to-delete button.
/// Default is “?sbColorNegative”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull backgroundColor;
/// Color of the icon on the swipe-to-delete button.
/// Default is “?sbColorOnPrimary”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull iconColor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2SwipeToDelete * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithEnabled:(BOOL)enabled backgroundColor:(SBSDKUI2Color * _Nonnull)backgroundColor iconColor:(SBSDKUI2Color * _Nonnull)iconColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of timeouts.
SWIFT_CLASS_NAMED("SBSDKUI2Timeouts")
@interface SBSDKUI2Timeouts : SBSDKUI2Node
/// Sets the auto close timer in ms. Default is 0 (disabled).
/// Default is 0
@property (nonatomic) NSInteger autoCancelTimeout;
/// Sets the time in ms the first scan is delayed by. Default is 0 (disabled).
/// Default is 0
@property (nonatomic) NSInteger initialScanDelay;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2Timeouts * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAutoCancelTimeout:(NSInteger)autoCancelTimeout initialScanDelay:(NSInteger)initialScanDelay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

enum SBSDKUI2TopBarMode : NSInteger;

/// Configuration of the top screen bar’s appearance.
SWIFT_CLASS_NAMED("SBSDKUI2TopBarConfiguration")
@interface SBSDKUI2TopBarConfiguration : SBSDKUI2Node
/// Appearance of the top bar’s title.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Visual mode used for the top bar.
/// Default is SOLID
@property (nonatomic) enum SBSDKUI2TopBarMode mode;
/// Visual mode used for the status bar icons.
/// Default is LIGHT
@property (nonatomic) enum SBSDKUI2StatusBarMode statusBarMode;
/// Background color of the top bar to be used when the visual mode is specified as SOLID. Otherwise ignored.
/// Default is “?sbColorPrimary”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull backgroundColor;
/// Configuration of the cancel button’s appearance.
@property (nonatomic, strong) SBSDKUI2ButtonConfiguration * _Nonnull cancelButton;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2TopBarConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTitle:(SBSDKUI2StyledText * _Nonnull)title mode:(enum SBSDKUI2TopBarMode)mode statusBarMode:(enum SBSDKUI2StatusBarMode)statusBarMode backgroundColor:(SBSDKUI2Color * _Nonnull)backgroundColor cancelButton:(SBSDKUI2ButtonConfiguration * _Nonnull)cancelButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end

/// Visual mode used for the top bar.
typedef SWIFT_ENUM_NAMED(NSInteger, SBSDKUI2TopBarMode, "SBSDKUI2TopBarMode", open) {
/// Display the top bar with a background color or with transparency.
  SBSDKUI2TopBarModeSolid = 0,
/// Display the top bar with a gradient background color or a transparent gradient. The buttons will still be
/// visible.
  SBSDKUI2TopBarModeGradient = 1,
/// Hide the top bar completely.
  SBSDKUI2TopBarModeHidden = 2,
};


/// Configuration of the hint guiding users through the scanning process.
SWIFT_CLASS_NAMED("SBSDKUI2UserGuidanceConfiguration")
@interface SBSDKUI2UserGuidanceConfiguration : SBSDKUI2Node
/// Whether the user guidance is visible.
/// Default is true
@property (nonatomic) BOOL visible;
/// Title of the user guidance.
@property (nonatomic, strong) SBSDKUI2StyledText * _Nonnull title;
/// Background style used for the user guidance.
@property (nonatomic, strong) SBSDKUI2BackgroundStyle * _Nonnull background;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2UserGuidanceConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible title:(SBSDKUI2StyledText * _Nonnull)title background:(SBSDKUI2BackgroundStyle * _Nonnull)background OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Vibration configuration.
SWIFT_CLASS_NAMED("SBSDKUI2Vibration")
@interface SBSDKUI2Vibration : SBSDKUI2Node
/// Enable or disable vibration when a barcode is detected.
/// Default is false
@property (nonatomic) BOOL enabled;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2Vibration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithEnabled:(BOOL)enabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration of the scanning interface’s viewfinder, serving as guidance to the user.
SWIFT_CLASS_NAMED("SBSDKUI2ViewFinderConfiguration")
@interface SBSDKUI2ViewFinderConfiguration : SBSDKUI2Node
/// Whether the viewfinder is visible.
/// Default is true
@property (nonatomic) BOOL visible;
/// Visual appearance of the viewfinder.
@property (nonatomic, strong) SBSDKUI2FinderStyle * _Nonnull style;
/// Color of the viewfinder overlay.
/// Default is “?sbColorSurfaceLow”
@property (nonatomic, strong) SBSDKUI2Color * _Nonnull overlayColor;
/// The viewfinder’s aspect ratio.
@property (nonatomic, strong) SBSDKUI2AspectRatio * _Nonnull aspectRatio;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (SBSDKUI2ViewFinderConfiguration * _Nullable)fromJsonWithJson:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVisible:(BOOL)visible style:(SBSDKUI2FinderStyle * _Nonnull)style overlayColor:(SBSDKUI2Color * _Nonnull)overlayColor aspectRatio:(SBSDKUI2AspectRatio * _Nonnull)aspectRatio OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
/// Returns a JSON string representation format.
- (NSString * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
@end



/// A class for a barcode filtering that can be used in barcode scanning RTU-UI components.
/// You can customize the filtering of barcode results coming from RTU-UI barcode scanners by implementing a
/// subclass of this class and pass the instance of your filtering class to the barcode scanning RTU-UI component.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK20SBSDKUIBarcodeFilter") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeFilter : NSObject
/// Accepts or rejects a scanned barcode.
/// \param barcode The barcode to be accepted or rejected by the filter.
///
///
/// returns:
/// <code>True</code> if the given barcode should be accepted, <code>False</code> otherwise.
- (BOOL)acceptsBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
/// Accepts or rejects a scanned barcode in the context of already accepted barcodes.
/// Accepts a barcodes, if it is not yet contained in the given array of accepted barcodes. Prevents duplicate barcodes.
/// \param barcode The barcode to be accepted or rejected by the filter.
///
/// \param codes List of current already accepted barcodes.
///
///
/// returns:
/// <code>True</code> if the given barcode should be added, <code>False</code> otherwise.
- (BOOL)shouldAdd:(SBSDKBarcodeScannerResult * _Nonnull)barcode toBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Subclass of <code>SBSDKUIBarcodeFilter</code> that only accepts barcodes with extensions.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK30SBSDKUIBarcodeExtensionsFilter") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeExtensionsFilter : SBSDKUIBarcodeFilter
- (BOOL)acceptsBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A class to store and remove barcode images from <code>SBSDKUIBarcodeScannerViewController</code>.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK26SBSDKUIBarcodeImageStorage")
@interface SBSDKUIBarcodeImageStorage : NSObject
/// The default instance of this class.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIBarcodeImageStorage * _Nonnull defaultStorage;)
+ (SBSDKUIBarcodeImageStorage * _Nonnull)defaultStorage SWIFT_WARN_UNUSED_RESULT;
/// Set default storage. If not used, default storage will be created with default parameters.
+ (void)setDefaultStorage:(SBSDKUIBarcodeImageStorage * _Nonnull)storage;
/// If file format is set to <code>SBSDKImageFileFormat/JPEG</code>, this property holds the compression quality of the stored images. Read-only.
/// Defaults to 80.
/// Values must be between 0 (high compression, small file size, bad quality) and 100 (no compression, huge file size, good image quality).
@property (nonatomic, readonly) NSInteger writingJpegImageCompressionQuality;
/// File format of the stored images.
/// Defaults to <code>SBSDKImageFileFormat/JPEG</code>.
@property (nonatomic, readonly) enum SBSDKImageFileFormat writingImageFileFormat;
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull allImageURLs;
/// Not available. Use <code>default</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("use default");
/// Initializes storage with given image file format and default JPEG compression quality using the default storage location.
/// \param format The image file format.
///
- (nonnull instancetype)initWithImageFileFormat:(enum SBSDKImageFileFormat)format;
/// Initializes storage with JPEG image file format and given JPEG compression quality using the default storage location.
/// \param jpegImageCompressionQuality The JPEG compression quality.
///
- (nonnull instancetype)initWithJpegFileFormatAndCompressionQuality:(NSInteger)jpegImageCompressionQuality;
/// Initializes storage with given image file format and default JPEG compression quality.
/// \param format The image file format.
///
/// \param location The storage location where image files are saved to. If <code>nil</code>, the default location is chosen.
///
- (nonnull instancetype)initWithImageFileFormat:(enum SBSDKImageFileFormat)format location:(SBSDKStorageLocation * _Nullable)location OBJC_DESIGNATED_INITIALIZER;
/// Initializes storage with JPEG image file format and given JPEG compression quality.
/// \param jpegImageCompressionQuality The JPEG compression quality.
///
/// \param location The storage location where image files are saved to. If <code>nil</code>, the default location is chosen.
///
- (nonnull instancetype)initWithJpegFileFormatAndCompressionQuality:(NSInteger)jpegImageCompressionQuality location:(SBSDKStorageLocation * _Nullable)location OBJC_DESIGNATED_INITIALIZER;
/// It clears the receiver. Removes all stored images files from disk.
- (void)removeAll;
@end


/// Class that contains barcode name and description.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK24SBSDKUIBarcodeMappedData") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeMappedData : NSObject
/// Name of the barcode.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Description of the barcode.
@property (nonatomic, readonly, copy) NSString * _Nonnull codeDescription;
/// The initializer.
/// \param name Name of the barcode.
///
/// \param codeDescription Description of the  barcode.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name description:(NSString * _Nonnull)codeDescription OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class that contains barcode result and mapped data.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK26SBSDKUIBarcodeMappedResult") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeMappedResult : NSObject
/// Barcode result.
@property (nonatomic, readonly, strong) SBSDKBarcodeScannerResult * _Nonnull barcode;
/// Mapped info about barcode. Is filled via <code>SBSDKUIBarcodesBatchScannerMapping</code> protocol.
/// Can be <code>nil</code>.
@property (nonatomic, readonly, strong) SBSDKUIBarcodeMappedData * _Nullable mappedData;
/// The initializer.
/// \param barcode The barcode result.
///
- (nonnull instancetype)initWithBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The configuration for the behavior of the RTU-UI barcode scanner.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK42SBSDKUIBarcodeScannerBehaviorConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeScannerBehaviorConfiguration : NSObject
/// The types of codes to be detected.
@property (nonatomic, copy) NSArray<SBSDKBarcodeType *> * _Nonnull acceptedBarcodeTypes;
/// The types of documents being extracted from scanned codes.
@property (nonatomic, copy) NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull acceptedDocumentTypes;
/// Filter for extended EAN and UPC barcodes.
@property (nonatomic) enum SBSDKBarcodesExtensionFilter extensionFilter;
/// Specifies the way of barcode images generation or disables this generation at all.
/// Use, if you want to receive a full sized image with barcodes.
@property (nonatomic) enum SBSDKBarcodeImageGenerationType barcodeImageGenerationType;
/// Whether flash is toggled on or off.
@property (nonatomic) BOOL isFlashEnabled;
/// Whether scanner screen should make a sound on successful barcode detection.
@property (nonatomic) BOOL isSuccessBeepEnabled;
/// Time in seconds until the screen is automatically cancelled.
/// Set to 0 to disable automatic cancellation.
@property (nonatomic) NSTimeInterval autoCancelTimeout;
/// Additional parameters for tweaking the detection of barcodes.
@property (nonatomic, strong) SBSDKBarcodeAdditionalParameters * _Nonnull additionalParameters;
/// The range of valid camera zoom factors.
@property (nonatomic, strong) SBSDKZoomRange * _Nonnull cameraZoomRange;
/// The relative zoom level of the camera relative to <code>SBSDKUIBarcodeScannerBehaviorConfiguration/cameraZoomRange</code>.
/// The minimum value is 0.0 (zoomed out), the maximum value is 1.0 (zoomed in).
@property (nonatomic) CGFloat cameraZoomFactor;
/// When this property is set to <code>True</code>, the zoom can be activated by double tapping somewhere in the receivers view.
@property (nonatomic) BOOL isDoubleTapToZoomEnabled;
/// When this property is set to <code>True</code>, the zoom can be activated by a pinch gesture somewhere in the receivers view.
@property (nonatomic) BOOL isPinchToZoomEnabled;
/// Defines, if zooming in or out should be animated.
@property (nonatomic) BOOL shouldAnimateZooming;
/// The barcode detectors engine mode.
@property (nonatomic) enum SBSDKBarcodeEngineMode engineMode;
/// Additional filter to reject or accept barcode scanner results.
@property (nonatomic, strong) SBSDKUIBarcodeFilter * _Nonnull barcodeFilter;
/// Disables auto-focus and locks the lens at the specified focus lock lens position.
@property (nonatomic) BOOL isFocusLockEnabled;
/// The position of the lens.
/// Values can be between 0.0f (minimum focusing distance) and 1.0f (maximum focusing distance).
/// The value will be clamped to [0.0f, 1.0f].
@property (nonatomic) CGFloat focusLockPosition;
/// The initial recognition delay in seconds.
@property (nonatomic) NSTimeInterval initialScanDelay;
/// Defines, if the confirmation dialog should be displayed or not before returning the results to the delegate.
@property (nonatomic) BOOL isResultWithConfirmationEnabled;
/// The text format of the results dialog.
@property (nonatomic) enum SBSDKBarcodeDialogFormat dialogTextFormat;
/// Set to <code>True</code> to enable and display the region of interest, to <code>False</code> otherwise.
@property (nonatomic) BOOL isViewFinderEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKUICameraConfiguration;

/// The general configuration class for all RTU-UI components.
/// Component specific configurations are subclassed from this class.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK20SBSDKUIConfiguration")
@interface SBSDKUIConfiguration : NSObject
/// The default configuration.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKUIConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// The camera configuration.
@property (nonatomic, readonly, strong) SBSDKUICameraConfiguration * _Nonnull cameraConfiguration;
/// Designated initializer. Creates a new instance of <code>SBSDKUIConfiguration</code>.
/// \param cameraConfiguration A configuration for the camera device.
///
- (nonnull instancetype)initWithCameraConfiguration:(SBSDKUICameraConfiguration * _Nonnull)cameraConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end

@class SBSDKUIBarcodeScannerUIConfiguration;
@class SBSDKUIBarcodeScannerTextConfiguration;
@class SBSDKUIBarcodeTrackingOverlayConfiguration;

/// This class describes the look and feel, as well as the textual contents of the RTU-UI barcode scanner.
/// Use the <code>defaultConfiguration</code> class method to retrieve an instance and modify it.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK34SBSDKUIBarcodeScannerConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeScannerConfiguration : SBSDKUIConfiguration
/// The user interface sub-configuration.
@property (nonatomic, strong) SBSDKUIBarcodeScannerUIConfiguration * _Nonnull uiConfiguration;
/// The configuration for displayed texts.
@property (nonatomic, strong) SBSDKUIBarcodeScannerTextConfiguration * _Nonnull textConfiguration;
/// The configuration controlling the scanning screens behavior.
@property (nonatomic, strong) SBSDKUIBarcodeScannerBehaviorConfiguration * _Nonnull behaviorConfiguration;
/// The configuration for the tracked barcodes overlay.
@property (nonatomic, strong) SBSDKUIBarcodeTrackingOverlayConfiguration * _Nonnull trackingOverlayConfiguration;
/// The default configuration.
///
/// returns:
/// A mutable instance of <code>SBSDKUIBarcodeScannerConfiguration</code> with default values.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIBarcodeScannerConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKUIBarcodeScannerConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Designated initializer. Creates a new instance of <code>SBSDKUIBarcodeScannerConfiguration</code>.
/// \param uiConfiguration A configuration for the user interface. Defines colors and sizes.
///
/// \param textConfiguration A configuration for text being displayed in the barcode scanner screen.
///
/// \param behaviorConfiguration A configuration for barcode scanner behavior.
///
/// \param cameraConfiguration A configuration for the barcode scanners camera.
///
/// \param trackingOverlayConfiguration A configuration for the barcode scanners tracking overlay.
///
- (nonnull instancetype)initWithUiConfiguration:(SBSDKUIBarcodeScannerUIConfiguration * _Nonnull)uiConfiguration textConfiguration:(SBSDKUIBarcodeScannerTextConfiguration * _Nonnull)textConfiguration behaviorConfiguration:(SBSDKUIBarcodeScannerBehaviorConfiguration * _Nonnull)behaviorConfiguration cameraConfiguration:(SBSDKUICameraConfiguration * _Nonnull)cameraConfiguration trackingOverlayConfiguration:(SBSDKUIBarcodeTrackingOverlayConfiguration * _Nonnull)trackingOverlayConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithCameraConfiguration:(SBSDKUICameraConfiguration * _Nonnull)cameraConfiguration SWIFT_UNAVAILABLE;
@end


@interface SBSDKUIBarcodeScannerConfiguration (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
- (nullable instancetype)initWithJson:(NSString * _Nonnull)json partial:(BOOL)partial;
@end


/// Configuration for the textual contents of camera based view controllers.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKUIEnableCameraTextConfiguration")
@interface SBSDKUIEnableCameraTextConfiguration : NSObject
/// The string being displayed on the label describing the camera access requirement.
/// Defaults to “Please enable the camera permission to start scanning.”
@property (nonatomic, copy) NSString * _Nonnull enableCameraExplanationText;
/// The string being displayed on the button to request camera access.
/// Defaults to “Enable camera”.
@property (nonatomic, copy) NSString * _Nonnull enableCameraButtonTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The configuration for the textual contents of the RTU-UI barcode scanner.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK38SBSDKUIBarcodeScannerTextConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeScannerTextConfiguration : SBSDKUIEnableCameraTextConfiguration
/// String being displayed as description.
@property (nonatomic, copy) NSString * _Nonnull finderTextHint;
/// String being displayed on the flash button.
@property (nonatomic, copy) NSString * _Nullable flashButtonTitle;
/// String being displayed on the cancel button.
@property (nonatomic, copy) NSString * _Nullable cancelButtonTitle;
/// String being displayed as the confirmation dialogs title.
@property (nonatomic, copy) NSString * _Nullable confirmationDialogTitle;
/// String being displayed as the confirmation dialogs message.
@property (nonatomic, copy) NSString * _Nullable confirmationDialogMessage;
/// The title of the confirmation dialog retry button.
@property (nonatomic, copy) NSString * _Nonnull confirmationDialogRetryButtonTitle;
/// The title of the confirmation dialog confirm button.
@property (nonatomic, copy) NSString * _Nonnull confirmationDialogConfirmButtonTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKUIDialogStyle;
@class SBSDKUIDialogButtonStyle;

/// The configuration for user interface of the RTU-UI barcode scanner.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK36SBSDKUIBarcodeScannerUIConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeScannerUIConfiguration : NSObject
/// Foreground color of the cancel button and when flash button is on.
@property (nonatomic, strong) UIColor * _Nonnull topBarButtonsColor;
/// Background color of the top bar.
@property (nonatomic, strong) UIColor * _Nonnull topBarBackgroundColor;
/// Foreground color of the flash button when flash is off.
@property (nonatomic, strong) UIColor * _Nonnull flashButtonInactiveColor;
/// Background color of the detection overlay.
@property (nonatomic, strong) UIColor * _Nonnull cameraOverlayColor;
/// Foreground color of the detection overlay.
@property (nonatomic, strong) UIColor * _Nonnull finderLineColor;
/// Width of finder frame border.
@property (nonatomic) CGFloat finderLineWidth;
/// Aspect ratio of finder frame (width \ height), which is used to build actual finder frame.
@property (nonatomic, strong) SBSDKAspectRatio * _Nonnull finderAspectRatio;
/// Foreground color of the description label.
@property (nonatomic, strong) UIColor * _Nonnull finderTextHintColor;
/// Whether the flash button is hidden or not.
@property (nonatomic) BOOL isFlashButtonHidden;
/// Whether the cancel button is hidden or not.
@property (nonatomic) BOOL isCancelButtonHidden;
/// Allowed orientations for automatic interface rotations.
@property (nonatomic) enum SBSDKOrientationLock orientationLockMode;
/// The style of the confirmation dialog.
@property (nonatomic, strong) SBSDKUIDialogStyle * _Nonnull confirmationDialogStyle;
/// The style of the confirmation dialogs confirm button.
@property (nonatomic, strong) SBSDKUIDialogButtonStyle * _Nonnull confirmationDialogConfirmButtonStyle;
/// The style of the confirmation dialogs retry button.
@property (nonatomic, strong) SBSDKUIDialogButtonStyle * _Nonnull confirmationDialogRetryButtonStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An abstract base class for RTU-UI view controllers.
/// important:
/// Do not use or subclass.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK21SBSDKUIViewController")
@interface SBSDKUIViewController : UIViewController
/// If set to <code>True</code>, the receiver shows the status bar. Otherwise the status bar is hidden.
@property (nonatomic) BOOL shouldShowStatusBar;
/// The style of the status bar.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// If set to <code>True</code>, the receiver automatically hides the home indicator.
/// Does not apply to devices with a Home button.
@property (nonatomic) BOOL shouldHideHomeIndicator;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Dismisses the receiver if possible. Subclasses should override here and call its delegates.
/// If the receiver is the <code>topViewController</code> of a <code>UINavigationController</code> this method pops the receiver from the navigation stack. If the receiver is presented modally, it is dismissed.
/// \param cancelled Whether the receiver was cancelled or finished.
///
- (void)dismiss:(BOOL)cancelled;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class SBSDKUIEnableCameraUIConfiguration;

/// A <code>SBSDKUIViewController</code> subclass which adds support for enabled and disabled camera permission.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKUICameraViewController")
@interface SBSDKUICameraViewController : SBSDKUIViewController
/// Whether the camera access is granted or not.
@property (nonatomic, readonly) BOOL isCameraAccessGranted;
/// A container where the enable-camera-view should be put.
@property (nonatomic, readonly, strong) UIView * _Null_unspecified containerForEnableCameraView;
/// A text configuration, used for the enable-camera-view.
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraTextConfiguration * _Nonnull enableCameraTextConfiguration;
/// A UI configuration, used for the enable-camera-view.
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraUIConfiguration * _Nonnull enableCameraUIConfiguration;
/// A method for subclassing.
/// Override to perform custom actions after checking camera access. For example updating some control visibility.
/// \param granted Whether the camera access is granted or not.
///
- (void)cameraAccessDidChange:(BOOL)granted;
/// A method for subclassing.
/// Override to perform custom actions before appearing of the enable-camera-view.
/// For example: show the container or hide some buttons.
- (void)willShowEnableCameraView;
/// A method for subclassing.
/// Override to perform custom actions after disappearing of the enable-camera-view.
/// For example: hide the container or show some buttons.
- (void)didHideEnableCameraView;
/// Is called when the application became active.
- (void)applicationDidBecomeActive;
/// Updates the flash button.
- (void)updateFlashButton;
/// Called whenever the views layout did change.
- (void)updateLayout;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBSDKUIBarcodeScannerViewControllerDelegate;

/// A highly customizable camera-based RTU-UI view controller to detect QR and barcodes.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK35SBSDKUIBarcodeScannerViewController") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeScannerViewController : SBSDKUICameraViewController
/// Enables or disables the QR/barcode detection.
/// Defaults to <code>True</code>.
@property (nonatomic) BOOL isRecognitionEnabled;
/// The receivers delegate.
@property (nonatomic, weak) id <SBSDKUIBarcodeScannerViewControllerDelegate> _Nullable delegate;
/// Creates a new instance of <code>SBSDKUIBarcodeScannerViewController</code> and presents it modally.
/// \param presenter The view controller the new instance should be presented on.
///
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param delegate The delegate of the new detection view controller.
///
///
/// returns:
/// A new instance of <code>SBSDKUIBarcodeScannerViewController</code>.
+ (SBSDKUIBarcodeScannerViewController * _Nonnull)presentOn:(UIViewController * _Nonnull)presenter configuration:(SBSDKUIBarcodeScannerConfiguration * _Nonnull)configuration delegate:(id <SBSDKUIBarcodeScannerViewControllerDelegate> _Nullable)delegate;
/// Creates a new instance of <code>SBSDKUIBarcodeScannerViewController</code>.
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param delegate The delegate of the new detection view controller.
///
///
/// returns:
/// A new instance of <code>SBSDKUIBarcodeScannerViewController</code>.
+ (SBSDKUIBarcodeScannerViewController * _Nonnull)createWithConfiguration:(SBSDKUIBarcodeScannerConfiguration * _Nonnull)configuration delegate:(id <SBSDKUIBarcodeScannerViewControllerDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
/// Freezes the cameras preview layer by stopping the camera session.
- (void)freezeCamera;
/// Unfreezes the previously frozen cameras preview layer by restarting the camera session.
- (void)unfreezeCamera;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)updateFlashButton;
- (void)didCancel;
- (void)didFinish;
@property (nonatomic, readonly, strong) UIView * _Nonnull containerForEnableCameraView;
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraTextConfiguration * _Nonnull enableCameraTextConfiguration;
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraUIConfiguration * _Nonnull enableCameraUIConfiguration;
- (void)didHideEnableCameraView;
- (void)willShowEnableCameraView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface SBSDKUIBarcodeScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKBarcodeTrackingOverlayControllerDelegate>
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didTapOnBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode;
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didChangeSelectedBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)selectedBarcodes;
- (SBSDKBarcodeTrackedViewPolygonStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller polygonStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
- (SBSDKBarcodeTrackedViewTextStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller textStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBSDKUIBarcodeScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKBarcodeScannerViewControllerDelegate>
- (BOOL)barcodeScannerControllerShouldDetectBarcodes:(SBSDKBarcodeScannerViewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
- (NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller filterResults:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes SWIFT_WARN_UNUSED_RESULT;
- (void)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller didDetectBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes;
@end


/// The general delegate protocol for <code>SBSDKUIViewController</code>-based classes.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK29SBSDKUIViewControllerDelegate_")
@protocol SBSDKUIViewControllerDelegate
@optional
/// Informs the delegate, that the <code>SBSDKUIViewController</code> wants to cancel.
/// If you implement this method and return <code>False</code>, you will be responsible for dismissing the view controller.
/// \param viewController The view controller that wants to cancel.
///
///
/// returns:
/// <code>True</code>, if you want to automatically dismiss the view controller. <code>False</code> otherwise.
- (BOOL)viewControllerShouldCancel:(SBSDKUIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
/// Informs the delegate, that the <code>SBSDKUIViewController</code> wants to finish.
/// If you implement this method and return <code>False</code>, you will be responsible for dismissing the view controller.
/// \param viewController The view controller that wants to finish.
///
///
/// returns:
/// <code>True</code>, if you want to automatically dismiss the view controller. <code>False</code> otherwise.
- (BOOL)viewControllerShouldFinish:(SBSDKUIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
@end


/// Delegate protocol for <code>SBSDKUIBarcodeScannerViewController</code>.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK43SBSDKUIBarcodeScannerViewControllerDelegate_") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@protocol SBSDKUIBarcodeScannerViewControllerDelegate <SBSDKUIViewControllerDelegate>
@optional
/// Informs the delegate that one or more barcodes have been detected.
/// Implementing this delegate function will use the new Scanbot barcode detector: see <code>SBSDKBarcodeType</code>.
/// Optional.
/// \param viewController The detection view controller that detected barcode(s).
///
/// \param barcodeResults An array of <code>SBSDKBarcodeScannerResult</code> objects containing recently detected barcodes.
///
- (void)qrBarcodeDetectionViewController:(SBSDKUIBarcodeScannerViewController * _Nonnull)viewController didDetectResults:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)barcodeResults;
/// Asks the delegate whether to highlight a barcode on the selection overlay or not.
/// It is optional and only called when the selection overlay is enabled.
/// \param viewController The calling <code>SBSDKUIBarcodeScannerViewController</code>.
///
/// \param code The barcode scanner result that may be highlighted or not.
///
///
/// returns:
/// <code>True</code>, if the provided barcode result should be highlighted on the selection overlay. <code>False</code> otherwise.
- (BOOL)qrBarcodeDetectionViewController:(SBSDKUIBarcodeScannerViewController * _Nonnull)viewController shouldHighlightResult:(SBSDKBarcodeScannerResult * _Nonnull)code SWIFT_WARN_UNUSED_RESULT;
/// Informs the delegate that the <code>SBSDKUIBarcodeScannerViewController</code> has been cancelled and dismissed.
/// Optional.
/// \param viewController The <code>SBSDKUIBarcodeScannerViewController</code> that did dismiss.
///
- (void)qrBarcodeDetectionViewControllerDidCancel:(SBSDKUIBarcodeScannerViewController * _Nonnull)viewController;
/// Informs the delegate that the <code>SBSDKUIBarcodeScannerViewController</code> has been cancelled and dismissed by timeout.
/// Optional.
/// note:
/// If this method is not implemented, viewController will try to call <code>qrBarcodeDetectionViewControllerDidCancel(_:)</code>.
/// \param viewController The <code>SBSDKUIBarcodeScannerViewController</code> that did dismiss.
///
- (void)qrBarcodeDetectionViewControllerDidTimeout:(SBSDKUIBarcodeScannerViewController * _Nonnull)viewController;
@end


/// The configuration object for the RTU-UI barcode tracking overlay.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK42SBSDKUIBarcodeTrackingOverlayConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodeTrackingOverlayConfiguration : NSObject
/// Displays an augmented reality view that draws the frames, content and type text of the found barcodes when it finds them.
@property (nonatomic) BOOL overlayEnabled;
/// If enabled, newly detected barcodes will be automatically selected.
/// Otherwise the user has to tap on a barcode on the selection overlay to select it.
/// Has no effect with disabled overlay.
@property (nonatomic) BOOL automaticSelectionEnabled;
/// The color for the results overlays polygons.
@property (nonatomic, strong) UIColor * _Nonnull polygonColor;
/// The text color for the results overlays.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The text background color for the results overlays.
@property (nonatomic, strong) UIColor * _Nonnull textContainerColor;
/// The color for the results overlays polygons.
@property (nonatomic, strong) UIColor * _Nonnull highlightedPolygonColor;
/// The text color for the results overlays.
@property (nonatomic, strong) UIColor * _Nonnull highlightedTextColor;
/// The text background color for the results overlays.
@property (nonatomic, strong) UIColor * _Nonnull highlightedTextContainerColor;
/// The text format for the results overlays.
@property (nonatomic) enum SBSDKBarcodeOverlayFormat overlayTextFormat;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The configuration for the behavior of RTU-UI detector screens for barcodes.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK48SBSDKUIBarcodesBatchScannerBehaviorConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodesBatchScannerBehaviorConfiguration : NSObject
/// Whether flash is toggled on or off.
@property (nonatomic) BOOL isFlashEnabled;
/// Whether scanner screen should make a sound on successful barcode or MRZ detection.
@property (nonatomic) BOOL isSuccessBeepEnabled;
/// The types of codes to be detected.
@property (nonatomic, copy) NSArray<SBSDKBarcodeType *> * _Nonnull acceptedBarcodeTypes;
/// The types of documents being extracted from scanned codes.
@property (nonatomic, copy) NSArray<SBSDKBarcodeDocumentRootType *> * _Nonnull acceptedDocumentTypes;
/// Filter for extended EAN and UPC barcodes.
@property (nonatomic) enum SBSDKBarcodesExtensionFilter extensionFilter;
/// Additional parameters for tweaking the detection of barcodes.
@property (nonatomic, strong) SBSDKBarcodeAdditionalParameters * _Nonnull additionalDetectionParameters;
/// The barcode detectors engine mode.
@property (nonatomic) enum SBSDKBarcodeEngineMode engineMode;
/// The range of valid camera zoom factors.
@property (nonatomic, strong) SBSDKZoomRange * _Nonnull cameraZoomRange;
/// The relative zoom level of the camera relative to <code>cameraZoomRange</code>.
/// The minimum value is 0.0 (zoomed out), the maximum value is 1.0 (zoomed in).
/// You can use this value to zoom the camera programmatically but also to set an initial zoom factor.
@property (nonatomic) CGFloat cameraZoomFactor;
/// When this property is set to <code>True</code>, the zoom can be activated by double tapping somewhere in the receivers view.
@property (nonatomic) BOOL isDoubleTapToZoomEnabled;
/// When this property is set to <code>True</code>, the zoom can be activated by a pinch gesture somewhere in the receivers view.
@property (nonatomic) BOOL isPinchToZoomEnabled;
/// Defines, if zooming in or out should be animated.
@property (nonatomic) BOOL shouldAnimateZooming;
/// Additional filter to reject or accept barcode scanner results.
@property (nonatomic, strong) SBSDKUIBarcodeFilter * _Nonnull barcodeFilter;
/// Disables auto-focus and locks the lens at the specified focus lock lens position.
@property (nonatomic) BOOL isFocusLockEnabled;
/// The position of the lens.
/// Values can be between 0.0f (minimum focusing distance) and 1.0f (maximum focusing distance). The value will be clamped to [0.0f, 1.0f].
@property (nonatomic) CGFloat focusLockPosition;
/// The initial recognition delay in seconds.
@property (nonatomic) NSTimeInterval initialScanDelay;
/// Set to <code>True</code> to enable and display the region of interest, to <code>False</code> otherwise.
@property (nonatomic) BOOL isViewFinderEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SBSDKUIBarcodesBatchScannerUIConfiguration;
@class SBSDKUIBarcodesBatchScannerTextConfiguration;

/// This class describes the look and feel, as well as the textual contents of the RTU-UI batch barcode scanner.
/// Use the <code>defaultConfiguration</code> class method to retrieve an instance and modify it.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK40SBSDKUIBarcodesBatchScannerConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodesBatchScannerConfiguration : SBSDKUIConfiguration
/// The user interface sub-configuration.
@property (nonatomic, strong) SBSDKUIBarcodesBatchScannerUIConfiguration * _Nonnull uiConfiguration;
/// The configuration for displayed texts.
@property (nonatomic, strong) SBSDKUIBarcodesBatchScannerTextConfiguration * _Nonnull textConfiguration;
/// The configuration controlling the scanning screens behavior.
@property (nonatomic, strong) SBSDKUIBarcodesBatchScannerBehaviorConfiguration * _Nonnull behaviorConfiguration;
/// The configuration for the tracked barcodes overlay.
@property (nonatomic, strong) SBSDKUIBarcodeTrackingOverlayConfiguration * _Nonnull trackingOverlayConfiguration;
/// The default configuration.
///
/// returns:
/// A mutable instance of <code>SBSDKUIBarcodesBatchScannerConfiguration</code> with default values.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIBarcodesBatchScannerConfiguration * _Nonnull defaultConfiguration;)
+ (SBSDKUIBarcodesBatchScannerConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Designated initializer. Creates a new instance of <code>SBSDKUIBarcodesBatchScannerConfiguration</code>.
/// \param uiConfiguration A configuration for the user interface. Defines colors and sizes.
///
/// \param textConfiguration A configuration for text being displayed in the barcode scanner screen.
///
/// \param behaviorConfiguration A configuration for barcode scanner behavior.
///
/// \param cameraConfiguration A configuration for the barcode scanners camera.
///
/// \param trackingOverlayConfiguration A configuration for the barcode scanners tracking overlay.
///
- (nonnull instancetype)initWithUiConfiguration:(SBSDKUIBarcodesBatchScannerUIConfiguration * _Nonnull)uiConfiguration textConfiguration:(SBSDKUIBarcodesBatchScannerTextConfiguration * _Nonnull)textConfiguration behaviorConfiguration:(SBSDKUIBarcodesBatchScannerBehaviorConfiguration * _Nonnull)behaviorConfiguration cameraConfiguration:(SBSDKUICameraConfiguration * _Nonnull)cameraConfiguration trackingOverlayConfiguration:(SBSDKUIBarcodeTrackingOverlayConfiguration * _Nonnull)trackingOverlayConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithCameraConfiguration:(SBSDKUICameraConfiguration * _Nonnull)cameraConfiguration SWIFT_UNAVAILABLE;
@end


@interface SBSDKUIBarcodesBatchScannerConfiguration (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
- (nullable instancetype)initWithJson:(NSString * _Nonnull)json partial:(BOOL)partial;
@end


/// Protocol for the <code>SBSDKUIBarcodesBatchScannerViewController</code> barcode results mapping.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK34SBSDKUIBarcodesBatchScannerMapping_") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@protocol SBSDKUIBarcodesBatchScannerMapping
/// Method in which you should load and return information about barcode. The info is returned in block, so async loading is possible.
/// \param barcode Barcode, for which the info should be returned.
///
/// \param completion Block, where you should return mapped info about barcode.
///
- (void)loadMappedDataForBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode completion:(void (^ _Nullable)(SBSDKUIBarcodeMappedData * _Nullable))completion;
@end


/// The configuration for the textual contents of the RTU-UI batch barcode scanner.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK44SBSDKUIBarcodesBatchScannerTextConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodesBatchScannerTextConfiguration : SBSDKUIEnableCameraTextConfiguration
/// String being displayed as description.
@property (nonatomic, copy) NSString * _Nonnull finderTextHint;
/// String being displayed on the cancel button.
@property (nonatomic, copy) NSString * _Nonnull cancelButtonTitle;
/// String being displayed on the flash button.
@property (nonatomic, copy) NSString * _Nonnull flashButtonTitle;
/// String being displayed on the clear button.
@property (nonatomic, copy) NSString * _Nonnull clearButtonTitle;
/// String being displayed on the delete button.
@property (nonatomic, copy) NSString * _Nonnull deleteButtonTitle;
/// String being displayed on the view results button.
@property (nonatomic, copy) NSString * _Nonnull submitButtonTitle;
/// String used for displaying amount of scanned barcodes. Use %d for number formatting symbol.
@property (nonatomic, copy) NSString * _Nonnull barcodesCountText;
/// String used to show process of fetching mapped data for barcodes.
@property (nonatomic, copy) NSString * _Nonnull fetchingStateText;
/// String to show that no barcodes were scanned yet.
@property (nonatomic, copy) NSString * _Nonnull noBarcodesTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The configuration for user interface of the RTU-UI batch barcode scanner.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK42SBSDKUIBarcodesBatchScannerUIConfiguration") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodesBatchScannerUIConfiguration : NSObject
/// Foreground color of the top bar buttons on the scanning screen.
@property (nonatomic, strong) UIColor * _Nonnull topBarButtonsColor;
/// Background color of the top bar.
@property (nonatomic, strong) UIColor * _Nonnull topBarBackgroundColor;
/// Foreground color of the flash button when flash is off.
@property (nonatomic, strong) UIColor * _Nonnull topBarButtonsInactiveColor;
/// Background color of the detection overlay.
@property (nonatomic, strong) UIColor * _Nonnull cameraOverlayColor;
/// Foreground color of the detection overlay.
@property (nonatomic, strong) UIColor * _Nonnull finderLineColor;
/// Width of finder frame border.
@property (nonatomic) CGFloat finderLineWidth;
/// Aspect ratio of finder frame (width \ height), which is used to build actual finder frame.
@property (nonatomic, strong) SBSDKAspectRatio * _Nonnull finderAspectRatio;
/// Foreground color of the description label.
@property (nonatomic, strong) UIColor * _Nonnull finderTextHintColor;
/// Whether the flash button is hidden or not.
@property (nonatomic) BOOL isFlashButtonHidden;
/// Whether the cancel button is hidden or not.
@property (nonatomic) BOOL isCancelButtonHidden;
/// Allowed orientations for automatic interface rotations.
@property (nonatomic) enum SBSDKOrientationLock orientationLockMode;
/// Text color of the barcodes count label.
@property (nonatomic, strong) UIColor * _Nonnull barcodesCountTextColor;
/// Text color in the details barcodes list. Also affects image background, separator and progress spinner.
@property (nonatomic, strong) UIColor * _Nonnull detailsPrimaryColor;
/// Foreground color of the top bar buttons on the details screen.
@property (nonatomic, strong) UIColor * _Nonnull detailsActionColor;
/// Background color of the details screen.
@property (nonatomic, strong) UIColor * _Nonnull detailsBackgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SBSDKUIBarcodesBatchScannerViewControllerDelegate;

/// A highly customizable camera-based view controller to detect barcodes batches.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK41SBSDKUIBarcodesBatchScannerViewController") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@interface SBSDKUIBarcodesBatchScannerViewController : SBSDKUICameraViewController <UIViewControllerTransitioningDelegate>
/// Enables or disables the barcode detection.
@property (nonatomic) BOOL isRecognitionEnabled;
/// The receivers delegate.
@property (nonatomic, weak) id <SBSDKUIBarcodesBatchScannerViewControllerDelegate> _Nullable delegate;
/// The mapper object, that conforms to the <code>SBSDKUIBarcodesBatchScannerMapping</code> protocol. Used to get additional info for barcodes.
/// Does not hold strong reference to the object. Can be <code>nil</code>.
@property (nonatomic, weak) id <SBSDKUIBarcodesBatchScannerMapping> _Nullable dataMapper;
/// Creates a new instance of <code>SBSDKUIBarcodesBatchScannerViewController</code> and presents it modally.
/// \param presenter The view controller the new instance should be presented on.
///
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param delegate The delegate of the new detection view controller.
///
///
/// returns:
/// A new instance of <code>SBSDKUIBarcodesBatchScannerViewController</code>.
+ (SBSDKUIBarcodesBatchScannerViewController * _Nonnull)presentOn:(UIViewController * _Nonnull)presenter configuration:(SBSDKUIBarcodesBatchScannerConfiguration * _Nonnull)configuration delegate:(id <SBSDKUIBarcodesBatchScannerViewControllerDelegate> _Nullable)delegate;
/// Creates a new instance of <code>SBSDKUIBarcodesBatchScannerViewController</code>.
/// \param configuration The configuration to define look and feel of the new detection view controller.
///
/// \param delegate The delegate of the new detection view controller.
///
///
/// returns:
/// A new instance of <code>SBSDKUIBarcodesBatchScannerViewController</code>.
+ (SBSDKUIBarcodesBatchScannerViewController * _Nonnull)createNewWithConfiguration:(SBSDKUIBarcodesBatchScannerConfiguration * _Nonnull)configuration delegate:(id <SBSDKUIBarcodesBatchScannerViewControllerDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
/// Freezes the cameras preview layer by stopping the camera session.
- (void)freezeCamera;
/// Unfreezes the previously frozen cameras preview layer by restarting the camera session.
- (void)unfreezeCamera;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)updateLayout;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)updateFlashButton;
@property (nonatomic, readonly, strong) UIView * _Null_unspecified containerForEnableCameraView;
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraTextConfiguration * _Nonnull enableCameraTextConfiguration;
@property (nonatomic, readonly, strong) SBSDKUIEnableCameraUIConfiguration * _Nonnull enableCameraUIConfiguration;
- (void)didHideEnableCameraView;
- (void)willShowEnableCameraView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface SBSDKUIBarcodesBatchScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKBarcodeScannerViewControllerDelegate>
- (NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller filterResults:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes SWIFT_WARN_UNUSED_RESULT;
- (void)barcodeScannerController:(SBSDKBarcodeScannerViewController * _Nonnull)controller didDetectBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)codes;
- (BOOL)barcodeScannerControllerShouldDetectBarcodes:(SBSDKBarcodeScannerViewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
@end


@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface SBSDKUIBarcodesBatchScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <UITableViewDataSource, UITableViewDelegate>
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface SBSDKUIBarcodesBatchScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <SBSDKBarcodeTrackingOverlayControllerDelegate>
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didChangeSelectedBarcodes:(NSArray<SBSDKBarcodeScannerResult *> * _Nonnull)selectedBarcodes;
- (void)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller didTapOnBarcode:(SBSDKBarcodeScannerResult * _Nonnull)barcode;
- (SBSDKBarcodeTrackedViewPolygonStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller polygonStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
- (SBSDKBarcodeTrackedViewTextStyle * _Nullable)barcodeTrackingOverlay:(SBSDKBarcodeTrackingOverlayController * _Nonnull)controller textStyleFor:(SBSDKBarcodeScannerResult * _Nonnull)barcode SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UIViewControllerAnimatedTransitioning;
@protocol UIViewControllerInteractiveTransitioning;

@interface SBSDKUIBarcodesBatchScannerViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
@end


/// Delegate protocol for <code>SBSDKUIBarcodesBatchScannerViewController</code>.
SWIFT_PROTOCOL("_TtP24ScanbotBarcodeScannerSDK49SBSDKUIBarcodesBatchScannerViewControllerDelegate_") SWIFT_DEPRECATED_MSG("Use SBSDKUI2BarcodeScannerViewController instead.")
@protocol SBSDKUIBarcodesBatchScannerViewControllerDelegate <SBSDKUIViewControllerDelegate>
/// Informs the delegate that one or more barcodes have been detected and the view controller has dismissed.
/// \param viewController The detection view controller that detected barcode(s).
///
/// \param barcodeResults An array of SBSDKBarcodeScannerResult objects containing detected barcodes.
///
- (void)barcodesBatchScannerViewController:(SBSDKUIBarcodesBatchScannerViewController * _Nonnull)viewController didFinishWithResults:(NSArray<SBSDKUIBarcodeMappedResult *> * _Nonnull)barcodeResults;
@optional
/// Informs the delegate that the <code>SBSDKUIBarcodesBatchScannerViewController</code> has been cancelled and dismissed.
/// Optional.
/// \param viewController The <code>SBSDKUIBarcodesBatchScannerViewController</code> that did dismiss.
///
- (void)barcodesBatchScannerViewControllerDidCancel:(SBSDKUIBarcodesBatchScannerViewController * _Nonnull)viewController;
@end


/// Configuration for the camera of all RTU-UI components.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK26SBSDKUICameraConfiguration")
@interface SBSDKUICameraConfiguration : NSObject
/// The camera to be used.
/// Defaults to <code>SBSDKCameraDevice/defaultBackFacingCamera</code>.
@property (nonatomic, strong) SBSDKCameraDevice * _Null_unspecified camera;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// The general style for an action button in a ScanbotSDK alert. Used to customize certain result alerts in SBSDKUI components.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK24SBSDKUIDialogButtonStyle")
@interface SBSDKUIDialogButtonStyle : NSObject
/// The font of the button title.
/// Defaults to System font Regular 17.0.
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The color of the buttons title while not pressed.
/// Defaults to blue.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The color of the buttons title while pressed.
/// Defaults to blue.
@property (nonatomic, strong) UIColor * _Nonnull highlightedTextColor;
/// The background color of the button while not pressed.
/// Defaults to clear color, fully transparent.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// The background color of the button while pressed.
/// Defaults to a light grey color.
@property (nonatomic, strong) UIColor * _Nonnull highlightedBackgroundColor;
/// The default action button style. Use for confirmative actions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIDialogButtonStyle * _Nonnull defaultStyle;)
+ (SBSDKUIDialogButtonStyle * _Nonnull)defaultStyle SWIFT_WARN_UNUSED_RESULT;
/// The cancel action button style. Use for cancel actions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIDialogButtonStyle * _Nonnull cancelStyle;)
+ (SBSDKUIDialogButtonStyle * _Nonnull)cancelStyle SWIFT_WARN_UNUSED_RESULT;
/// The destructive action button style. Use for actions that are not reversible, e.g. deletions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIDialogButtonStyle * _Nonnull destructiveStyle;)
+ (SBSDKUIDialogButtonStyle * _Nonnull)destructiveStyle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIVibrancyEffect;

/// The general style for a dialog in ScanbotSDK. Used to customize certain result dialogs in SBSDKUI components.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK18SBSDKUIDialogStyle")
@interface SBSDKUIDialogStyle : NSObject
/// The color of the screen-covering backdrop view.
/// Defaults to a very transparent <code>UIColor.black</code>.
@property (nonatomic, strong) UIColor * _Nonnull screenBackgroundColor;
/// The general background color of the actual dialog view.
/// Defaults to a very light grey with subtle transparency.
@property (nonatomic, strong) UIColor * _Nonnull dialogBackgroundColor;
/// The visual effect of the dialogs background.
/// Defaults to a system like blur with regular vibrance.
@property (nonatomic, strong) UIVibrancyEffect * _Nonnull dialogBackgroundEffect;
/// The corner radius of the dialog.
/// Defaults to 13 points.
@property (nonatomic) CGFloat cornerRadius;
/// The color of the dialogs title.
/// Defaults to <code>UIColor.black</code>.
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
/// The font of the dialogs title.
/// Defaults to System font Bold 17.0.
@property (nonatomic, strong) UIFont * _Nonnull titleFont;
/// The color of the dialogs message.
/// Defaults to <code>UIColor.black</code>.
@property (nonatomic, strong) UIColor * _Nonnull messageColor;
/// The font of the dialogs message.
/// Defaults to System font Regular 13.0.
@property (nonatomic, strong) UIFont * _Nonnull messageFont;
/// The color of the separators around the dialogs button area.
/// Defaults to a light grey with a small amount of transparency.
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
/// The width of the separators in points.
/// Defaults to 0.5 points.
@property (nonatomic) CGFloat separatorWidth;
/// The default style that mimics an iOS <code>UIAlertController</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKUIDialogStyle * _Nonnull defaultStyle;)
+ (SBSDKUIDialogStyle * _Nonnull)defaultStyle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Configuration for the user interface of camera based view controllers.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK34SBSDKUIEnableCameraUIConfiguration")
@interface SBSDKUIEnableCameraUIConfiguration : NSObject
/// The color of the <code>Enable Camera</code> button. Defaults to white.
@property (nonatomic, strong) UIColor * _Nonnull enableCameraButtonColor;
/// The color of the description text and icon in the <code>enable camera view</code>. Defaults to semitransparent white.
@property (nonatomic, strong) UIColor * _Nonnull enableCameraDescriptionColor;
/// The background color of the <code>enable camera view</code>. Defaults to black.
@property (nonatomic, strong) UIColor * _Nonnull enableCameraBackgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImageView;

SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK33SBSDKUIEnableCameraViewController")
@interface SBSDKUIEnableCameraViewController : UIViewController
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified enableCameraButton;
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified enableCameraDescriptionLabel;
@property (nonatomic, strong) IBOutlet UIImageView * _Null_unspecified enableCameraImageView;
+ (SBSDKUIEnableCameraViewController * _Nonnull)make SWIFT_WARN_UNUSED_RESULT;
- (IBAction)enableCameraTapped:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// Enumeration of video preview content mode.
typedef SWIFT_ENUM(NSInteger, SBSDKVideoContentMode, open) {
/// The video layers content is filled into the video layer.
/// No visible borders. Video may be cropped to the visible screen area.
  SBSDKVideoContentModeFillIn = 0,
/// The video layers content is fit into the video layer.
/// Video may have visible borders. Video is fully visible within the screen.
  SBSDKVideoContentModeFitIn = 1,
};

/// An enum describing how images can be flipped.
typedef SWIFT_ENUM(NSInteger, SBSDKVideoFlipMode, open) {
/// Do not flip the image.
  SBSDKVideoFlipModeNone = 0,
/// Flip the image horizontally.
  SBSDKVideoFlipModeHorizontal = 1,
/// Flip the image vertically.
  SBSDKVideoFlipModeVertical = 2,
/// Flip the image both, horizontally and vertically.
  SBSDKVideoFlipModeBoth = 3,
};

/// An enum describing the resolution of a video or camera stream.
typedef SWIFT_ENUM(NSInteger, SBSDKVideoFrameResolution, open) {
/// Select the video resolution automatically based on device specifics.
  SBSDKVideoFrameResolutionAuto = 0,
/// Select a full HD (1920x1080) video resolution.
  SBSDKVideoFrameResolutionFullHD = 1,
/// Select a 4k UHD (3840x2160) video resolution.
  SBSDKVideoFrameResolutionUHD = 2,
};


/// Helper class to define a range for zooming.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK14SBSDKZoomRange")
@interface SBSDKZoomRange : NSObject
/// The minimum zoom scale.
/// Defaults to 1.0.
@property (nonatomic, readonly) CGFloat minZoom;
/// The maximum zoom scale.
/// Defaults to 12.0.
@property (nonatomic, readonly) CGFloat maxZoom;
/// Designated initializer.
/// \param minZoom The minimum zoom scale.
///
/// \param maxZoom The maximum zoom scale.
///
- (nonnull instancetype)initWithMinZoom:(CGFloat)minZoom andMaxZoom:(CGFloat)maxZoom OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A scrollable and zoomable <code>UIScrollView</code> subclass that displays images and an overlay view.
/// Zooming and scrolling can be controlled using the standard UIScrollView properties.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK27SBSDKZoomingImageScrollView")
@interface SBSDKZoomingImageScrollView : UIScrollView
/// The image to be displayed. Can be zoomed and scrolled. If the image is zoomed out, it will be automatically centred.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The margins of the displayed image to the bounds of the receiver. Defaults to (20.0, 20.0, 20.0, 20.0).
@property (nonatomic) UIEdgeInsets margins;
/// Pass a transparent view here to display it as a HUD style view above the image view.
/// If set, it will automatically be laid out to match the frame of the image view.
/// Defaults to <code>nil</code>.
@property (nonatomic, strong) UIView * _Nullable overlayView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


@interface SBSDKZoomingImageScrollView (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
@end

@class UIApplication;
@class ScanbotSDKConfiguration;

/// Main class of Scanbot SDK. Lets you install the license and allows basic configuration.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK7Scanbot")
@interface Scanbot : NSObject
/// Enables or disables the Scanbot logging. If enabled Scanbot logs various warnings, errors and info to the console.
/// By default logging is off.
/// \param enabled <code>True</code>, if Scanbot should log, <code>False</code> otherwise.
///
+ (void)setLoggingEnabled:(BOOL)enabled;
/// Enables or disables the Scanbot SDK license logging.
/// If enabled Scanbot SDK logs information about the license to the console.
/// By default license logging is on.
/// \param enabled <code>True</code>, if Scanbot SDK should log the license, <code>False</code> otherwise.
///
+ (void)setLicenseLoggingEnabled:(BOOL)enabled;
/// Checks the active license.
///
/// returns:
/// <code>True</code>, if a valid license is installed and not expired or if the trial period is running. <code>False</code> otherwise.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLicenseValid;)
+ (BOOL)isLicenseValid SWIFT_WARN_UNUSED_RESULT;
/// The current license status.
///
/// returns:
/// The status of the currently set license.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum SBSDKLicenseStatus licenseStatus;)
+ (enum SBSDKLicenseStatus)licenseStatus SWIFT_WARN_UNUSED_RESULT;
/// The expiration date for license.
/// Returns <code>nil</code>, if there is no expiration date - for example if the license is invalid or not set.
///
/// returns:
/// Date of license expiration.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDate * _Nullable licenseExpirationDate;)
+ (NSDate * _Nullable)licenseExpirationDate SWIFT_WARN_UNUSED_RESULT;
/// The default license failure handler.
///
/// returns:
/// The default license failure handler.
+ (void (^ _Nonnull)(enum SBSDKLicenseStatus, enum SBSDKFeature, NSString * _Nullable))defaultLicenseFailureHandler SWIFT_WARN_UNUSED_RESULT;
/// Sets up the default license failure handler which is being called when the license or trial time expired.
/// The default handler shows an alert to inform your users about the expired license or trial period.
+ (void)setupDefaultLicenseFailureHandler;
/// Sets up the default license failure handler which is being called when the license or trial time expired.
/// The default handler shows an alert to inform your users about the expired license or trial period.
/// \param completion An optional block being executed after the user pressed the OK-button in the alert.
///
+ (void)setupDefaultLicenseFailureHandlerWithCompletion:(void (^ _Nullable)(void))completion;
/// Sets a closure to handle license failures, such as expiration or invalid licenses.
/// When a license failure occurs, this closure is called, allowing you to perform actions
/// such as displaying an alert to inform users about the issue and potentially terminating the app.
/// <blockquote>
/// Warning: After a license failure, none of the SDK classes and functions will return
/// meaningful results.
///
/// </blockquote>
/// \param handler A closure that will be called when a license failure occurs.
/// The closure should take appropriate actions in response to the failure.
///
+ (void)setLicenseFailureHandler:(void (^ _Nullable)(enum SBSDKLicenseStatus, enum SBSDKFeature, NSString * _Nullable))handler;
/// Installs the Scanbot SDK license from a string.
/// \param licenseString The string containing the license.
///
///
/// returns:
/// <code>True</code>, if the license was installed and is active, <code>False</code> otherwise.
+ (BOOL)setLicense:(NSString * _Nonnull)licenseString;
/// Setting this value to <code>True</code> will include the default image storages in backups of the app to iCloud or iTunes.
/// The default value is <code>False</code>, meaning that default image storages are not being backed up.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL backupImageStoragesEnabled;)
+ (BOOL)backupImageStoragesEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackupImageStoragesEnabled:(BOOL)value;
/// Container for data used for testing.
/// See <code>SBSDKTestData</code> for further information.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SBSDKTestData * _Nonnull testData;)
+ (SBSDKTestData * _Nonnull)testData SWIFT_WARN_UNUSED_RESULT;
/// The bundle that ScanbotSDK searches for its additional data bundles.
/// Defaults is <code>Bundle.main</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nullable resourceBundle;)
+ (NSBundle * _Nullable)resourceBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setResourceBundle:(NSBundle * _Nullable)value;
/// The current UIApplication object set to the Scanbot SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIApplication * _Nonnull sharedApplication;)
+ (UIApplication * _Nonnull)sharedApplication SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedApplication:(UIApplication * _Nonnull)value;
/// Applies a configuration to the Scanbot SDK.
/// \param configuration A <code>ScanbotSDKConfiguration</code> instance containing the desired configuration settings.
///
///
/// returns:
/// A Boolean value indicating whether the configuration was successfully applied.
/// If the license is valid after applying the configuration, it returns <code>True</code>. Otherwise, it returns <code>False</code>.
+ (BOOL)applyConfiguration:(ScanbotSDKConfiguration * _Nonnull)configuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// <code>ScanbotSDKConfiguration</code> is a configuration class that allows you to customize various settings and behavior of the Scanbot SDK.
/// To configure the SDK, create an instance of this class and set the desired properties.
/// You can also use the provided class methods to create a configuration object from JSON data or a JSON file.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK23ScanbotSDKConfiguration")
@interface ScanbotSDKConfiguration : NSObject
/// A Boolean value that determines whether SDK logging is enabled. Defaults to <code>False</code>.
@property (nonatomic) BOOL loggingEnabled;
/// A string containing the license key required to use the SDK features. Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable licenseString;
/// A Boolean value that controls whether license-related logs are enabled. Defaults to <code>True</code>.
@property (nonatomic) BOOL licenseLoggingEnabled;
/// A custom handler for handling license validation failures. Defaults to a built-in handler.
@property (nonatomic, copy) void (^ _Nonnull licenseFailureHandler)(enum SBSDKLicenseStatus, enum SBSDKFeature, NSString * _Nullable);
/// The bundle from which resources like image assets are loaded. Defaults to the main bundle.
@property (nonatomic, strong) NSBundle * _Nonnull resourceBundle;
/// The shared <code>UIApplication</code> instance. Automatically set to the shared application instance if available.
@property (nonatomic, strong) UIApplication * _Nullable sharedApplication;
/// A Boolean value that determines whether the status bar is shown on scanning screens. Defaults to <code>False</code>.
@property (nonatomic) BOOL shouldShowStatusBarOnScanningScreens;
/// The default status bar style for scanning screens. Defaults to <code>.lightContent</code>.
@property (nonatomic) UIStatusBarStyle defaultStatusBarStyle;
/// The image quality used when storing images. Defaults to <code>80</code>.
@property (nonatomic) uint8_t fileStorageImageQuality;
/// The image format used when storing images. Defaults to <code>.JPEG</code>.
@property (nonatomic) enum SBSDKImageFileFormat fileStorageImageFormat;
/// The base directory for storing scanned files. Defaults to <code>nil</code>, which uses the application’s documents directory.
@property (nonatomic, copy) NSURL * _Nullable fileStorageBaseDirectory;
/// The encryption mode for stored files. Defaults to <code>.AES128</code>.
@property (nonatomic) enum SBSDKAESEncrypterMode fileEncryptionMode;
/// The password for file encryption. Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable fileEncryptionPassword;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// A default configuration instance with predefined settings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ScanbotSDKConfiguration * _Nonnull defaultConfiguration;)
+ (ScanbotSDKConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Creates a configuration object from a JSON string.
/// \param JSON A JSON string containing configuration settings in a valid JSON format.
///
///
/// returns:
/// A configured <code>ScanbotSDKConfiguration</code> instance if successful,
/// or <code>nil</code> if there was an issue parsing the JSON or creating the configuration.
+ (ScanbotSDKConfiguration * _Nullable)configurationWithJSON:(NSString * _Nonnull)JSON SWIFT_WARN_UNUSED_RESULT;
/// Creates a configuration object from a JSON file located at the specified URL.
/// \param URL The URL of the JSON file containing configuration settings.
///
///
/// returns:
/// A configured <code>ScanbotSDKConfiguration</code> instance if the JSON file is successfully loaded and parsed,
/// or <code>nil</code> if the file is not found or there was an issue with parsing.
+ (ScanbotSDKConfiguration * _Nullable)configurationWithJSONFromURL:(NSURL * _Nonnull)URL SWIFT_WARN_UNUSED_RESULT;
@end


/// Helper class to configure the properties of the ScanbotSDK RTU-UI (SBSDKUI) components.
SWIFT_CLASS("_TtC24ScanbotBarcodeScannerSDK9ScanbotUI")
@interface ScanbotUI : NSObject
/// The SBSDKUI-component-wide encrypter for storing image data to disk. Defaults to <code>nil</code>.
/// If set to <code>nil</code> no encryption is used at all.
/// You can use the built-in encrypter <code>SBSDKAESEncrypter</code> to encrypt your sensitive image data
/// using AES128 or AES256 before storing it to disk.
/// When using encryption you still can access the unencrypted images in the image storage.
/// Of course, encrypted storages cannot be read without the proper encrypter being set here.
/// You are responsible for migrating image storages.
/// <blockquote>
/// Important: If you wish to use the ScanbotSDK RTU-UI-wide encryption setup your encrypter before using any of the ScanbotSDK RTU-UI API.
///
/// </blockquote>
/// A good place to configure it, is your <code>AppDelegate</code>’s entry point, right where the license is set.
/// Once ScanbotSDK RTU-UI API is used the storages are created and any change to the default encrypter is of no effect.
/// note:
/// For standard components, prefixed with SBSDK (without UI) the default encrypter has no effect, since there is
/// no image storage by default. You can, of course, create instances of <code>SBSDKKeyedImageStorage</code>
/// and <code>SBSDKIndexedImageStorage</code> and initialize them with an encrypter of your choice.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <SBSDKStorageCrypting> _Nullable defaultImageStoreEncrypter;)
+ (id <SBSDKStorageCrypting> _Nullable)defaultImageStoreEncrypter SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultImageStoreEncrypter:(id <SBSDKStorageCrypting> _Nullable)value;
/// The SBSDKUI-component-wide encrypter for storing PDF files to disk. Defaults to <code>nil</code>.
/// If set to <code>nil</code> no encryption is used at all.
/// You can use the built-in encrypter <code>SBSDKAESEncrypter</code> to encrypt your sensitive pdf files
/// using AES128 or AES256 before storing it to disk.
/// <blockquote>
/// Important: If you wish to use the ScanbotSDK RTU-UI-wide encryption setup your encrypter before using any of the ScanbotSDK RTU-UI API.
///
/// </blockquote>
/// A good place to configure it, is your <code>AppDelegate</code>’s entry point, right where the license is set.
/// note:
/// For standard components, prefixed with SBSDK (without UI) the default pdf encrypter has no effect.
/// Here you have to set it up for the PDF renderer individually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <SBSDKStorageCrypting> _Nullable defaultPDFEncrypter;)
+ (id <SBSDKStorageCrypting> _Nullable)defaultPDFEncrypter SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPDFEncrypter:(id <SBSDKStorageCrypting> _Nullable)value;
/// A Boolean value that determines whether the status bar is shown on scanning screens. Defaults to <code>False</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldShowStatusBarOnScanningScreens;)
+ (BOOL)shouldShowStatusBarOnScanningScreens SWIFT_WARN_UNUSED_RESULT;
+ (void)setShouldShowStatusBarOnScanningScreens:(BOOL)value;
/// The default status bar style of all ScanbotSDK RTU-UI components upon their initialization. Defaults to <code>.lightContent</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) UIStatusBarStyle defaultStatusBarStyle;)
+ (UIStatusBarStyle)defaultStatusBarStyle SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultStatusBarStyle:(UIStatusBarStyle)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








@interface UIImage (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Applies clockwise 90 degree rotations to the receiver.
/// \param times Number of 90 degree rotations to apply. Can be negative. Uses modulo arithmetics.
///
///
/// returns:
/// The rotated UIImage or <code>nil</code>, if the rotation failed.
- (UIImage * _Nullable)sbsdk_imageRotatedClockwise:(NSInteger)times SWIFT_WARN_UNUSED_RESULT;
/// Applies counter-clockwise 90 degree rotations to the receiver.
/// \param times Number of counter-clockwise 90 degree rotations to apply. Can be negative. Uses modulo arithmetics.
///
///
/// returns:
/// The rotated UIImage or <code>nil</code>, if the rotation failed.
- (UIImage * _Nullable)sbsdk_imageRotatedCounterClockwise:(NSInteger)times SWIFT_WARN_UNUSED_RESULT;
/// Applies a rotation by the specified amount of degrees to the receiver.
/// \param degrees The amount of degrees to rotate the receiver by.
///
///
/// returns:
/// The rotated <code>UIImage</code> or <code>nil</code>, if the rotation failed.
- (UIImage * _Nullable)sbsdk_imageRotatedByDegrees:(CGFloat)degrees SWIFT_WARN_UNUSED_RESULT;
/// Strips the alpha channel from the receiver.
///
/// returns:
/// The image without alpha channel or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageWithStrippedAlpha SWIFT_WARN_UNUSED_RESULT;
/// Transforms the receiver with the given transformation.
/// \param transform The transform to apply.
///
///
/// returns:
/// The transformed image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageTransformedBy:(CGAffineTransform)transform SWIFT_WARN_UNUSED_RESULT;
/// Inverts the colors of the receiver.
///
/// returns:
/// The inverted image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_invertedImage SWIFT_WARN_UNUSED_RESULT;
/// Rotates the receiver and corrects the orientation flag to <code>UIImageOrientationUp</code>.
///
/// returns:
/// The orientation fixed image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageWithNormalizedOrientation SWIFT_WARN_UNUSED_RESULT;
/// Resets the orientation flag of the receiver to <code>UIImageOrientationUp</code> without rotating the image data.
///
/// returns:
/// The image with the resetted orientation flag or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageWithFixedOrientation SWIFT_WARN_UNUSED_RESULT;
/// Non-uniformally scales the receiver to the given size.
/// \param size The new size the image should have.
///
///
/// returns:
/// The scaled image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageScaledToSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Scales down the image to fit into the given size. Does no upscaling.
/// \param size The new fit-in size of the receiver.
///
///
/// returns:
/// The resized image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_limitedToSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Returns a center-crop of the receiver with the given aspect ratio.
/// \param aspectRatio The aspect ratio that the crop should have.
///
///
/// returns:
/// The cropped image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_imageByCenterCroppingToAspectRatio:(SBSDKAspectRatio * _Nonnull)aspectRatio SWIFT_WARN_UNUSED_RESULT;
/// Checks, if the receiver is monochromatic (grayscale).
///
/// returns:
/// <code>True</code>, if the receiver is monochromatic, <code>False</code> otherwise.
- (BOOL)sbsdk_isMonochrome SWIFT_WARN_UNUSED_RESULT;
/// Converts the receiver to a monochromatic image with less memory usage.
///
/// returns:
/// The monochromatic image or <code>nil</code> if the operation failed.
- (UIImage * _Nullable)sbsdk_grayscaledImage SWIFT_WARN_UNUSED_RESULT;
/// Resets the orientation flag to <code>UIImageOrientationUp</code> without rotating the image data.
/// \param imageData The image data to reset the orientation flag on.
///
///
/// returns:
/// The image data with the resetted orientation flag or <code>nil</code> if the operation failed.
+ (NSData * _Nullable)sbsdk_imageDataWithFixedOrientation:(NSData * _Nonnull)imageData SWIFT_WARN_UNUSED_RESULT;
/// Converts a <code>CVPixelBufferRef</code> to <code>UIImage</code>.
/// \param pixelBuffer The pixel buffer to convert.
///
///
/// returns:
/// The converted image or <code>nil</code>, if the operation failed.
+ (UIImage * _Nullable)sbsdk_imageFromPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer SWIFT_WARN_UNUSED_RESULT;
/// Converts a <code>CMSampleBuffer</code> to <code>UIImage</code>.
/// \param sampleBuffer The sample buffer to convert.
///
///
/// returns:
/// The converted image or <code>nil</code>, if the operation failed.
+ (UIImage * _Nullable)sbsdk_imageFromSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer SWIFT_WARN_UNUSED_RESULT;
/// Converts a <code>CVPixelBufferRef</code> to <code>UIImage</code>.
/// \param pixelBuffer The pixel buffer to convert.
///
/// \param orientation The orientation the pixel buffer has. So the final image can be unrotated.
///
///
/// returns:
/// he converted, unrotated image or <code>nil</code>, if the operation failed.
+ (UIImage * _Nullable)sbsdk_imageFromPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer orientation:(AVCaptureVideoOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
/// Converts a <code>CMSampleBuffer</code> to <code>UIImage</code>.
/// \param sampleBuffer The sample buffer to convert.
///
/// \param orientation The orientation the pixel buffer has. So the final image can be unrotated.
///
///
/// returns:
/// he converted, unrotated image or <code>nil</code>, if the operation failed.
+ (UIImage * _Nullable)sbsdk_imageFromSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer orientation:(AVCaptureVideoOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
/// Creates an empty <code>UIImage</code> of the given size, filled with the given color.
/// \param color The fill color.
///
/// \param size The size of the image.
///
///
/// returns:
/// The empty, color-filled image or <code>nil</code> if the operation failed.
+ (UIImage * _Nullable)sbsdk_imageWithColor:(UIColor * _Nonnull)color size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@class NSLayoutConstraint;

@interface UIView (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// \param otherView The view to connect the receiver with.
///
///
/// returns:
/// An array of constraints to connect the receiver with another view.
- (NSArray<NSLayoutConstraint *> * _Nonnull)sbsdk_constraintsForAnchoringToBoundsOf:(UIView * _Nonnull)otherView SWIFT_WARN_UNUSED_RESULT;
@end





@interface UIViewController (SWIFT_EXTENSION(ScanbotBarcodeScannerSDK))
/// Embeds a view controller as child view controller.
/// The child view controller view is added to the container view, which must be an adjacent view of the receiver’s view.
/// \param viewController The view controller to be embedded into the receiver.
///
/// \param containerView The <code>UIView</code> that holds and layouts the embedded view controller view.
///
- (void)sbsdk_attachViewController:(UIViewController * _Nonnull)viewController inView:(UIView * _Nonnull)containerView;
/// Embeds a view controller as child view controller.
/// The child view controller view is added to the view.
/// \param viewController The view controller to be embedded into the view.
///
/// \param constraints The constraints for the child viewController.
///
- (void)sbsdk_attachViewController:(UIViewController * _Nonnull)viewController withConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints;
/// Detaches a child view controller from the receiver and removes its view from the view hierarchy.
/// \param viewController The child view controller that should be removed from the receiver’s child view controller hierarchy.
///
- (void)sbsdk_detachViewController:(UIViewController * _Nonnull)viewController;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
